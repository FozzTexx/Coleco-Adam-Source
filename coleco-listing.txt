                               NAME “Rev 06.1 - TF
                                Project:  EOS 6 Absolute Listing
                           13       cose               999 Quaker Lane South                eee
                           15       sees                                  06110             eoe9
                           16       Sese                                                    ees6
                        @e@e@@@&ee@&@@f@F@e@6@@e@FBe2 @fO29@¢@F@@ @f@¢@F@oF O@8@&2@GOfOfSBwGs+GeSFReWa
                           51 5SSSSSHSSEHSESHSSSESHEESSESHSESSTESHEHEHE  HEEEEHEEHESTHTHEEEHEESEEEEEE
                           §2 ;
                           53 ;       Rev History
                           54 ;       Rev.  Date        Name       Change
                           55 ;        6.1  21tjun0844   af        Merge sources for absolute listing.
                           56 ;                                    No changes made to code.
                           57 ;        6.0 O8oct  1545   yk        Code released for production.
                           58 ;
                           §9 ;[    code commented out by ¢;@¢ee’was removed before EOS
                           60 :{ was grouped into one file, code commented out by simle  }
                           61 ;( ¢:° was removed in the process of grouping E0S in order }
                           62 ;[ to avoid assembier comlaints  or LOCAL/GLOBAL conflicts |]
                           63 ;[    @;sescenussss...’ geperates code segments which were |
                           64 ;[ ortginally in separate files                            ]
                           67 +SSSSSSSSSSSSSSSSSSSSHSSSSRSSSRARSESETETSSSSSSSTARSSSSSerssessaesrs
                        69  NAME “Rev 11 - RPD*
                        70 ;
                        71°; Rev  Date          Made by    Change
                        72;  11   1Soct425p     RPD        changed E0S_4 to CV_A
                        73;  10   130ct1000p    RPD        made only OS7 jump entries conditionally assembled
                        74;   9   120¢t2300     vsb        Added                  POSIT FILE,  FILE  QUERY  plus         thru   a  FO“G4
                        75;   8   O7oct!710     rfj   .    __EFXOVER changed to _EFFECT _OVER
                        76 ;                               Added _UPDATE_SPINNER
               ;        77;   7   £«,Ooct1725   rt         Renamed WRSPR_NM_TBL  to WR_SPR_ATTRIBUTE
                        78;   6   O30ct1207     rt)        Increased TEMP_STACK to  12bytes,
                        79 ;                                Removed SAVED_COUNT
                        80;   &   WNsepts25p    RPD        replaced CONSOUT  data area with new CONSOUT2
                        61;   4   29sept235p    RPD        replaced PLAYSONGS  with SOUNDS
                        82;   3   26sept1005a   RPD        added conditional assembly stuff for super  games
                        $3;   2   25sept660a    RPD        merged all of EOS ram together into this file
                        84;   1   20septi00sa   RPD        new memory mapping
                        866;  O   aid-sept      vB         original map @ E8OO0H
                        86 ;
             <FFFF>   | 87 TRUE           EQU     OFFFFH
             <0000>     66 FALSE          EQU     OOO00H
                        89
             <FFFEF>    90 IN_EOS         EQU     TRUE                                                        ‘
             <0000>     91 SUPERGAME      EQU     FALSE
                        92 ;
                        93 ; CURRENT EOS MEMORY MAPPING
                        94 ;
                        95 ;FCB_S         EQU     0D390H.                 ;FCB area
                   .    96 ;THREE1K BLKS  EQU     00400H                  ;3 FCB 1K buffers
             <E000>     97 EOSCODE        EQuU    OEOOOH                  ;address of EOS code segment
             <FBFF>     96 EOS GLBTBL     EQU     OFBFFH                  ;address of EOS global tables
             <FC30>     99 EOS UMP_TBL    EQU     OFC30H                  ;address of EOS jump table
             <FO6O>    100 EOSGLB RAM     EQU     OFDG6OH                 ;address of EOS global data  area
             <FECO>    101 EOSPCB_OCB     EQU     OFECOH                  ;address of EOS PCB/DCB areas
                       102
                       103  ;
                       104  ;  These are key record sizes, used  invarious EOS routines.
                       105  ;  See “INCLUDE FMGR_EQUS* AND “INCLUDE P_DCB_EQU* for details.
                       106  ;             |
                       107
             <OO1A>    108 DIR_ENT_LENGTH    OEFL    26
             <0004>    109 P_SIZE            DEFL    4        ;THE NUMBER OF BYTES IN THE PCB
             <00 15>   110 DSIZE             DEFL    21       ;THE NUMBER OF BYTES  INTHE DCB
                       41;                    .
                         W43;
                         114;  jump tebie area
                         115;
                         11GSSSHSSHSSSHSSHSESS  SHEEHEEEHEHHREEHRESHEREHEEEHEEESEEVERES
                         117
                         118          ORG EOS JMP_TBL
                        119
                        12D                         EEEEHSHESEHTESEREESEHESHEHEEEEEEKE
                        121
             <FC30>     122 EOS START                          EQU  $
    FC30 C3F832         123       uP       __EOS START
             <FC33>     124 CONS  _DISP                        EQU  $
    FC33 C3F627         125       JP       __CONSDISP
             <FC36>     126 CONS INIT                          EQU  $
    FC36 C3F50C         127       JP       __CONS_INIT
             <FC39>     128 _CONS_OUT      |                   EQu  $
   FC39  C3F60A         129        ie      __CONS_OUT
             <FC3C>     130 _DLY_AFT_HRO RES                   EQu  $
   FC3C  C3FOSF         131       or       __DOLY_AFT_HRD_RES
             <FC3F>     132 _END_PR_BUFF                 |     EQU  $
   FC3F  C3FS88         133       uP       __END_PR_BUFF
             <FC42>     134 _ENDPR_CH                          EQU  $
   FC42  C3FS7C         135       ue       __END_PR_CH
             <FC45>     136 _END_RO_1BLOCK                     EQu  $
   FC45  C3FAE2         137       uP       __END_RD_1_BLOCK
             <FC46>     138 _END_RD_CH_DEV                     EQU  $
   FC48  C3FBAS         439       uP       __END_RD_CH_DEV
             <FC4B>     140 _END_RD_KBD                        EQU  $
   FC4B  C3F4EO         141       uP       __END_RD_KBD
             <FC4E>     142 END _WR_1BLOCK                     EQu  $
   FC4E  C3FB81B        143       uP       __END_WR_1 BLOCK       |
             <FCS1>     144 END _WR_CH_DEV                     EQU  $
   FCS1  C3FBE1         145       uP       __END_WR_CH_DEV
             <FC54>     146 FIND DCB                           EQu  $
   FCS4  C3F446         147       up       __FIND_DOCB
             <FCS7>     148 -GET_OCB_ADOR                     EQu   $
   FCS7  C3F446         149       JP       __GET_DCB_ADOR
             <FCSA>     150 GET _PCBADOR                      EQU   $
   FCSA  C3FA4C         151       uP       __GET_PCB_ADDR
             <FCSD>     152 HARD_INIT                         EQu   $
   FCSO  C3F8FEG        183       JP       __HARD_INIT
             <FC6O>     154 HARD RESET  NET                   EQU   $
   FC60  C3F948         155       uP       __HARD_RESET_NET
             <FC63>     156 PR_BUFF                           EQU   $
   FC63  C3F515         157       uP       __PR_BUFF
             <FC66>     158 PR_CH                                   $
   FC66  C3F4FC         159       uP       __PR_CH
             <FC69>     160 ROD_1BLOCK                        EQU   $
   FC69  C3FA9E         161       uP       __RD_1BLOCK
             <FC6C>     162 RD KBD                            EQU   $
   FC6C  C3F4BA         163       uP       __RD_KBD
             <FC6F>     164 RD_KBD RET CODE                   EQU  $
   FC6F  C3FA7B         165       JP       __RD_KBD_RET_CODE
             <FC72>     166 RD PR_RET CODE                    EQU  $
   FC72  C3FATF         167       uP       __RD_PR_RET_CODE
             <FC75>     168 RD_RET CODE                       EQU  $
   FC75  C3F            169       uP       __RD_RETCODE
             <FC78>    170 RD_TAPE  RET  CODE                  EQU $
    FC78 C3FAB3        174        JP       __RD_TAPERET  CODE
             <FC78>    172 RELOC_ PCB                          EQU $
    FC7B C3FA2F        173        JP       __RELOCPCB
             <FC7E>    174 REQUEST  STATUS                     EQU $
    FC7E C3F473        175        JP       __REQUESTSTATUS
             <FC81>    176 REQ   KBO_STAT                      EQU $
    FC81 C3F4CB        177        JP       __REQKBD STAT
             <FCB4>    178 REQ  PR_STAT                        EQU $
    FC84 C3FSD02       179        JP       __REQPR_STAT
             <FC87>    180 REQ  TAPE STAT                      EQU $
    FC87 C3F507        181        JP       __REQTAPE STAT
             <FCBA>    182 SCAN_ACTIVE                         EQU $
    FC8A C3F9CB        183        JP       __SCAN_ACTIVE
             <FC8D>    184 SOFT  INIT     :                    EQU $
    FC8D C3F922        185        JP       __SOFT_INIT
             <FC90>    186 SOFT  RES DEV                       EQU $
    FC9O C3FASD        187        JP       __SOFT_RESDEV
             <FC93>    186 SOFT  RES KBD                       EQU $
    FC93 C3FAS1        189        JP       __SOFT_RES_KBD
             <FC96>    190 SOFT_RES  PR      |                 EQU $
    FC96 C3FAS5S       191        Jp       __SOFT_RESPR
             <FC99>    192 SOFT  _RESTAPE                      EQU $
    FC99 C3FAS5S9      193        JP       __SOFT_RESTAPE
             <FCOC>    194 START  _PR_BUFF                     EQU $
    FC9C C3FS80        195        JP       __START_PR_BUFF
             <FC9OF>   196 START  PR_CH                        EQU $
    FCOF C3FS60        197        JP       __START_PR_CH
             <FCA2>    1968START  _RD_1 BLOCK                  EQU $
    FCA2 C3FAC6        199        JP       __START_RD_1 BLOCK
             <FCAS>    200 _START_RD_CH DEF                    EQU $
    FCAS C3FB86        201        JP       __START_RO_CH_DEV
             <FCA8>    202 _START_RD_KBD                       EQU $
    FCA8 C3F4D0        203        JP       __START_RD_KBD
             <FCAB>    204            1 BLOCK                  EQU $
    FCAB C3FAFF        205        Jp       __START_WR_1 BLOCK
             <FCAE>    206 START  _WR_CHDEV                    EQU $
    FCAE C3F8C2        207        JP       __START_WR_CH DEV
             <FCB1>    208_SYNC                                EQU $
    FCB1 C3F970        209        JP       __SYNC
             <FCB4>    210 WR_1_  BLOCK                        EQU $
    FCB4 C3FAB2        211        JP       __WR_1_BLOCK
             <FCB7>    212 WR_CH  DEV                          EQU $
    FCB7 C3F875        213        uP       __WR_CH_DEV
                          215   ;
                          216   ;FILE  MANAGER    ENTRIES
                         217    ;
              <FCBA>     218   _FMGR_INIT                              EQU   $
    FCBA  C3EEEA         219          JP        __FMGR_INIT
              <FCBD>     220   _INIT_TAPE_DIR                          EQU   $
    FCBD  C3F323         221          JP        __INIT_TAPE    OIR
              <FCCOQ>    222   _OPEN_FILE                              EQU   $
    FCCO  C3IEAOO        223          JP        __ OPEN FILE
              <FCC3>     224   _CLOSE FILE                             EQU   $
    FCC3  C3EBO4         225          JP        __CLOSE  FILE
              <FCC6>     226   _RESET_FILE                             EQU   $
    FCC6  C3EBEC         227          up        __RESET_FILE
              <FCC9>     228   _MAKE_FILE                              EQU   $
    FCC9  C3E690         229          JP        __MAKE FILE
              <FCCC>     230   _QUERY_FILE                             EQU   $
    FCCC  C3E61B         231     ,    JP        __QUERY_ FILE
              <FCCF>     232   _SET_FILE                               EQU   $
    FCCF  C3E651         233          JP        __SET_FILE
              <FCD2>     234   _READ_FILE                              EQU   $
    FCD2  C3EC1i7        235          JP        __READ  _FILE
              <FCDS5>    236   _WRITE FILE                             EQu   $
    FCDS  C3EDSF         237         JP         __WRITE  FILE
              <FCD8>     238   _SET_DATE                               EQU   $
    FCD8  C3IEECS        239         JP         __SET_DATE
              <FCDB>     240   _GET_DATE                               EQU   $
    FCOB  C3EED4         241         JP         __GET_DATE
              <FCDE>     242   _RENAME FILE                            EQU   $
    FCDE  C3F10F         243         JP         __RENAME_ FILE
              <FCE{>     244   DELETE  FILE                            EQU   $
    FCE1  C3F14E         245         JP         __DELETE  FILE
              <FCE4>     246   _RO_DEV_DEP_STAT                        EQU   $
    FCE4. C3F488         247         JP         __RD_DEV_DEP_STAT
              <FCE7>     248   _GOTO_wP                                EQU   $
    FCE7  C3FA94         249         JP         __GOTO_wP
              <FCEA>     250   _READ_EOS                               EQU  $
    FCEA  C3FA9D         251         JP         __READ_EOS
              <FCED>     252   _TRIM_FILE                              EQU  $
    FCED  C3F241         253         SP         __TRIM_FILE
              <FCFO>     254   _CHECK_FCB                              EQU  $
    FCFO  C3FO89         255         JP         __CHECK_FCB
              <FCF3>     256   _READ_BLOCK                            EQU   $
    FCF3  C3F178         257         uP      —  __READ_BLOCK
              <FCFE>     258   _WRITEBLOCK                            EQU   $
    FCF6  C3F1E6         259         JP         __WRITE_BLOCK
              <FCF9>     260   _MODECHECK                             EQU   $
    FCF9  C3FODS         261         JP         __MODE CHECK
              <FCFC>     262  _SCAN_FOR_FILE                          EQU   $
    FCFC  C3EFOS         263         JP         __SCAN_FOR_FILE
         |    <FCFF>     264  _FILE QUERY                             EQU   $
    FCFF  C3E618         265         JP         __FILE QUERY
              <fDO2>     266  _POSIT_FILE                             EQU   ¢$
    F002  C3F442         267         JP         __POSIT_ FILE
              <FDOS>     268  _EOS 1                                  EQU   $
    FDOS  C3F442         269         JP         __EOS 1
              <FDO8>     270  _EOS 2                                  EQU   $
    FOOS  C3i   ,        271         JP           EOS 2
              <FOO8>    272  £08  3                                EQU $§$
    FDOB  C3F4<FDOE>    274  CV_A   JP      __€O0S3                EQU $
    FDOE  C3F442        275         uP      _CV_A
              <FO1>      277 PORTCOLLECTION                        EQU  $
    FO    C3E191         278         JP       __PORT_ COLLECTION
              <FD14>     279 SWITCH MEM                            EQU  $
    FO14  C3E185         280        JP        __SWITCH_ MEM
              <FDI7>     281 PUTASCII                              EQU  $
    FOI7  C3E153         282        JP        __PUT _ASCII
                         283
                         284 ;
                         285 ; micro  OS7 entries
                         286 ;
                         287
              <FD1A>     288 WRITEVRAM                             EQU
    FOIA  C3EOCOO        289        JP        __WRITE VRAM
              <FD10>     290 READVRAM                              EQU
    FD1ID CIEOIA         291        JP        __READ_VRAM
              <FD20>     292 WRITE REGISTER                        EQU
    FD20  C3E034         293        JP        __WRITE REGISTER
              <FD23>     294 READREGISTER                          EQU
    FD23  C3IEO4F        295        JP        __READ_REGISTER
              <FO26>     296 FILLVRAM                              EQU
    FO26  C3E059         297        JP        __FILL_VRAM
              <FD29>     298 INITTABLE                             EQU
    FO29  C3IEO66        299        JP        __INIT_TABLE
              <FD2C>     300 PUTVRAM                               EQU
    FO2C  C3EOCS         301        JP        __PUT_VRAM
              <FD2F>     302 GETVRAM                               EQU
    FOQF  C3EOCF         303         JP       __GET_VRAM
              <FD32>     304 CALC_OFFSET                           EQU
    FD32  C3E10A         305         uP       __CALC_OFFSET
              <FD35>     306 PX_TO_PTRN_POS                        EQU
    FDO35 C3E129         307         JP       __PX_TO_ PTRN_POS
              <FD38>     308 LOAD_ASCII                            FQU
    FD36  C3E149         309         JP       __LOAD_ASCII
              <FD3B>     310 WR_SPR_ATTRIBUTE                      EQU
              <FDIE>     312 POLLER                                EQU
    FD3E  C3E253         313         JP       __POLLER
              <FD041>    314 UPDATESPINNER                         EQU
    FD41  C3E2A4         315         JP       __UPDATE SPINNER
              <FD44>     316 DECLSN                                EQU
    FO44  C3E355         317         JP       __DECLSN
              <FD47>     318 DECMSN                                EQU  $
    F047  C3E35F         319         JP       __DECMSN
              <FD4A>     320 MSNTOLSN                              EQU  $
    FD4A  C3E369         321         JP       __MSNTOLSN
              <FD4D>     322 ADDS16                                EQU  $
    F040  C3E374       323           JP       __ADDS 16
              <FD50>     324 SOUND_INIT                            EQU  $
    FOSO  C3IE3AB        325        JP        __SOUND_INIT
              <F—D53.    326 TURN_OFF_SOUND                        EQU  $
    FOS3  C3E301         327         JP       __TURN OFF  SOUND                         snot globalized    in os7?
              <FD56>     328 PLAY_IT                 )             EQU  $
    FOS6  C3E3E7         329         JP       __PLAY_IT
              <™059>     330 SOUNOS                                EQU  $
    FD59  C3E406         331         JP       __SOUNDS                                  ;equals  calls  to  play songs   and  sound_man
              <FD5C>     332 EFFECT _OVER                          EQU  $
    FOSC  C3t“"~*        333         JP       __EFFECT OVER
                        335
                        336   NOTE:   See  INTERRUPTVECTORS
                        337
                        338                 ORG      EOS_GLB_TBL
                        339                .<GLB     VECTOR_O8H
                        340 ;VECTOR_OBH     EQU      $+0
                        341                 -GLB     INT_VCTR_TBL
                        342 ;INT_VCTR_TBL   EQU      VECTOR_O8H
                        343 ;               ;GLB     VECTOR_10H
                        344 ;VECTOR_10H     EQU      $+3
                        345                 ;GLB     VECTOR_18H
                        346 ;VECTOR_18H     EQU      $+6
                        347                 ;GLB     VECTOR20H
                        348 ;VECTOR_20H     EQU      $+9
                        349                 ;GLB     VECTOR_28H
                        350 ;VECTOR_28H     EQU      $+12
                        351                 ;GLB     VECTOR_30H
                        352 ;VECTOR_30H      EQU     $+15
                        353                 ;GLB     VECTOR38H
                        354 ;VECTOR_36H     EQU      $+18
                        355                 ;GLB     VECTOR_66H
                        356 ;VECTOR_66H     EQU      $+21
                        358 ;
                        359 ;     NOTE: See SWITCHTABLE
                        360 ;
                        361°;               ;GLB     MEMCNF GOO
                        362 ;MEM_CNFGOO     EQU     $+24       |
                        363 ;;              ;GLB     SWITCHTABLE
                        364 ;SWITCH_TABLE   EQU     MEMCNFGOO
                        365 ::              ;GLB     MEMCNFGOI
                        366 :MEM_CNFGO1     EQU     $+25
                        367 ;;              ;GLB     MEMCNFGO2
                        368 ;MEM_CNFGO2     EQU     $+26
                        369 :;              ;GLB     MEMCNFGO3
                        370 ;MEM_CNFGO3     EQU     $+27
                        371 3;              ;GLB     MEMCNFGO4
                        372 ;MEM_CNFGO4     EQU     $+28
                        373 ;;      |       ;GLB     MEMCNFGOS
                        374 ;MEM_CNFGOS     EQU     $+29
                        375 ;;              ;GLB     MEM_CNFGO6
                        376 ;MEM_CNFGO6     EQU     $+30
                        377 5;              ;GLB     MEM_CNFGO7
                        378 ;MEM_CNFGO7     EQU     $+31
                        379 ;;              ;GLB     MEMCNFGOS8
                        380 ;MEM_CNFGOS     EQU     $+32
                        381 ;;              ;GLB     MEMCNF GOS
                        382 ;MEM_CNFGOS     EQU     $+33
                        383 ;;              ;GLB     MEMCNFGOA
                        384 ;MEM_CNFGOA     EQU     $+34
                        385 ;;              ;GLB     MEMCNF GOB
                        386 ;MEM_CNFGOS     EQU     $+35
                        387 ;;              ;GLB     MEM_CNFGOC
                        388 ;MEM_CNFGOC     EQU     $+36
                        389 ;;              ;GLB     MEM_CNFGOD
                        390 ;MEM_CNFGOD     EQU     $+37
                        391 5;              ;GLB     MEM_CNFGOE
                        392 ;MEM_CNFGOE     EQU     $+38
                        393 ;;              ;GLB     MEM_CNFGOF
                        394 ,;MEM_CNFGOF    EQU     $+39
                         396  ;
                         398  ;        NOTE:   See  PORT  TABLE
                         399  -                     :GLB         MEM   SWITCH   PORT
                         400  ;MEM_  SWITCH    PORT  EQU        $+40
                         402   PORT _TABLE          EQUB        MEMRSWITCHLE  PORT
                         403                        EQUB         NET  RESET   PORT
                         405  :NET _RESET_   PORT   ;GLB        $VDP_CTRL_PORT
                         406  ;VOP_ CTRL_PORT       EQU         $+42
                         408  ;VDP _DATA_PORT       EQUB        $+43_DATA_PORT
                         409                     PORTGLB         CONTROLLER     O PORT
                         4it   CONTROLLER    _0_    ;GLBEQU     $CONTROLLER     _1PORT
                         412  :CONTROLLER_     1_porT   EQU     $+45
                         414  |STROBE   _SET_PORT   ;EQU        $+46OBE   SET   PORT
                         415                        ;GLB         STROBE   RESET   PORT
                         417  :STROBE   _RESET_ PORT;GLBEQU     $SOUNDPORT
                         418  :SOUNDPORT            EQU         $+48
                           420
                           421 ;RAM DEFINITIONS  FOR EOS
                           422
                           423 ;REV O          (v/D     8-24-83)
                           424
                           425
                           427
                           428          ORG    €0S_GiB_RAM
                           429
                           49D SHHSSHSSSHSESSSHSHSEHHHSSEHESEEHEEE RHEE   EEEE
                           431
                           432       ;GLB      CLEAR_RAMSTART
                           433
    FO6O                   434 CLEAR_RAM_START:
                         435
                           436 ;
                           437 ; EOS revision  number initialized  by  EOS START
                           438 ;
                           439       ;GLB      REV_NUM
    FD6O                   440 REV_NUM
    FO6O                   441        DEFS     1
                           442
                           443
                           445 ;
                           446 ; 0S7 equivalent  global data structures
                           447 ;
                           448                   :GLB     VDP_MODE WORD
    FD61                   449 VOP_MODEWORD       DEFS    2
                           450                   ;GLB     VOP_STATUS  BYTE
    FO63                   451 VOP_STATUSBYTE     DEFS    1
                           452                   ;GLB     VRAM_ADDR_ TABLE
    FD64                   453 VRAM_ADDR_TABLE
                           454                   ;GLB     SPRITEATTRIBL
    FD64                   455 SPRITEATTRIBL      DEFS    2
                           456                   ;GLB     SPRITEGENTBL
    FD66                   457 SPRITEGENTBL       DEFS    2
                           458                   ;GLB     PATTRNNAME TBL
    FD68                   459 PATTRNNAMETBL      DEFS    2
           -               460                   ;GLB     PATTRNGENTBL
    FDGA                   461 PATTRNGENTBL       DEFS    2
          |               462                    ;GLB     COLORTABLE
    FO6C                   463 COLORTABLE         DEFS    2
                           464                 ELSE
                           465                    DEFS    2*6+1
                           466                 ENDIF
                  |        467      |            ;GLB     CUR_BANK
    FOGE                   468 CURBANK            DEFS    {
                           469
                         471 ;
                         472 ; EOS global  data structures
                         473 ;
                         474       ;GLB      DEFAULTBT  DEV
                         475       ;GLB      CURRENTDEV
                         476
    FDO6F                477 OEFAULTBT _DEV:
    FDGF                 478 CURRENTDEV:
    FD6F                 479        DEFS     1
                         4860
                         481       ;GLB      CURRENTPCB
                         482
    FD70                 463 CURRENTPCB:
    FD70                 484        DEFS     2                          ; HOLDS THE START ADDRESS OF THE PCB
                         485        IF       .NT.SUPERGAME                             |
                         486       ;GLB      DEVICEI0
                         487        ENDIF
    FO72                 488 DEVICEID:
    FD72                 489        DEFS     1                          ; SAVE DEVICE ID
                         490
                         491i.     ;GLB      FILE NAME_ADDR
    FO73                 492 FILENAME ADDR
    FO73                 493        DEFS     2
                         494
                         495       ;GLB      KEYBOARDBUFFER
                         496
    FO7S                 497 KEYBOARDBUFFER:
    FO75                 498        DEFS              {                 ; HOLDS THE KEY THAT IS READ FROM THE
                         499                                            ; KEYBOARD
                         500
                         501       ;GLB      PRINTBUFFER
                         502
    FO76                 503 PRINTBUFFER:
    FD76                 504        DEFS              16                ; HOLDS THE STRING TO BE PRINTED
                         505
                         506       ;GLB      SECTORSTO_INIT,SECTOR_NO
                         507
    FD86                 508 SECTORSTO_INIT:
    F086                 509        DEFS     1
                         510
    FD87                 511 SECTOR_NO:
    FO87                 $12        DEFS     s
                         §13
                         514       ;GLB      DCB_IMAGE
                         515
    FO8B                 516 DCB_IMAGE:
    FO8B                 517        DEFS     21
                         518
                         519       ;GLB      QUERYBUFFER
    FDAO                 520 QUERYBUFFER
    FDAO                 521        DEFS     DIR_ENT_LENGTH
                         §22
                         §23       ;GLB      FCB_BUFFER
    FOBA                 524 FCB_BUFFER
    FOBA                 $25 |      DEFS     DIR_ENT_LENGTH
                         526
                         527       ;GLB      FILE COUNT, MOD_FILE COUNT
     FOD4                   528  FILE_COUNT
     FOD4                   529          DEFS       ‘
                            530
     FDDS                   531  MOD_FILE  COUNT
     FDDS                   532          DEFS       1
                            533
                            534          :GLB       RETRY COUNT,   FILE NUMBR
     FDO6                   535  RETRY_COUNT
     FDDG6                  536          DEFS       :
                            537
     FDD7                   538  FILE_NUMBR
     FD07                   539          DEFS        1
                            540
                            541          ;GLB       FILENAME  CMPS
     FDDS                   542 FILENAME   _CMPS
     FODS8                  543          DEFS       1
                            544
                            545          ;GLB      DIR_BLOCK_NO,FOUND_AVAIL_ENT
     FDD9                   546 DIR_BLOCK_NO
     FDD9                   547          DEFS       2
             |              548
     FOD                    549 FOUND_AVAIL_ENT
     FODS                   550          DEFS       1
                            551
                            552         ;GLB       VOL_BLK_SZ,BLK_STRT     PTR
     FDDC                   553 BLK_STRT_PTR:
     FDDC                   554 VOL_BLK_SZ:
     FDDC                   555          DEFS      4
                            556
                            557  ; FILE  MANAGER   RAM  STORAGE
                            558
                            559                     ;GLB       EOS_YEAR,EOS   MONTH,EOSDAY
     FDEO                   560 EOS_YEAR            DEFS       1         ;FMGR’S DATE STORAGE
    FOE 1                   561 EOS MONTH           DEFS       1
    FDE2                    562 EOS DAY             DEFS       1
                            563
                            564                     ;GLB       FMGR_DIR_ENT
     FDE3                   565 FMGR_DIR_ENT                                     ;PLACEFOR FMGR TO PUT A DIR. ENTRY
                            566
.                           567                     GLB        FCB_HEAD_ADOR,FCB_DATA_ ADDR
     FOFD                   568 FCB_HEAD    ADDR    EFS        2         ;POINTER TO START OF FCB HEADS
    FOFF                    569 FCB DATA    ADDR    DEFS       2         ;POINTER TO START OF FCB BUFFERS
                            570
                            571                    GLB         FNUM, BYTES REQ,BYTES TO GO,USER BUF
                            572                    GLB         BUF_START,BUF_ENO.BLOCKS  REQ
                            573                    :GLB        USER_NAME  ,STARTBLOCK
    FEO'                    574 FNUM                DEFS       {         ;FILE NUMBER GIVEN TO READ/WRITE ROUTINES
    FEO2                    575 BYTES  REQ          DEFS       2         ;NUMBER OF BYTES REQUESTED BY CALLER
    FEO                     576 BYTES  TO GO        DEFS       2         ;NUMBER OF BYTES STILL TO GIVE TO CALLER
    FEO6                    577 USER_BUF            DEFS       2         ;ADDRESS OF CALLER’S BUFFER
    FEOS                    578 BUF_START           DEFS       2         ;ADDRESS OF MY OWN BUFFER
    FEOA                    579 BUF_END             DEFS       2         ;ADDRESS OF END + 1 OF MY BUFFER
    FEOC                    580 BLOCKS  REO         DEFS       4         ;NUMBER OF BLOCKS REQUESTED (MAKEFILE)
    FE10                    581 USER   NAME     ==  DEFS-      2         ;POINTER TO USER’S NAME STRING
    FE12                    582 START  BLOCK                   4         ;START BLOCK # OF A FILE
                            583
                            584         ;GLB_      NEW_HOLE  START,NEW_HOLE    SIZE
                              __—eacersstate...oeeaanrrneaerneaa        7  ooOS               ee       7     Bo    Oo   Be
                       585
    FE6                586 NEwHOLE START
    FE16               587        DEFS     4
                       588
    FETA               589 NEW_HOLESIZE;
    FETA               590        DEFS     2
                       591
    FEIC               $92 STACK_START:
    FEIC               $93        DEFS     60
                       594
                       595       ;GLB      EOSSTACK
    FE58               596 EOSSTACK:
                         598 .;            ;GiB      SAVEDCOUNT
                         599                                                    : controller data area
                         600               :GLB      SPIN SWOCT                 -THESE TWO BYTES MUST  GE IN THIS ORDER!!!
                         60!               ;GLB      SPIN SwiCT
                         602               -GiB      PERSONAL ODEBOUNCETABLE
                         603               ;Gis      TEMP STACK                 ,Used Dy putascit  when  bank switching
                         G04                                                    : sound data areas
                         605               ;GLB      PTRTO LST  OF SND_ADORS
                         606               ;GLB      PTRTO S GN_O
                         607               ;GLB      PTR_TO_S_ON1
                         608               ;GLB      PTR_TO_SON  2
                         609               ;GLB      PTRTO S ON  3
                         610               ;GLB      SAVECTRL
                         611
                        613 ;SAVEDCOUNT      DEFS      2
                        614 ;
                        615 ; controller  data  area
                        616 ;
    FE58                617 SPINSWO_CT       DEFS                §                   THESE  TwO BYTES MUST BE  INTHIS ORDER!!!
    FESS                618 SPINSWi CT       DEFS                1
    FESA                619 PERSONALDEBOUNCE   TABLE             DEFS                O8
    FE62                620                  DEFS                12                  ;USED BY TEMPSTACK
              <FE6E>    621 TEMPSTACK        EQU                 $                   ;Used by put_ascti when bank switching
                        622
                        623 ;
                        624 ; sound data  areas
                        625 ;
    FE6E                626 PTRTO_LST  OF SND_ADORS    DEFS         2
    FE7O                627 PTR_TO_SON_O              DEFS          2
   FE72                 628 PTR_TO_SON  1             DEFS          2
    FE74                629 PTR_TO_SON  2             DEFS          2
    FE76                630 PTR_TO_SON  3             DEFS          2
    FE78                631 SAVECTRL                  DEFS          1
                        632
                          634   ;
                          635  ; data  area  for   CONS OUT
                          636  ;
                          637                     ;GLB       OLDCHAR  _
                          638                     ;GLB       XMIN
                          639                     ;GLB       XMAX
                          640                     GLB        YMIN
                          641                     ;GLB       Y_ MAX
                          642                     ;GLB       LINEBUFFER_
                          643                     ;GLB       NUM LINES
                          644                     ;GLB       NUM COLUMNS
                          645                     ;GLB       UPPER  LEFT
                          646                     ;GLB       PTRN_NAME   TBL
                          647                     ;GLB       CURSOR
                          648
    FE79                  649  OLDCHAR_            DEFS      1                   ;Storage   of   char  under   cursor
    FETA                  650  X_MIN               DEFS      1                   ;Absolute    X  coord  of   window
    FE7B                  651  X_MAX               DEFS      {
    FE7C                  652  YMIN                DEFS      1
    FE7D                  653  YMAX                DEFS      1
    FETE                  654  LINEBUFFER_         DEFS      33
    FESF                  655  NUMLINES            DEFS      1
    FEAO                  656  NUM_COLUMNS         DEFS      1
    FEA1                  657  UPPER_LEFT          DEFS      2
    FEA3                  658  PTRN_NAME  TBL      ODEFS     2
    FEAS                  659  CURSOR              DEFS      2
                          660
                          661         ;GLB        CLEAR_RAM  SIZE
                          662
              <O147>      663  CLEAR_RAM  SIZE              EQU       ($-CLEAR_RAM   START)
                        665  ;
                        666  ; this  is  the PCB/DCB  area
                        667  ;
                        S68  SHSSSHESSSEHHESHESEHSSEHSHSHSESSHSEHEHESSHHEHEHSEEHHEESE:HH
                        669
                        670          ORG      EOS _PCB_OCB
                        671
                        G7Q  SHSEHSSHSEHSS  HEHEHE  ESETEHEHSEHEHTEEESETHSEHEEHEEHHEEHS
                        673
                        674         ;GLB      PCB
                        675
     FECO               676  PCB:
     FECO               677          DEFS     P_SIZE           ; PCB
                        678
     FEC4               679  DCBS:
     FEC4               680          DEFS      15*DSIZE        ; 1 OCB PER NETWORK  ADORESS
                        66 1
     FFFF               682  RESERVED BYTE:
     FFFF               683          DEFS      {               ; SAVED IN CASE WE OO  FAST  DMA HERE
                        684  ;
                        686  ,SRE  SSSSSTAST SST  AEBS ERTRASPESSoS SSSTSTTHSTHHSSLS SSS STHSSSSSSEES
                        687  ,SSSRSSSSESSSTSRSTSSSSR   SETSSSPESRTASTSTSSHSSSTSSSR PSSST  ESTESSTSEEE
                         689  NAME “Rev OO - RPD*
                         690
                         691
                         692 SAHSSSSSEHSSSESSHESSHSESHSSEHSHSHSHKESESHSKESSHETHESCHSESSESHE
                         693
                         694                 ORG EOSGiB_TBL
                         695
                         697 ;
                         698 ; NOTE: these are defined globa! in £0S_COMN
                         699 ;
                         700°;                     ;GLB     VECTOR_O8H
                         701;                      ;GLB     VECTOR 10H
                         702 ;                     ;GLB     VECTOR_18H
                         703 ;                     ;GLB     VECTOR20H
                         704 ;                     ;GLB     VECTOR28H
                         705 ;                     ;GLB     VECTOR30H
                         706 ;                     ;GLB     VECTOR38H
                         707 ;                     ;GLB     VECTOR66H
                         708 ;
    FBFF C9              709 VECTOR_O8H      RET             irst 8
    FCOO OO              710                 NOP
    FCO! OO              711   |             NOP
    FCO2 C9              712 VECTOR_10H      RET             ;rst 10
    FCO3 OO              713                 NOP
    FCO4 OO              714                 NOP
    FCOS C9              715 VECTOR_18H      RET             :rst 18
    FCO6 OO              716                 NOP
    FCO7 OO              717                 NOP
    FCOB C9              718 VECTOR20H       RET             ;rst 20
    FCOS OO              719                 NOP
    FCOA OO              720                 NOP
    FCOB C9              721 VECTOR_28H      RET             :rst 28
    FCOC OO              722                 NOP
    FCOO OO              723                 NOP
    FCOE C9              724 VECTOR_30H      RET              ;rst30
    FCOF OO              725                 NOP
    FC10 OO              726                 NOP
    FC11 C9              727 VECTOR38H       RET              :rst38
    FC12 OO              728                 NOP
    FC13 OO              729                 NOP
    FC14 ED45            730 VECTOR 66H      RETN             ;nmivector
    FC16 OO              731                 NOP
                       734
                       735
                       736 ; NOTE: these are defined globa! in EQSCOMN
                       737
                       738 :             ;GLB     SWITCHTABLE
                       739 ;             ;GLB     MEM CNFGOO
                       740 :             ;GLB     MEMCNFGO!I
                       741 ;             ;GLB     MEM CNFGO2
                       742 :             ;GLB     MEMCNFGO3
                       743 :             ;GLB     MEMCNFGO4
                       744 ;             ;GLB     MEMCNFGOS
                       745 :             ;GLB     MEMCNFGO6
                       746 :             ;GLB     MEMCNFGO7
                       747 ;             ;GLB     MEMCNFGOS
                       748 :             ;GLB     MEMCNFGOS
                       749 :             ;GLB     MEMCNFGOA
                       750 :             ;GLB     MEMCNF GOB
                       751 :             ;GLB     MEMCNFGOC
                       752 :             ;GLB     MEMCNFGOD
                       753 ;             ;GLB     MEMCNFGOE
                       754 :             ;GLB     MEM_CNFGOF
                       755
                       756 LO_BOOTROM _N_ALPHA_MASK               EQU
             <0001>    757 LO_INTRINSICRAM  _TO_7FFFH_MASK        EQU     0001B
             <0002>    758 LO_EXPANSION_O_TO_7FFFHMASK            CQU     00108
             <Q003>    789 LO_OS7_N_INTRINSIC_2000H_7FFFH_MASK    EQU     001186
                       760
                       761 HI_INTRINSIC8000H_TO_OFFFFH MASK       EQU
             <0004>    762 HI_AUXILLIARYSLOT  8000H_OFFFFH        EQU     01008
             <0008>    763 HI_EXPANSION8000H_TO_OFFFFH MASK       EQU     10008
                       764 HI_COLECOVISIONCARTRIOGE SLOT          EQU     11008
                       765
                    767
   FC17             768 SWITCHTABLE:
                    769
   FC17             770 MEM_CNFGOO
   FC17 00          771              DEFB   HI_INTRINSIC_8OO0H_TO_OFFFFH_MASK.OBOOTROM NALPHA MASK
                    772
   FC18             773 MEM_CNFGO1
   FC18 Of          774              DEFB   HI_INTRINSIC_8000H_'O_OFFMASK.OR.LOINTRINSIRAM O TO_7FFFMASK
                    775
   FC19             776 MEM_CNFGO2
   FC19 02          777              DEFB § HI_INTRINSIC_8O00H_TO_OFFMASK.OR.LOEXPANSION©TO 7FFFHMASK
                    778
   FCIA             779 MEM_CNFGO3
   FCIA 03          780              DEFB   §HI_INTRINSIC_8000H_TO_OFFFFH_MASK.OR.LO_OS7_N_IN20007FFFHMASK
                    781
   FC1B             782 MEMCNFGO4
   FC1IB04          783              DEFB  HI _AUXILLIARSLOT8000H_OFFFFH.OR.LBOOT ROM_NALPHAMASK
                    784
   FCIC             785 MEMCNFGOS
   FCIC OS          786              DEFB §HI_AUXILLIARYSLOT_8000H_OFFFFH.OR.INTRINSICRAM_OTO_7FFFMASK
                    787
   FC1D             788 MEMCNFGO6
   FC1D 06          789              DEFB $HI_AUXILLIARYSLOT_8000H_OFFFFH.OR.EXPANSIONOTO _7FFFMASK
                    790
   FCIE             791 MEM_CNFGO7
   FCIE 07          792              DEFB  $HI_AUXILLIARY_SLOT_8000H_OFFFFH.OR.LO_OS7_N_INTRINSIC_200MASKFFFH_
                    793                                             :
   FCIF             794 MEM_CNFGO8
   FCIF 08          795              DEFB § HI_EXPANSION_8000H_TO_OFFMASK.OR.LBOOT ROM NALPHAMASK
                    796
   FC20             797 MEM_CNFGOS
   FC20 09          798              DEFB § HI_EXPANSION_8000H_TO_OFFMASK.OR.LOINTRINSI_RAMOTO_7FFFHMASK
                    799                      .
   FC21             800 MEM_CNFGOA
   FC21 OA          801              DEFB § HI_EXPANSIO_8000H_TO_OFFFMASK.OR.LEXPANSIONO TO_7FFFMASK
                    802
   FC22             803 MEM_CNFGOB
   FC22 OB          804              DEFB = HI_EXPANSION_8000H_TO_OFFFFH_MASK.OR.LO_OS7_N_IN2000H_7FFFMASK
                    805
   FC23             806 MEM_CNFGOC
   FC23 OC          807              DEFB   HI_COLECOVISIOCARTRIDGSLOT.OR.LOBOOT_ROMN ALPHAMASK
                    808
   FC24             809 MEM_CNFGOD
   FC24 OD          B10              DEFB §HI_COLECOVISIONCARTRIDG_SLOT.OR.LO_INTRINSRAMO TO_7FFFMASK
                    811
   FC25             812 MEM_CNFGOE
   FC25 OE          813              DEFB $HI_COLECOVISIONCARTRIDGSLOT.OR.LEXPANSION OTO_7FFFHMASK
                    814
   FC26             815 MEM_CNFGOF
   FC26 OF          816              DEFB   HI_COLECOVISIOCARTRIDGSLOT.OR.LO_OS7_INTRINSIC2000H_7FFFMASK
                                         819
                                         820    ;
                                         821    ;  NOTE:       these      are    defined       global       in    E0S_COMN
                                         822    ;
                                         823    ;                                       ;GLB            PORT    TABLE                             ;port      value      memory       locations
                                         824    ;                                       ;GLB           MEM    SWITCH       PORT
                                         825    ;                                       ;GLB           NET    RESET      PORT
                                         826    ;                                       :GLB            VOP_CTRL_       PORT
                                         827    ;                                       ;GLB            VOP_DATA_PORT
                                         828    ;                                       ;GLB            CONTROLLER         _O PORT
                                         829    ;                                       :GLB            CONTROLLER         1  PORT
                                         830    ;                                       ;GLB            STROBE      _SET   PORT
                                         831    ;                                       ;GLB            STROBE      RESET     PORT
                                         832    ;                                       ;GLB            SOUNODPORT
                                         833    ;                                                                                         -
                                       ‘6234                 SHHSSSSHSSHESEHKEHSHESHREKREKSHEHHESE                 KRESS     SSHKEEE   REESE    ES
                                         835                 *¢*¢    VDP    ports     must     remain      next       to   each    other       *+*-+
                                         836                 eos        and     in   CTRL     ->   DATA    order                               eee
                                         837                 SHRSESCHSHSHHHEHEHEHEEREHHSHKE             HEHEHE                     EERE   HEEHREES
                                         838
       FC27                              839    PORT   TABLE:
                                         840
       FC27                              841    MEM  SWITCH        PORT
       FC27     TF                       842                                              DEFB          O7FH                                      ;MEM_    SWITCH     PORT                      defined       here
                                         843
       FC28                              644    NET  RESET       PORT
       FC28     3F                       845                                              OEFB          O3FH                                      ;Adam_net         reset      port             def   ined    here
                                         846
       FC29                              847    VOP_CTRL_PORT
       FC29    BF                        848                                              DEFB         OBFH                                       ;VDP     ctrl     port                        01D43H
                                         849
       FC2A                              850    VDP_DATA_PORT
       FC2A     BE                       851                                              DEFB         OBEH                                       ;VOP     data    port                         01D47H
                                         852
       FC2B8                             853    CONTROLLER         O   PO
       FC2B     FC                       854                                              DEFB         OF  CH                                     ;Controller          O                        0114BH
                                         855
       FC2C                              856    CONTROLLER         1   PO
       FC2C     FF                       857                                              DEFB         OF  FH                                     ;Controller           1                       O1151H
                                         858
       FC2D                              859    STROBE     SET     PORT
       FC20     80                       860                                              DEFB         O80H                                       ;Controller          strobe        set       Q01157H
                                         861
       FC2E                              862    STROBE_RESET           PO
       FC2E     CO                       863                                              DEFB         OCOH                                       -Controller          strobe        reset      01168H
                                         864
       FC2F                              865    SOUNODPORT
       FC2F     FF                       866                                              OEFB         OF  FH                                     ;Sound      port                             OO   18EH
                                         867    ;
                                         868    [SS  SPR   ESS   SSSA    AREST   SSO   SSEAERERTRNC         Ber   stzssrsssezeeesssassesstesrssseesece
                                         B69     sewer   eee   et  ewer  eee     HS  ESTRAETETERCEST          Rs  essere     eszesxesesnsezsstessesszz2=2
                                         870      SRBsBssewasestesesseseeesreeseseseasaseeeetesese      eee   sserrrsezesas2ezrzseee@esesezeenz3resazezrrrsrrresez2se2
                                         871
                        S874;
                        875 ; globals routinesdef   tned
                        876 ;
                        877               ;GLB      __WRITEVRAM                 ;VDP support routines
                        878               ;GLB      __READ_VRAM
                        879               :GLB      __WRITEREGISTER
                        880               ;GLB      __READ_REGISTER
                        881               ;GLB      __FILL_VRAM
                        682               ;GLB      __INIT_TABLE
                        883               ;GLB      __PUT_VRAM
                        864               ;GiB      __GET_VRAM
                        685               ;GL8B     __CALC_OFFSET
                        886               ;GLB      __PX_TO_PTRN_POS
                        887               ;GLB      __LOAD_ASCTII
                        888               ;GLB      __PuT_ASCII
                        689               ;GLB      __WR_SPR_ATTRIBUTE
                        890
                        891               ;GLB      __DECODER
                        892               ;GLB      __POLLER                    ;controller support routines
                        893               ;GLB      __UPDATE_SPINNER
                        894
                        895               ;GLB      __DECLSN                    ;s:und chip support routines
                        896               ;GLB      __DECMSN
                        897               ;GLB      __MSNTOLSN
                        898               ;GLB      __ADD816
                        899               ;GLB      ___SOUND_INIT
                        900               ;GLB      __TURN_OFF_SOUND
                        901               ;GLB      __PLAY_IT
                        902               ;GLB      ___SOUNODS
                        903               ;GLB      __EFFECT_OVER
                        904
                        905               ;GLB      __SWITCH_MEM                ;memory bank switch support  routine
                        906               ;GLB      __PORTCOLLECTION            ;STORE THE PORT ADDRESSES  FROMOS  7
                        908 ;
                        909 ; external data areas   used
                        910 ;
                        911               ;EXT       VDP_MODEWORD
                        912               ;EXT       VDP_STATUSBYTE
                        913               ;EXT       VRAM_ADDR [FABLE
                        914               ;EXT       SPRITEATTRIBL
                        915 ;eee          ;EXT       SPRITEGENTBL
                        916 ;eee          ;EXT       PATTRNNAMETBL
                        917                EXT       PATTRNGENTBL
                        918 ,eee          ;EXT       COLORTABLE
                        919               ;EXT       CUR_BANK
                        920
                        921                                                       ; controller  data  area
                        922               sEXT       SPIN _SWO_CT                 ;THESE TWO BYTES   MUST  BE IN THIS ORDER!!!
                        923 ;ee@e         sEXT       SPIN SwfCT
                        924               sEXT       PERSONALDEBOUNCE   TABLE
                        925               sEXT       TEMP STACK                    ;Used by put_ascii    when bank switching
                        926                                                       ; sound data  areas
                        927               sEXT       PTR_TO_LST OF _SNO_ADDRS
                        928               ,EXT |     PTR _TS  ON O
                        929               sEXT       PTR_TOS ON _1
                        930               ,EXT       PTR_TO_SON  2
                        931               ;EXT       PTR_TO_SON_3
                        932               ;EXT       SAVE_CTRL
                        933 ;
                        934 ;    Port address and  bank  select  externals    follow
                        935 ;
                        936               ;EXT       PORTTABLE
                        937               ;EXT       MEMSWITCH  PORT
                        938 ;eee          ,EXT       NETRESET PORT
                        939               sEXT       VDP_CTRL_PORT
                        940 ;eee          sEXT       VDP_DATA_PORT
                        941               ;EXT       CONTROLLER O PORT
                        942 ;ee@e         sEXT       CONTROLLER1  PORT
                        943               ;EXT       STROBESET  PORT
                        944 -ee           ;EXT       STROBERESET  PORT
                        945               ;EXT       SOUNDPORT
                        946
                        947 ;eee          ;EXT       SWITCHTABLE
                        948               ;EXT       MEMCNFGOO
                        949 ;ee@          ;EXT       MEMCNFGO1
                        950 ;eee          ;EXT       MEMCNFGO2
                        951               sEXT       MEMCNFGO3
                        952 ;eee          ;EXT       MEMCNFGO4
                        953 ;eee          sEXT       MEMCNFGOS
                        954 ;eee          ;EXT       MEMCNFGO6
                        955 ;,eee         sEXT       MEMCNFGO7
                        956 ;eee          ;EXT       MEMCNFGOS8
                        957 ;eee          -EXT       MEMCNFGOS
                        958 ;eee          -EXT       MEMCNFGOA
                        959 :ee¢@         SEXT       MEMCNF GOB
                        960 ;ee@          -EXT       MEMCNFGOC
                        961 ;ee@          -EXT       MEMCNF GOD
                        962 ;ece@         -EXT      MEM CNFGOE
                        S63 ,ee¢          ;EXT       MEMCNFGOF
                       965 ;
                       966 ; externals used
                       967 ;
                       968               ;EXT      WRITEREGISTER
                       969 ;See          ;EXT      INIT_TABLE
                       970               ;EXT      SWITCHMEM
                       971  She          sEXT      PUT_VRAM
                       972               sEXT      WRITE_VRAM
                       973                EXT      READ_VRAM
                       974 ;
                       975 ; local equates
                       976 ;
             <0102>    977 LOC_IN_ALPHA   QU      0102H                       ;potnter  to  ascii  gens in rev  28+  alpha
                       978
                       981 ; Offsets  into a volume   descriptor  (the first entry in the directory).
             <0000>    982 VOLNAME          EQU       O         ;LOGICALVOLUME NAME
             <OO0C>    983 VOLDIRSIZE       EQU       12        ;*ee7 BITS ONLY *** # BLOCKS IN DIRECTORY
             <QO0O>C   9684VOL_ATTR         EQU       12        ;**eTOP BIT ONLY ¢**+SET FOR DELETE  PROTECTION
             <0000>    985 VOL_DIR_CHECK    EQU       13        ;CONTAINS 4 UNIQUE BYTES FOR DIRECTORY   EXISTENCE   VERIFICATION
             <O011>    986 vOLSIZE          EQU       17        ;VOLUMESIZE (IN BLOCKS) (4 BYTES)
             <0017>    987 VOL_YEAR         EQU       23        :;CREATIODATE -- YEAR
             <0018>    988 VOL_MONTH        EQU       24        :                MONTH
             <0019>    989 VOLDAY           EQU       25        ;                & DAY
             <OO1A>    99C VOL_DESLENGTH    EQU       26
                       991
                       992 ; Offsets  into a directory   entry.
             <0000>    993 DIR_NAME         EQU       O        ;FILE NAME
             <OO0C>    994 DIR_ATTR         EQU       12       ;FILE ATTRIBUTE BYTE
             <0000>    995 DIR_START_BLOCK  EQU       13       ;STARTING BLOCK4
             <0011>    996 DIRMAX_LENGTH    EQU       17       ;TOTAL #4BLOCKS ALLOCATED
             <0013>    997 DIR_USEDLENGTH   EQU       19        ;#OF BLOCKS USED (FULL + 1 PARTIAL)
             <001£)>   998 DIR_LASTCOUNT    EQU       21       ;NUMBER OF BYTES IN LAST PARTIAL BLOCK
             <0017>    999 DIR_VEAR         EQU       23       ;CREATION DATE -- YEAR
             <0018>   1000 DIR_MONTH        EQU       24        ;                MONTH
             <O0O19>  1001 DIR_DAY          EQU       25        ;                & DAY
             <OO1A>   1002 DIR_ENT_LENGTH   DEFL      26
                      1003
             <O027>   1004 ENT_PER_BLOCK    EQU       1024/26   ;NUMBEROF ENTRIES PER DIR BLOCK
                      1005
                      1006 ; Offsets  into an FCB  header.
                      1007
                      1008 ; Copy of  DIR entry
                      1009
             <O00O>   1010 FCB_NAME         EQU       O        ;FILE NAME
             <OOOC>   1011 FCB_ATTR         EQU       12       ;FILE ATTRIBUTE BYTE
             <OOOD>   1012 FCB_START BLOCK  EQU       13       ;STARTING BLOCK ¥#
             <O00D>   1013 FCB_FIRSTBLOCK   EQU       FCBSTART  BLOCK
             <OO11>   1014 FCBMAX_LENGTH    EQU       17       ;TOTAL # BLOCKS ALLOCATED
             <OO13>   1015 FCB USEDLENGTH   EQU       19       ;# OF BLOCKS USED (FULL + 1 PARTIAL)
             <OO15>   1016 FCB_LAST COUNT   EQU       21       ;NUMBER OF BYTES IN LAST PARTIAL BLOCK
                      1017
             <OO16>   1018 FCB STORED BYTES  EQU      FCB_LAST COUNT+1  ; NUMBER OF BYTES STORED  ON DEVICE
                      1019                                             ; ... THE UPPER HALF OF THIS  FCB  EQU  LIST
                      1020
             <OO17>   1021 FCB_DEVICE       EQU       26-3             ;NUMBER OF DEVICE CONTAINING  FILE
             <OO18>   1022 FCB_MODE         EQU       27-3             ;FILE MODE (UNUSED, READ,  WRITE,APPEND)
             <O019>   1023 FCBBLOCK         EQU       28-3             ;>BLOCKNUMBER CURRENTLY IN  BUFFER
             <OO01D>  1024 FCB_LAST_BLOCK   €&QU      32-3             ;LAST BLOCK NUMBER IN FILE
             <0021>   1025 FCBPOINTER       EQU       36-3             ;-POINTERINTO BLOCK BUFFER
             <0023>   1026 FCB_LENGTH       EQU       38-3
                      1027
                      1028 ; Possible  FCB modes.
                      1029 *
                      1030 * PROTECTED  MODE EQUATES
                      1031 *
             <O000>   1032 MODEUNUSED       EQU       O        ;MANY PEOPLE ASSUME THIS IS ZERO!
             <OO0O1>  1033 MODEREAD         EQU       MODEUNUSED+  1
             <0002>   1034 MODEWRITE        EQU       MODEREAD+1
             <0003>   1035 MODEUPDATE       EQU       MODEWRITE+1
             <O004>   {1036MODEEXEC         EQU       MODEUPDATE +1
             <0004>   1037 MODEMAX          EQU       MODEEXEC+0O
                      1038 *
             <0005>   1039 MODEREMAINDER BIT  EQU  5         ; INDICATES TO ALLOCATE REST  OF  TAPE
             <O006>   1040 MODEDIRTY  BIT  EQU     6         ; TEST BIT 6
             <O040>   1041 MODEDIRTY       EQU     010000008 .INOICATES MODIFIED BUFFER
             <O007>   1042 MODELAST  BLOCKBIT   EQU  7       ; TEST BIT 7
             <OO80>   1043 MODELAST        EQU     100000008 ;INDICATES LAST BLOCK OF FILE
             <OOO7>   1044 MODEMODE        EQU     000001118 ;BITS TO STORE MODES
                      1045
                      1046 ; File attribute bits.
             <OO80>   1047 ATTR_PERMANENT  €£QU    100000008
             <O040>   1048 ATTR_WRITEPROT  EQU     010000008
             <0020>   1049 ATTR_READPROT   EQU     001000008
             <0010>   1050 ATTR_USER       EQU     000100008
             <OO0O08> 1051 ATTR_SYSTEM     EQU     000010008
             <O004>   1052 ATTR_DELETED .  EQU     000001008
             <0002>   1053 ATTRDEL BIT     EQU     2
             <OOO02>  1054 ATTREXECUTE     EQU     000000108
             <O000>   1055 ATTR HOLEBIT   EQU      O
             <OOO01>  1056 ATTRHOLE        EQU     00000001B
                      1057
                      1058 ; System-wide file name length.
             <OOOC>   1059 NAMELENGTH      EQU     12
                      1060
                      1061 ; Numbers of things we nave.
             <O003>   {1062NUM_FCBS        EQU     3       ;1 FOR THE SYSTEM, 2 FOR THE USER
             <O001>   1065  DCB_NOT_FOUND              EQU       1          ;  THERE WAS NO DCB FOR  THE  DEVICE  REQUESTED.
             <0002>   1066  DCB_BUSY                   EQU       2          ;  OCB IS BUSY
             <0003>   1067  OCB_IDLE_ERR               EQU       3          ;  OCB IS IOLE
                      1068
             <0004>   1069  NO_DATE_ERR                EQuU      4
             <0005>   1070  NO_FILE_ERR                EQu       5
             <O006>   1071  FILE_EXISTS_ERR            EQU       6
             <0007>   1072  NO_FCB_ERR                 EQU       7
             <O008>   1073  MATCH_ERR                  EQu       8
             <0009>   1074  BAD_FNUM_ERR               EQu       9
             <OOOA>   1075  EOF_ERR                    EQu       10
             <0008>   1076  TOOBIG_ERR                 EQU       11
             <OOOC>   1077  FULL_DIR_ERR               EQu       12
             <O00D>   1078  FULL_TAPE_ERR              EQu       13
             <OOOE>   1079  FILE_NM_ERR                EQU       14                   ;0LS(8/28/83)
             <OOOF>   1080  RENAME_ERR                 EQU       15                   ;DLS(8/30/83)
             <OO10>   1081  DELETE_ERR                 EQu       16                   ;DLS(8/30/83)
             <OO11>   1082  RANGE_ERR                  EQu       17                   ;DLS(8/31/83)
                      1083
             <0012>   1084  CANT_SYNC1                 EQu       18
             <0013>   1085  CANT_SYNC2                 EQu       19
             <0014>   1086  PRT_ERR                    EQU       20
                      1087
             <0015>   1088  RQTP_STAT_ERR              EQu       21
             <O016>   1089  DEVICE_DEPD_ERR            EQU       22       .
             <0017>   1090  PROG_NON_EXIST             EQU       23               ; PROGRAM DOES NOT  CURRENTLY   EXIST
             <OO18>   1091  NO_DIR_ERR                 EQU       24               ; NO DIRECTORY ON  TAPE
                       1094  THESE  OUR  EQUATES   THAT  ARE  USED  BY  THE  EOS  PROGRAMS   TO REFEFERNCE
                       1095  ;PCB AND  DCB INFORMATION
                       1096
                       1097
                       1098  ;PCB EQUATES
                      1099
             <O0000>  1100  P_COM STAT                 EQu       O          ; THIS  IS  THE COMMAND/STATUS     BYTE
                      1101
             <Q0001> .1102  P_REL_ADOR                 EQU        1         ; THIS  IS  THE RELOCATION    ADDRESS
             <O0O1>   1103  P_REL_AODR_LO              EQU       P_REL_ADDR+O
             <0002>   1104  P_REL_ADOR_ HI             EQU       P_REL_ADOR+1
                      1105
             <0003>   1106  P_NUM_DCBS                 EQU       3          ; THIS  IS  THE NUMBER   OF  DCBS  DEFINED
                      1107
                      1108
             <0004>   1109  P_SIZE                     DEFL      4          ; THE NUMBER   OF  BYTES  IN  THE  PCB
                      1110
                      1111
                      1112
                      1113   ;O0CEQUATES
                      1114
             <O00O>   1115  D_COMSTAT                 EQU       Oo        ; THE  COMMANO   STATUS  BYTE
                      1116
             <O0001>  1117  D_BUF_ADR                 EQU       {         ; ADDRESS   OF  THE DATA   BUFFER
             <O001>   1118  D0BUF _ADR_LO             EQU       DBUF   ADR+0
             <0002>   1119  0BUF  ADR  HI             EQU       D BUF _AODR+1
                      1120
             <0003>   1121  D_BUF_LEN                 EQU       3         ; THE  LENGTH   OF THE  DATA  BUFFER
             <0003>   1122  DBUF LEN_LO               EQU       OBUF_LENtO
             <0004>   1123  D_BUF_LEN HI              EQU       DBUF  _LEN+1
                      1124
             <O0OS>   1125  D_SECT_NUM                EQU       5         ; THE  BLOCK  DEVICE   SECTOR   NUMBER
                      1126
             <0009>   1127  D_SEC_DEV_ID              EQU       9         ; SECONDARY   DEVICE   ID
                      1128
             <OOOE>   1129  D_RET_COUNT               EQu       14        ; THE  NUMBER   OF TIMES  A  COMMAND   WILL
                      1130                                                 : BE  RETRIED.
             <OOOE>   1131  D_RET_COUNT LO            EQU       D_RET COUNT+0
             <OOOF>   1132  D_RETCOUNT   HI           EQU       D_RET_COUNT+1
                      1133
             <0010>   1134  D_DEV_ADDR                EQU       16        ; THE  DEVICE   ADDRESS  (1D)
                      1135
             <OO11>   1136  D_MAX_MSG LEN             EQU       17        ; THE  MAX  LENGTH  OF  A DATA   STRING
                      1137                                                ; FOR  THE  DEVICE
             <O0011>  1138  D_MAX_MSG LN  _LO         EQU       DMAX  MSG  LEN+tO
             <0012>   1139  D_MAXMSG  _LN HI          EQU       DMAX  MSG  LEN+1
                      1140
             <OO13>   1141  0DEV TYPE                 EQU       19        ; THE  DEVICE   TYPE,  BLOCKED   OR CHARACTER
                      1142
             <O014>   1143  DSTATUS  FLAGS            EQU       20        ; DEVICE  DEPENDENT    STATUS  FLAGS
                      1144
             <O015>   1145  DSIZE                    DEFL       21        ; THE  NUMBER  OF  BYTES  IN  THE  DCB
                      1146
                      1147
                      1148
                      1149  ;DEVICE  ID‘S  FOR  THE KEYBOARD,    PRINTER,   AND  TAPE  DRIVE
                      1150
              <O001!>  1151 KEYBOARD_ID                 EQuU     {        :KYBD   ID
              <0002>   1152 PRINTER ID                  EQU      2        -PRINTER  ID
              <0008>   1153 TAPE_ID                     EQU      8        ;TAPE DRIVE  ID
                       1154
              <0002>   1155 ERRORRETRY                  EQU      2        ;MAX RETRYS ON  ERRORS,   READ BLOCK  AND  WRITEBLOCK
                       1156
              <OOOF>   1157 MAX_DEV_ADDR                EQu      15       -HIGEST POSSIBLE  DEVICE   ADDRESS
                       1158                                               ; ON NETWORK
                       1159
                       1160
                       1161 :PCB COMMAND   EQUATES
                       1162
                       1163
              <OOO0O>  1164 PCB_IDLE                    EQU      oO       ;THIS  ISAN  IDLE STATE
                       1165
              <O001>   1166 PCB_SYNC1                   EQu      {        ;SYNC BYTE  1
              <O081>   1167 PCB_SYNC1_ACK               EQU      PCB_SYNC1+80H
                       1168
              <0002>   1169 PCB_SYNC2                   EQU      2        ;SYNC BYTE 2
              <O082>   1170 PCB_SYNC2_ACK               EQU      PCB_SYNC2+80H
                       1171
              <0003>   1172 PCB_SNA                     EQU      3       ; SET NEW PCB ADDRESS
              <0083>   1173 PCB_SNA_ACK                 EQu      PCB_SNA+80H
                       1174
              <O004>   1175 PCB_RESET                   EQU      4       ; RESET ALL NODES
              <O0084>  1176 PCB_RESET_ACK               EQU      PCB_RESET+80H
                       1177
              <O005>   1178 PCBWAIT                     EQU      5       :
              <0085>   1179 PCB_WAIT_ACK                EQU      PCB_WAIT+80H
                       1180
                       1181
                       1182
                       1183 ;0CB COMMAND   EQUATES
                       1184
              <O00O>   1185 DCB_IOLE                    EQU     00       :
              <O001>   1186 DCBSTATUS                   EQU     O1       ; REQUEST STATUS
              <0002>   1187 DCB_RESET                   EQU     02       ; RESET NODE
              <0003>   1188 DCB_WR                      EQU     03       ; WRITE DATA TO DEVICE
              <0004>   1189 DCBRD                       EQU     04       ; READ DATA FROM DEVICE
                       1190
                       1191
                       1192
              <FECO>   1193 INIT_PCB_ADDR               EQU     OFECOH   : INITIAL ADDRESS  OF  THE PCB
                       1194
              <D390>   1195 FCB_S                       EQU     OD390H   ; FCB HEADER AREA
              <D400>   1196 THREE1KBLKS                 EQU     OD400H   ; 3K FCB DATA AREA
                       1197
                       1198
                       1199 ;GENERAL  USAGE  EQUATES    FOR USE WITH  DCB INFO
                       1200
              <O007>   1201 CMND_COMPLETE  BIT          EQU     7        - THIS IS THE BIT  THAT  INDICATES   THE
                       1202                                              ; COMMAND HAS BEEN  PROCESSED.
              <O080>   1203 CMNDFIN  STATUS             EQU     80H      ; THIS IS THE STATUS  OF  A COMMAND
                       1204                                              ; THAT COMPLETED WITH  NO  ERRORS
              <OO8C>   1205 KBD_NAK                     EQU     BCH      ; INDICATES NO KEY  READY
                       1206
              <GO86>   1207 PR_NAK                      EQU     86H      - INDICATES THE PRINTER   IS BUSY
                      1208
             <Q0O0O03>1209 ETX                    EQU     03H     ; END OF DATA STRING INOICATOR
                      1210
             <OO9B>   1211 TIMEOUT                EQU     9BH     ; DEVICE TIMED OUT
                      1212 ;
                      1213 ,PSSSRSSTSSSSTETSSTTTSRTSSRSTITSSSTERSSOREARSTEKS SsESesserzsrst=s=
                      1214 ,PSSSTSSSSSBSSESSSSSSSSBSESTSSFSSFSSSSSTSSSSSTSESASESSETSSSTSEsrzrere
                      1215 “SSSSESERBRESESESSSSSSSseseserestsrerrsr=sesezsz2eserrerczresrrerzezcoersrses2erezrror=z=2
                      1216 ;
    FC30              1217 SKIP
                       1219   NAME “Rev O7 - jki*
                       1220
                       1221  DeA_uOS  OO MACRO               ;Header Rev. 5
                       1222                  .GOTO EdeA_uOS  00
                       1223
                       1224   Project:      ADAM, 83-101
                       1225
                       12326      SRSSHKSHAAKSHSESAEARSSAERSESEESH   EKHEKESHRSHEHEKERERE EEES
                       1227       sees                                                    eeee
                       1228       eeee             A_uO000              RPD               seee
                       12293      eee                                                     ess
                       1230       SSHSHAKHSESHSARHESS ERHSEEHE EHTS             EEREREKERETESS
                       1231
                       1232
                       1233         Rev History
                       1234         Rev.  Date         Name       Change
                       1235          7    O8oct1545    jk         make  LOAD ASCII  load chars from  O to 7F
                       1236          6    O8oct0003    rfj        Fixed 100H bug with Bob Greenberg's
                       1237                                        algorithm
                       1238          5    O7oct1708    rfj        __EFXOVER changed to _ EFFECT_OVER
                       1239          4    OSoct10:40   rfj        Decoder now saves Acc before getting
                       1240                                        interrupt data
                       1241                                        Removed excess documentation on Put/Load   Ascii
                       1242                                        Commented out all unreferenced symbols  with  ;eee
                       1243                                        Renamed WRSPR_NM_TBL  to WR_SPR_ATTRIBUTE
                       1244                                        globalized  UPDATE SPINNER
                       1245                                        new address fcr the ASCII table  referenced
                       1246          3    28septi3i7   rfj        Multy changes after personal review
                       1247                                        but not approved
                       1248          2    25sept900a   RPD        made ram externa!
                       1249          1    24septi250p  RPO        addition of more routines & new port  accessing
                       1250          O    24aug430p    RPO        Initial creation date (READ & WRITE  VRAM)
                       12514
                       1252   A_u0SOO  stands for ADAM micro  Operating System version O. This file
                       1253   contains a scaled down mode! of  COLECOVISION OS 7. Primary routines from
                       1254   OS 7 are duplicated for ADAM application  programs use. The functional  areas
                       1255   that are supported by these routines  are the VDP, the controllers, the  sound
                       1256   chip, memory bank switch, port  collection.
                       1257
                       1258  EdeA_u0S OO   MEND
                                1260
                                1261   SSESSSSSSeSSe  soe eseseSeseeeee  seeseseee ee eee eee seeseeeoee eee  eeaseee
                                1262
                                1263                        ORG    EOS CODE
                                1264
                                12GH   SSSSHSSHSSHHS   SESHSSHHEHEHSH ESE  ESE  SEHEHEHESEEEE  HEHEHE    SRESEESESE  EEE
                                1266
                                1267   ;   Name:                WRITE  VRAM
                                1268   ;
                                1269   ;   Function:            Writes    to  VRAM   the   contents    of   the  data    ina   buffer    area.
                                1270   ;
                                1271   ;   Entry:               BC  -  number    of  bytes    to  be  written
                                1272   ;                        DE  -  starting     VRAM   address    to  be  written     to
                                1273   ;                        HL  -  address    of  buffer    containing      the   data
                                1274   ;
                                1275   ;   Exit:                None.
                                1276   ;
                                1277   ;   Registers    used:   AF,  BC,   DE,   HL
                                1278   ;
                                1279   ;   Size:                ROM  -  28  bytes
                                1280   ;                        RAM  -  O  bytes
                                1261   ;
                                1282   ;   Comments:            This   version    of  WRITE   _VRAM   is  provided     for  EOS   operation.
                                1283   ;                        NOTE:   The   100H   bug   found   in  OS  7  has   been   corrected.
                                1284   ;
                                1285   ;   Comparision:         left  out   pascal    entry    point
                                1286   ;                        code  compacted
                                1287   ;                        100H  bug   fixed
                                1288   ;                        edited   for   documentation
                                1289   ;                        reference     port   table
                                1290
     EOOO                       1291    WRITE    VRAM:
     EOOO    C5                 1292                      PUSH       BC                                ;BC   has   the  number    of  bytes    to  xfer
     EOO!    EB                 1293                      EX         DE ,HL                            ;>HL<--vram     addr  ,0E<--source     address
     EOO2    CDE1ES             1294                      CALL       SET WRITE                         :pump    the  vram   addr   to  the   vdp
     EOOS    69                 1295                |     LO         L.c                               ;save    C  (the  data  _port_addr    )
     EOO6    Ct                 1296        |             PoP        BC                                ;restore     the  xfer   count
     EOO7    EB                 1297                      EX         DE ,HL                            ;HiL<--source     address,port       in€
     EOO8    79                 1298                      LO         A.C                               ;Save    low  order   of  count     in A
     EOOS    48                 1299                      LD         C,.€                              ;  And  get   the   port   into   C
     EOOA    50                 1300                      LD         0.8                               ;Get   HI  order    count   in  DO
                                1301                                                                   ;  to  free   up  B  for   low  order    count
     EOOB    14                 1302                      INC        D                                 ;Increment      Hi  count   to  cover
                                1303                                                                   ;  for  O   in  DEC  D  after    low  loop
     EOOC    47                 1304                      LO         B.A                               ;Put   low   order   in  86 for   OUTI
     EOOD    87                 1305                      OR         A                                 ;Check    tf  low   order   is  zero   the    first   time
     EOOE    2806               1306                      JR         Z,O0UT  DEC_HI   BYTE             ;If   so  then   decrement     Hi  count   before     low  loop
     EO10                       1307   OUTPUT  LOOP:
     EO1O    EDA3               1308                      OUuTI                                        ;DATA  PORT     = buffer   data      write    the   data  to  the   VOP
                                1309                                                                   >for   OUTI:    [C]  <--   [HL],   B  =  B  -   1 and  HL  =  HL  +  1
     E012    OO                 1310                      NOP                                          ;Gelay    for   stow  VOP
     E013    OO                 1311                      NOP
     EO14    20FA               13142                     JR         NZ,OUTPUT    LOOP                 ;until    byte   count   low   (B  reg)   =  0
     EO16                       1313   OUT DEC   HI BYTE:
     EQ16    15                 1314                      DEC        D                                 ;>byte  count    high   = byte    count   high    -  1
     EO17    20F7               1315                      JR         NZ,OUTPUT    LOOP                 ;until    byte   count   high   (A  reg)   =   O
     E019    C9                 1316                      RET
                              1318   ;
                              1319   ;   Name:                   READ _VRAM
                              1320   ;
                              1321   ;   Function:               Reads   from  VRAM    and   puts    the  read   data    into  a  buffer    area.
                              1322   ;
                              1323   ;   Entry:                  BC  - number    of  bytes    to   be  read
                              1324   ;                           DE  - starting     VRAM   address      to be   read   from
                              1325   ;                           HL  - address    of   buffer     to  receive    the   read   data
                              1326   ;
                              1327   ;   Exit:                   None.
                              1328   ;
                              1329   ;   Registers      used:    AF,  BC,  DE,   HL
                              1330   ;
                              13931  ;   Size:                   ROM  - 22  bytes
                              1332   ;                           RAM  - O  bytes
                              1333   ;
                              1334   ;   Comments:               This  version    of   READ  VRAM     its provided     for  stand    alone   operation.
                              1335   ;                           NOTE:  The   {OOH   bug   found     tn OS   7 has   been   corrected.
                              1336   ;
                              1337   ;   Comparision:            left  out  pascal     entry   point
                              1338   ;                           code  compacted
                              1339   ;                           100H  bug  fixed
                              1340   ;                           edited   for  documentation
                             1341    ;
    EQIA                     1942
    EOIA    C5               1343                          PUSH       BC                                 ;BC  has   the  number    of  bytes    to  xfer
    EO1B    EB                1344                         EX         DE ,HL                             ;HL<--vram     addr  ,DE<--source      address  .
    EOIC    CDE1E7           1345                          CALL       SET READ                           ;pump   the  vram   addr    to  the   vdp
    EOIF    69               1346                          LD         L,C                                ;save   C  (the   data_port_  addr)
    EO20    Ct                1347                         POP        BC                                 ;restore    the   xfer  count
    EO21    EB                1348                         EX         DE ,HL                            ;HL<--source      address,port       ine
    EO22    79               1349                          LD         A.C                               :Save    low  order    of  count    inA
    EO23    48               1350                          LO         C,E                               ;  And   get  the   port   into   C
    EO24    50               1351                          LO         0.8                               ;Get   HI  order    count    in OD
                             1352                                                                       ;  to  free   up  B  for   tow   order   count
    EO25    14               1353                          INC        D                                  >Increment     Hi  count   to   cover
                             1354                                                                       ;  for   O  tn  DEC  D  after    tow   loop
    EO26    47               1355                          LO         B.A                               ;Put   low   order   in  86 for   OUTI
    EO27    B87              1356                          OR         A                                 ;Check    if  tow   order   is   zero   the  first     time
    EO28    2806             1357                          JR         Z,IN_DEC_HI_   BYTE               ;If   so  then   decrement     Hi  count    before     low   loop
    EOQ2A                    1358    INPUT  LOOP:
    EO2A    EDA2             1359                          INI                                          ;DATA_PORT      = buffer   data      read   the  data     from   to    the   VDP
                             1360                                                                       ;for   INI:   [C]}  <--  [HL],    B  =  B  -  1 amd    HL  =  HL   +   1
    EO2C    OO               1361                          NOP                                          ;delay    for   slow   VDP
    EO2D    OO               1362                          NOP
    EO2E    20FA             1363                          JR        NZ,  INPUT  _LOOP                  ;until    byte   count   low   (B  reg)    = O
    E030                     1364    IN _DEC_HI  BYTE:
    E030    15               1365                          DEC       D                                  ;byte   count    high   = byte    count    high   -   1
    EO31    20F7             1366                          JR        NZ,INPUT    LOOP                   suntil    byte   count   high    (A  reg)   =  O
    £033    C9               1367                          RET
                            1369   :
                            1370      Name:                 WRITE REGISTER
                            1371
                            1372      Function:             Writes  a data   byte   vaiue    to  a destred    VDP  registe:
                            1373
                            1374      Entry:                8 - register    number    to  write   to
                            1375                            C - data  byte   value    to  be  written
                            1376
                            1377      Exit:                 if register   number    =  0  or  ft, the  respective    byte
                            1378                            of the  VDP_MODE   WORD    is  updated.
                            1379
                            1380      Registers     used:   A,BC,E
                            1381
                            1362      Size:                ROM  - 27  bytes
                            1383                            RAM - O  bytes
                            1384
                            1385      _Comments:            This version    of  WRITE  REGITER      1s provided    for  stand    alone    operation.
                            1386
                            1387      Comparision:          left out  pascal    entry   point
                            1388                           code  compacted
                            1389                           edited   for  documentation
                            1390
     E034                   1391   __WRITE_REGISTER:
     E034   59              1992                      LD        E,C                               ;Move   data  to  E— register
     £035   3AFC29          1393                      LD        A,{VDOP_CTRL_  PORT]              -Get  the  control    port    value
     E038   4F              1394                      LD        C,A                               ;Put   in Cc
     E039   EDSS9           1395                      ouT       (C},E                             ;Output   data   value.
     E038   78              1396                      LO        A,B                               ;Get  port   #  INA
     EO3C   F680            1397                      OR        80H                               ;Set  high   bit  for   277772?
     EO3E   ED79            1398                      OUT       [C],A                             ;Out  to  VOP
     E040   768             1399                      LD        A.B                               ;Get  back   port  value
     E041   B7              1400                      OR        A                                 ;Check   for  zero
     E042   78              1401                      LD        A,E                               ;Put  data   in  accumulator
                            1402
     E043   2004            1403                      JR        NZ,CHK_REG   1                    :1f  not  zero   then   see   if  register     1
     E045   32FO061         1404                      LD        [VDP_MODE_WORD].A                 ;If  register    zero   was   written     to then
                            1405                                                                  ; Save   data   in VDP_MODE    WORD
     E048   c9              1406                      RET                                         sExit
                            1407
     E049                   1408   CHK_REG_1:
     E049                   1409                      DEC       B                                 ;Check   for  register     1  in  B
     EO4A                   1410                      RET       NZ                                -If  not  then   return
     E046                   1411                      LO        {VDOP_MODE  WORD+1],A             >If  so  then  store   data    in  VOP_MODE    WORD?!
     EO4E                   1412                      RET                                         -Exit
                            1413
                             1415
                             1416       Name :                READ   REGISTER
                             1417
                             1418       Function:             Reads     a data     byte   value   from    the   Colecovision       CTRL  PORT.
                             1419
                             1420       Entry:                None.
                             1421
                             1422       Exit:                 A  -  data     byte   value    read   in
                             1423
                             1424       Registers     used:   A,C
                             1425
                             1426       Size:                 ROM   -   3 bytes
                             1427                             RAM   -  O  bytes
                             1428
                             1429       Comments:             This   version       of  READ  REGISTER       is  provided     for   stand   alone     operation.
                             1430                             This   routine       does   a direct    access      to  the   COLECOVISION       I/0   ports.
                             1431
                             1432       Comparision:          edited     for   documentation
                             1433
    EO4F                     1434    READ   REGISTER:
    EO4F   3AFC29            1435                        LD         A,{VOP_CTRL_PORT}
    EO52   4F                1436                        LO         C,A
    £053   ED78              1437                        IN         A,{c]}                              :get    the   data   from   CTRL_PORT
    E055   32FD063           1438                        LO         {VOP_STATUS      BYTE],A            ;Save    a  copy    of  VDP   status    data
    EOo58  C9                1439                        RET
                             1440
                          1442  ;
                          1443  ;   Name:               FILLVRAM
                          1444  ;
                          1445  ;   Function:           Fill a VRAM  memory  buffer  with a constant  byte value.
                          1446  ;
                          1447  ;   Entry:              A - constant  byte  vaiue to  be written
                          1446  ;                       DE - number  of  bytes itnthe  VRAM memory  buffer
                          1449  ;                       HL - starting   VRAM address  to be written  to
                          1450  ;
                          1451  ;   Exit:               None.
                          1452  ;
                          1453  ;   Registers    used:  AF, C, DE
                          1454  ;
                          1455      Size:               ROM - 18 bytes
                          1456                          RAM - O bytes
                          1457                       -
                          1458      Comments:           This version  of  FILL_VRAM  is provided  for stand alone operation.
                          1459                          This routine  does  a direct  access to  the COLECOVISION I/O ports.
                          1460
                          1461      Comparision:        edited for  documentation
                          1462                          uneeded call   to READREGISTER   taken  out
                          1463
                          1464
    E053                  1465   FILL  VRAM:
    EO59   F5             1466                     PUSH     AF                         -Save the  data to fill with
    EOSA   CDEIES         1467                     CALL     SET_WRITE                  ;Sets the  ctrl port data and
    EOSD   E1             1468                     POP      HL                         ;popping  AF into HL to restore the  fill  data
    EOSE                  1469  FILL:     .                                            ;repeat
                          1470                                                         ;  get back  a copy of the saved constant
    EOSE   ED61           1471                     ouT      {[C],.H                    ;  write  the constant out to the VRAM  buffer
    EO6O   18             1472                     DEC      DE                         ;  byte  count = byte count - 1
    EOG1   7A             1473                     LD       A,O                        suntil byte  count = O
    E062   B83            1474                     OR       E
    EO63   20F9           1475                     JR       NZ,FILL
    EO65S  C9             1476                     RET                                 ;all done
                             1478   ;
                             1479   .
                             1480   ;   Name:                  INIT TABLE
                             1481 =;
                             1482   ;   Function:              INIT TABLE     initializes     the addresses     cf  the  VRAM    tabies.
                             1483   ;                          The passed    address    is  converted    to  tre   correct    format    needed
                             1484   ;                          to setup    the  VOP  address    registers.     ‘he  following     tabie    codes
                             $485   ;                          are use   to   itndentify  which   table    address    is being    setup:
                             1486   ;
                             1487   ;                            O  - SPRITE    ATTRIBUTE    TABLE    (SAT)
                             1488   ;                            1  - SPRITE    GENERATOR    TABLE    (SGT)
                             1489   ;                            2  - PATTERN    NAME   TABLE         (PNT)
                             1490   ;                            3  - PATTERN    GENERATOR    TABLE   (PGT)
                             1491   ;                            4  - PATTERN    COLOR   TABEL        (PCT)
                             1492   ;
                             1493   ;   Entry:                A  -  table   code   (see  above)
                             1494   ;                         HL  -  table   address
                             1495   ;
                             1496   ;   Exit:                 None.
                            1497    ;
                             1496   ;   Registers     used:   AF,  BC,   HL,  IX,   IY
                            1499    ;
                            1800    ;   Size:                 ROM  -  99  bytes
                            1501    ;                         RAM  -  O  bytes
                            #502    ;
                            1503    ;   Comments:             This   version    of  INIT_TABLE    is  provided    for   stand   alone    operation.
                            1504    ;
                            1505    ;   Comparision:           jleft out  pascal    entry   point
                            1506    ;                         code  compacted
                            1507    ;                         edited   for   documentation
                            1506    ;
    E066                    1SO9     INIT   _TABLE:
    EO67  0600              1912                        LO         8,0
    E068  0021FDE64         1513                        LD         IX,VRAM_ADDR_TABLE              ;point    to  start   of  VRAM_ADOR_TABLE
    EO6D  DODOS             1514                        ADD        IX, BC                          ;add   in  the   index
    EO6F  ODO0S             1515                        ADD        IX,BC
    E071  DD7500            1516                        LO         {IxX+0]}],L                     -save   the  address
    EO74  DD7401            1917                        LO         [IX+1],H
                            1518                                                                   ;CHECK   VDP   GRAPHICS    MODE
    EOQ77T3AFO61            1519                        LO         A,{VDP_MODE    WORD]            ;'f  VDOP_MODE  WORD    bit   t   mode   bit   3   =  1
    EQ7TA CB4F              1520                        BIT        1,8
    EO7C  2827              1521                        JR         Z,INIT_TABLE8O
                            1522                                                                   ;   ts   graphics     mode   2,  look   for   PGT  or  PCT   first
    EO7E  79                15293                       LO         A,C                             ;   get  the   table   code
    EO7F  FEO3              1524                        cP         3                               ;   if  table   code   =  PGT
    E081  2806              1525                        JR         Z,CASE  OF  GEN                 :      then  setup   PGT   address
    E083  FEO4              1526                        CP         4                               :      {f  table   code   = PCT
    EQ6S  2810              1§27                        JR         Z,CASE  OF  COLOR               :      then  setup   PCT   address
    EO87  181C              1528                        JR         INIT  TABLE8O                   :     else   not   a special     case,   use   normal   setup
                           1530  ;
                           1531  ; special    case:   graphics   mode   2,  address    of  PGT
                           1532  ;
    EO89                   1533  CASEOF  _GEN:
    E089  0604             1534                      LD       B.4                                -register   mumber  *  PGT   base  address    register
    EO8B  70               1535                      LD       A.L                                ;if  PGT  address  =  QOOOH                                                                      |
    EO8C  64               1536                      OR       H
    EO8D  2004             1537                      JR       NZ,CASE   OF  GENIO
    EO8F  OEO3             1538                      LD       C,3                                ;   data  byte  value  for   address   OOOOH
    EOS!  1828             1539                      JR       INIT  TABLESO
    EOS3                   1540  CASE_OF_GENIO:                                                  ;else    PGT address   <>  OOOOH
    E093  OEF07            1541                      LD       C,7                                ;   data  byte  value  for   address   2000H
    EO95  1824             1542                      JR       INIT _TABLES9O                     ;endif
                           1543  ;
                           1544  ; special    case:   graphics   mode   2,  address    of  PCT
                           1545  ;
    E097                   1546  CASEOF  COLOR:
    EOS7  0603             1547                      LD       8,3                                ;register   number  =  PCT   base  address    register
    —EOS9 7D               15486 .                   LD       AL                                  if  PCT  address  =  QOOQOH
    EOSA  64               1549                      OR       H
    EO9B  2004             1550                      JR       NZ,CASE   OF  CLR10
    EOSD  OET7F            1551                      LO       C,7FH                              ;   data  byte  value  for   address   OOOOH
    EOSF  161A             1552                      JR       INIT  _TABLE9O
    EOA1                   1553  CASE OF _CLRIO:                                                 ;else    PCT address   <>  OOOOH
    EOA1  OEFF             1554                      LD       C,OFFH                             ;   Gata  byte  value  for   address   2000H
    EOA3  1816             1555                      JR       INIT  TABLE9O                      ;endif
                           1556  ;
                           1557  ; not  a  special    case  (i.e.  not   mode   2,  PGT  or    PCT)
                           1558  ;
    EOAS                   1559  INIT _TABLESO:                                                  ;base   address  = table   address    /  factor
    EOAS  FD21EOB8F        1560                      LD       IY ,BASE  FACTORS                  ;potnt   to start  of  the   the  factor   table
    EOAS  FDOS             1561                      ADD      TY ,BC                             ;index   into the  table   by  the  table    code
    EOAB  FDOS             1562                      ADD      ly ,6C
    EOAD  FDO7EOO          1563                      LD       A,[1V¥+0]}                         ;get  the  shift  count
    EOBO  FD4601           1564                      LD       B,(1v+1)                           ;get  the  register   number
    EOB3                   1565  DIVIDE:
    E083  CB3C             1566                      SRL      H                                  :shift   hi-byte
    EOBS5 CB10             1567                      RR       L                                  :shift   lo-byte
    EOB7  3D               1568                      DEC      A                                  ;shift   count  = shift   count   -  1
    EOBS  20F9             1569                      JR       NZ DIVIDE
    EOBA  4D               1570                      LD       C,L                                :get  the  data  byte  value
    E088                   1571  INIT _TABLESO:
    EOBB  CDFD20           1572                      CALL     WRITE  REGISTER                    ;setup   the base  register
    EOBE  C9               1573                      RET
                      1575 ;
                      iS76 ; base factor  table, used  to calculate base  addresses
                      1577 ;
    EOBF              1576 BASEFACTORS:
    EOBF O7           1579                 DEFB    7                          ;table code O base factor
    EOCO O05          1580                 DEFB    5                          ;register 5, SAT base address
    EOC! O8           1581                 DEFB    11                         ;table code 1 base factor
    EOC2 O6           1582                 DEFB    6                          ;register 6, SGT base address
    EOC3 OA           1583                 DEFB    10                         ;table code 2 base factor
    EOQC402           1584                 DEFB    2                          ;register 2, PNT base address
    EOCS O86          1585                 DEFB    11                         ;table code 3 base factor
    EOC6 O04          1586                 DEFB    4                          :register 4, PGT base address
    EOC] O6           1587                 DEFB    6                          ;table code 4 base factor
    EOCB O3           1588                 DEFB    3                          ;register 3, PCT base address
                               1590 ;
                               1591 ;   Name:                PUT _VRAM
                               1592 ;
                               1593 ;   Function:            Gets  a block   of  data   from   a  user    buffer   and  puts    itt into  VRAM.
                               1594  ;                       The  following    table   codes   are   used    to identify     which   VRAM  table
                               1595 ;                         isbeing   referenced:
                               1596 ;
                               1597 ;                          O  - SPRITE   ATTRIBUTE     TABLE      (SAT)
                              1598  ;                           1 - SPRITE   GENERATOR     TABLE      (SGT)
                              1599  ;                          2  - PATTERN    NAME   TABLE          (PNT)
                              1600  ;                          3  - PATTERN    GENERATOR    TABLE    (PGT)
                              1601  ;                          4  - PATTERN    COLOR   TABLE         (PCT)
                              1602  ;
                              1603  ;   Entry:               A -  table  code   (see   above)
                              1604  ;                        DE -  starting    index   into   the   table
                              1605  ;                        Hi -  address   of  user   buffer
                              1606  ;                        IY -  block   size  (or   byte   count)
                              1607  ;
                              1608  ;   Exit:                None.
                              1609  ;
                              1610  ;   Registers    used:   AF, DE,  HL,   IY
                              1611  ;
                              1612  ;   Routines    used:    SETCOUNT
                              1613  ;
                              1614  ;   Size:                ROM -  O bytes
                              1615  ;                        RAM -  O bytes
                              1616  ;
                              1617  ;   Comments:            This  version   of  PUT  _VRAM   is  provided    for   stand    alone  operation.
                              1618  ;
                              1619  ;   Comparision:         left  out  pascal   entry   point
                              1620  ;                        took  out  the  mux   sprites    capablity
                              1621  ;                        code  compacted
                              1622  ;                        edited  for  documentation
                              1623  ;
    EOCS                      1624
    EOCS    CDEODS            1625                      CALL     SET COUNT                        ;setup    the  actual    byte   count   and  the  absolute VRAM  address
                              1626  *                   CALL     WRITE  VRAM                      ;VRAM    data  =  user   buffer
                              1627  +                   RET
    EOCC    C3FDIA            1628                      JP       WRITE  VRAM
                              1629
                      1631
                      1632  .  Name::            GET_VRAM
                      1633
                      1634     Function:         Gets a block of data  from VRAM and  stores it  intoa user buffer.
                      1635                       The following table  codes are used  to  itdentifwhich VRAM table
                      1636                       is being referenced:
                      1637
                      1638                         O - SPRITE ATTRIBUTE  TABLE  (SAT).
                      1639                         1 - SPRITE GENERATOR  TABLE  (SGT)
                      1640                         2 - PATTERN NAME TABLE       (PNT)
                      1641                         3 - PATTERN GENERATOR  TABLE (PGT)
                      1642                         4 - PATTERN COLOR  TABEL     (PCT)
                      1643
                      1644     Entry:            A - table code (see  above)
                      1645                       DE - starting index  into the table
                      1646                       HL - address of user  buffer
                      1647                       IY - block size (or byte  count)
                      1648
                      1649     Exit:             None.
                      1650
                      1651     Registers  used:  AF, DE, HL, IY
                      1652
                      1653     Routines  used:   SETCOUNT
                      1654
                      1655     Size:             ROM - O bytes
                      1656                       RAM - O bytes
                      1657
                      1658     Comments:         This version of GET VRAM  is provided  for stand alone operation.
                      1659
                      1660     Comparision:      left out pascal entry  point
                      1661                       code compacted
                      1662                       edited for documentation
                      1663
    EOCF              1664  _GET_VRAM:
    EOCF CDEODS       1665                   CALL    SETCOUNT                 ;setup  the actual byte count and the  absolute VRAM  address
                      1666                   CALL    READ_VRAM                ;user buffer  = VRAM data
                      1667                   RET
    EOD2 C3FDO1D      1668                   JP      READ_VRAM
                                   1670   ;
                                   1671     CALLED     BY   PUT_VRAM_     AND  GET  VRAM_
                                   1672
                                   1673   ' SETS     BYTE   COUNT    AND  INDEX   FOR   WRITES     TO  AND   READS   FROM   VRAM.
                                   1674
                                   1675   ;   TABLE                BYTES/ITEM
                                   1676   ;   SPRITE   NAME               4
                                   1677   ;   SPRITE   GEN                8
                                   1678   ;   PATTERN    NAME             1
                                   1679   ;   PATTERN    GEN              #
                                   1680   ;   COLOR    (MODE     1)       1
                                   1681   ;   COLOR    (MODE    2)        a
                                   1682   ;
      EOODS                        1683   SET COUNT
      EOOS    FDES                 1684                         PUSH       lY                                   -Save   count   on  stack
      E007    4F                   1685                         LD         C,A                                  ;Get  table   code    4
      EODS    FEO4                 1686                         cp         4                                    >See   if color    table
      EODA    2008                 1687                         JR         NZ.NOT   COLOR   TBL_ACCESS          -If  not   then  check    for  name    table
                                   1688                                                                        :;Color   Table
      EODC    3AFDG61              1689                         LO         A, (VOP_MODE    WORD]               ;Get   mode   word   to  check    graphics     type
      EOODF   E602                 1690                         AND        02H                                 ;Bit    1 indicates     mode   i  or  2
      EOE1    2814                 1691                         JR         Z,ADD_TO_  BASE                     ;If   mode   1  then  start    index    is  not   modif   ted
      EOE3    79                   1692                         LD         A.C                                 ;Get   table   code   back
                                   1693                                                                        ;Fall    through    to  multiply     by  8  for   mode   2.
      EOE4                         1694   NOT COLOR    TBL_ACCESS
      EOE4    FEO2                 1695                         cP         2                                   ;Check    for  Name    table
      EOE6    280F                 1696                         JR         Z,ADD  TO  BASE                     ;If   so  then   don’t   modify    start    index
                                   1697                                                                        ;At   this  point    the   table   code    is:
                                   1698                                                                           Sprite   attribute      table,    Sprite    gen   table,
                                   1699                                                                        ;  Pattern    gen   table,   or   Color   table     in  Mode   2
                                   1700
      EOES    EB                   1701                         EX         DE .HL                              -Get   count    in HL
      EOES    29                   1702                         ADD        HL ,HL                              3*2
                                 1703
      EOEA    29                   1704                         ADO        HL.HL                               +4
      EOEB    87                   1705                         OR         A                                   ;Check    for  Sprite    attr   table
      EOEC    2801                 1706                         JR         Z,HAVE_CNT                          ;If   so  then   Index*4    is  complete
      EOEE    29                   1707                         ADD        HL, HL                              ;If  not   then   Index*8     is  required
                                   1708                                                                        ;  this   is  for   the  pattern    gen   table,
                                   1709                                                                        ;  sprite   gen   table,    or  color    gen   table
                                   1710                                                                        ;  in  mode   2.
      EOEF                         1711   HAVE CNT:
      EOEF    ES                   1712                         EX         DE ,HL                              ;Put   updated    index    in  DE
      EOFO    E3                   1713                         EX         {SP),HL                             ;Get   count   off   stack
                                   1714                                                                        :-Put  address    of  RAM   buffer    on  stack
                                   1715
                                   1716                                                                        ;Now   modify    the  count    for:
                                   1717                                                                        ;  Sprite   attribute      table,   Sprite     gen   table,
                                   1718                                                                           Pattern    gen   table,   or   Color   table     in  Mode   2
      EOF1    29                   1719                         ADD        HL.HL
      EOF2    29                   1720                         ADD        HL.HL
      EOF3    2801                 1721                         UR         Z,HAVE_CNT2                         ;If  Sprite    attr   table    then   +4  {is  enoungh
                                   1722                                                                        ;  (the   zero   flag   is  still   set   from    earlier)
      EOFS    29                   1723                         ADD        Ht,HL                               ;Count    *8  for  remaining      tables
      EOF6                         1724   HAVE CNT2:
      EOF6    E3                   1725                         EX         {SP} ,HL                            ;Save   updated    count    on  stack
                                   1726                                                                        ‘Restore    RAM   buffer    off   stack
    EOF7                 1727 ADD_TOBASE:
    EOF7  79             1728                 LO       A,C                            ;Get table code back
    EOF8  O1FD64         1729                 LD       BC,VRAMADDR_ TABLE             ;Get top of address table
    EOFB  E5             1730                 PUSH     HL                             ;Save RAM buffer on stack
    EOFC  2600           1731                 LO       H,OOH                          ;Put table code tnto HL
    EOFE  6F             1732                 LO       L,A
    EOFF  29             1733                 ADD      HL,HL                          ;*2 to offset for addresses   in table
   E100   O9             1734                 ADD      Ht,BC                          ;Add to top of table
    E101  7E             1735                 LO       A,(HL)                         ;Low byte of VRAM table address
    €102  23             1736                 INC      HL
    E103  66             1737                 LD       H.(HL]                         ;High byte of VRAM table  address
    E104  6F             1738                 LO       L.A
    E105   19            1739                 AOD      HL,DE                          ;Add offset from start of  table
    E106  EB             1740                 EX       DE,HL                          ;Absolute VRAM address  in DE
    E107  E1             1741                 PoP      HL                             ;Restore RAM buffer address
    E108  C1             1742                 POP      BC                             ;Restore Count into BC
                         1743                                                         ;Registers are now ready  for
                         1744                                                         ; a call to the basic READ/WRITE   VRAM routines
    E109  C9             1745                 RET                                     ;Exit
                                1747   eeoecesesesesese      CALC  OFFSET    sere  eeeree eee  eee eee  ereee  eeee eeeeeeeeeeeeenesesretes
                                1748
                                1749   ;DESCRIPTION:         THIS  ROUTINE    CALCULATES     THE   PROPER    OFFSET     INTO  THE  NAME    TABLE
                                1750                         FOR  THE  PATTERN     POSITION    GIVEN   BY  X PAT   POS,    Y_PAT   POS.     THE
                                1751                         FORMULA   USED   IS:   OFFSET   =  32*Y  PAT  POS    +   XPAT   POS
                                1752
                                17593  ;INPUT:               D     _PAT_POS
                                1754                         E     _PaT_POS
                                1755   ;
                                1756   -OUTPUT  -            DE    OFFSET
                                1757
                                1758   RHSHSSEHASESHES  HEHEHE  ESAS       EHAH  EASE     EHH   EHH                                RE  KEERE EEE
                                1759   ;
     E10A                       1760   __CALC_OFFSET:
     E10A    E5                 1761                        PUSH     HL                                ;save   HL
     E 108   CB7A               1762                        BIT      7.D                               ;1f   Y_PAT  POS     is minus
     E 100   2804               1763                        JR       Z,ELSE_11
     E 10F   26FF               1764                        LD       H,OFFH                            ;   extend     negative    sign
     Eitt    1802               1765                        JR       END_IF_11
     E113                       1766   ELSE_11:                                                        ;else
     E113    2600               1767                        LD       H,O                               ;   extend     positive    sign
     E115                       1768   END_IF_11:                                                      ;endif
                                1769
     E115    6A                 1770                        LD       L.D                               ;OFFSET    =   32*Y PAT   POS    + X PAT   POS
     E116    29                 1771                        ADD      HL ,HL                            sHL=2*Y   PAT   POS
     E117    29                 1772                        ADD      HL HL                             ;     4+     .
     E118    29                 17793                       ADD      HL, HL                            >     Of     *
     E119    29                 1774                        ADD      HL ,HL                            ;   16       .
     E11A    29                 1775                        ADD      HL ,HL                             >; 32s      °
                                1776
     E116    C878               1777                        BIT      7,€                               > 1f  X_PAT_POS     is  minus
     E11D    2804               1778                        JR       Z,ELSE_12
     E1tF    1GFF               1779                        LD       D,OFFH                             >; extend    negative     sign
     E121    1802               1780                        JR       END_IF_12
     E123                       1781   ELSE  12:                                                       ;else
     E123    1600               1782                        LD       0,0                               ;   extend    positive     sign
     E125                       1783   ENO_IF_12:                                                       endif
                                1784
     E125    19                 1785                        ADD      HL ,DE                            ;HL=32¢Y   PAT    POS   +  XPAT_POS
     E126    EB                 1786                        EX       DE ,HL
     E127    Ef                 1787                        POP      HL                                ;restore    HL   intact
     E128    cg                 1788                        RET
                          179D  eeeeeeeeeeeeeeeeese     PX TO.PTRN.  POS  *e eeeeee eeeee eee eeeeereseeeeeeeeeeesene
                          1791  ;DESCRIPTION:        DIVIDES   REG DE BY  8B, IF SIGNED   RESULT   >  127  THEN   E  >=  MAX  SIGNED
                          1792  ;                   POSITIVE   NUMBER.  IF RESULT   <  -128,  THEN  E      MIN   NEGATIVE    NUM
                          1793  ;INPUT:              DE =  16  BIT SIGNED  NUMBER
                          1794  ;OUTPUT:             DE/8  <  -128     —E =  -128
                          1795  ;        -128   <= DE/8   <=+127      E  = DE/8
                          1796  ;        +127   <  DE/8               E  = +127
                          17QD7 Seeeeeee SESH  EHHEHEH  EHH   EHEHEERE  EEEEEE HEHEHE REESE   EAREEHE HEHEHE  HERES  EEE EES
                          1798  ;
    E129                  1799          PTRN  POS:
                          1800
    E129  ES              1801           PUSH    HL                   ;HL  USED  TO  TEST  MAGNITUDE
                          1802  ;
    E12A  cs              1803           PUSH    BC                   ;B  WILL  BE  USED  AS  A  COUNTER   IN  THE   DIVIDE
    —12B  0603            1804           LO      B,3
    E120                  1805  PX_2P_P_?:                            :(THIS   IS  THE START   OF  THE   DIVIDE   LOOP)
    E120  CB2A            1806           SRA     D                    ;16  BIT  SHIFT  LEFT
    E12F  CB18            1807           RR      E
    E131  1OFA            1808           DJNZ    PX_2 P_P_1           ;DIVIDE   BY  8 LOOP
    E133  ci              1809           POP     BC                   ;RESTORE   BC  TO  OLD  VALUE
                          1810  ;
    E134  21FF80          1811           LD      HL ,OFF80H           -SET   HL TO  -128
    E137  CB7A            1812           BIT     7,0                  ;1S  RESULT   OF DIVIDE    NEGATIVE?
    E139  2006            1813           JR      NZ ,NEGTV
                          1814  ;
    E138  19              1815           AOD     HL ,DE                >IF DE-128   < O  (Frnc)  RETURN
    E13C  E1              1816           POP     HL                   -same   as (IF  DE<=127    RETURN)
    E130  00              1817           RET     NC
    E13€  1E7F            1818           LO      E,7FH                ;1F  >  128,  THEN  E  >=  MAX  SIGNED   +  NUM.
    E140  c9              1819           RET
                          1820  ;
    E141  2600            1821  NEGTV:   LD      H,OOH                ;SET   HL TO  128
                          1822  ;
    E143  19              1823           ADD     HL ,DE                IF  DE+128   >= O  RETURN
    E144  Ei              1824           POP     HL                   ;same   as (IF  DE>=-128    RETURN)
    E145  08              1825           RET     C
    E146  1€80            1826           LO      E.80H                ;IF  <  -128,  THE  E      MIN  SIGNED   -  NUM.
    E148  c9              1827           RET
              <OO7F>    1829  DEL                EQU      7FH             ;ASCII code for   it
                        1830  ;ASCII_GEN          EQU      LOC_INALPHA      ist byte of  generator  for  NUL
                        1831  ;
                        1832  ; _ LOAD  ASCII
                        1833  ;
                        1834  ;     Loads  the  ASCII  character generators into VRAM at  the
                        1835  ;     current  pattern   generator table (NOTE - INITTABLE   must
                        1636  ;    have   been  called  prior to this).  Only the characters
                        1837  ;     from  the space   to the DEL (20h to 7Fh) are loaded.
                        1838  ;
                        1839  ;Input   Parameters:
                        1840  ;   NONE
                        1841  ;
                        1842  ;Returns:
                        1843  ;   A,   8C, HL,  DE are  destroyed
                        1844  ;
                        1845  ;  Falls   into _PUT_ASCII
                        1846  ;
    E149                1847                                                                     :
                        1848                     ;LO       HL,([PATTRNGENTBL];get base of  current  generator    table
    E149  EDSBFOGA      1849                     LO       DE,{PATTRNGENT8L] ;get base of  current  generator    table
                        $850                     ;LD       DE,OOH+8        ;Offset into  it where  SPACE  will   be
                        1851                     ;ADD      HL.DE
                        1852                      EX       DE.HL           ;leave VRAM address   in DE
    E140  210000        1853                     LOD      HL,OOH          ;want to start  with  the nu)!
    E150  010080        1854                     LD       BC,(DEL-OOH+1)  ;load the entire  ASCII  set (0. .7F)
                        1855  ;
                        1856  ; fall   thru to  PUT_ASCII
                        1857 ;:
                          1859 ;
                          1860 ;  — PUT_ASCII
                          1861 ;
                          1862 ;       Copys ea specified  number of ASCII    character generators    into VRAM.
                          1663 ;       Swaps  to ROM that  contains the  generators   then  swaps  back,  keeps
                          1864 ;       track of  callers  stack and uses  a   tocal stack  that  is known  to
                          1665 ;       be in RAM  when the  ROM is swapped    in.
                          1866 ;
                          1867 ;Input  Parameters:
                          1868 ;  HL  - Character  to tst  load (generally    in rangeO.  .FFH)
                          1869 ;  BC  - Number  of characters  to load  (Not   the number  of bytes)
                          1870 ;  DE  - Address  in VRAM  to load the  ist  generator
                          1871 ;
                          1872 ;  A,  BC, HL,  DE, IX  are  destroyed
                          1873 ;
                          1874 ;  Calis  WRITE _VRAM
                          1875 ;         SWITCH  _MEM
                          1876 ;
     E153                 1877
     E153 29              1878                   ADD      HL,HL             ;multiply  char  to  start  loading  by  8
     E154 29              1879                   ADD      HL,HL             ;SO  can use  it as  an offset   into the
     E155 29          -   $880                   ADD      Ht HL             ;ASCII  generator
     E156 C5              1881                   PUSH     BC                ;save  number  of chars   desired
                          1882                   ;LD       BC,ASCII_GEN
                          1883                   ;LD       BC,([LOC_IN_ALPHA})
                          1884                   ;ADD      HL.BC              ;now HL points   to the  ist generator    desired
     E157 E3              1885                   EX       {SP}.HL           ;get  number  of chars  desired
     E158 29              1866                   ADD      HL,HL             ;and  multiply  by  8
     E159 29              1887                   ADD      HL.HL             ;   since each  generator   is 8  bytes
     E1SA 29              1888                   ADD      HL,HL             ;      long
     E15B £3              1889                   EX       {SP),HL           ;get  back pointer   into  ASCII  generators
     E1S5CCi              1890                   POP      BC                ;get  number  of chars  times  8
                          1891
     E15D 00210000        1892                   LOD      IX,OOOOH          ;   to use to  save  callers  SP
     E161 DD39            1893                   ADD      IX,SP
     E163 SIFEGE          1894  —                LD       SP,TEMP_STACK     ;set  stack  into known  RAM
     E166 DDES            1835                   PUSH     IX                ;save  callers  SP
                          1896    "
     E168 3AFDGE          1897                   LD       A,[CUR_BANK]      ;remember  which  bank  setting   we
     E16B FS              1898                   PUSH     AF                ;    are in
     E16C 3AFCI7          1899                   LO       A,[MEM_CNFGOO]    ;get  value  to let  us get  at the  ALPHA   roms
                          1900
     E16F CS              1901                   PUSH     BC                ;count  would  get  destroyed  by  SWITCH MEM
     E170 CDFD14          1902                   CALL     SWITCHMEM
     E173 C1              1903                   POP     BC
                          1904
     E174 DS              1905                   PUSH    DE
     E175 ED5B0102        1906                   LD      DE,{LOC_IN_ ALPHA}
     E179 19              1907                   ADD     HL ,DE
     E17A D1              1908                   PoP     DE
                          1909    .
     E178 CDOFDIA         1910                   CALL     WRITEVRAM
                      °   1911
     EI7E Fi              1912                   PoP      AF                ;get  back callers   mem configuration
     E17F CDFDI4          1913                   CALL     SWITCHMEM
                          1914
     E182 €1              i915                   PoP     HL                 ;get  callers  SP
    €183 F9             1916                     LD       SP.HL             -and restore it
    E1864C9             1917                     RET                         >;and back to  caller
                          1919 ;
                          1920 ;    Switch_mem:  memory bank  switching  routine
                         1921  ;
                         1922  ;    Inputs:
                         1923 :;                 A = Appropriate   tnput from  SWITCH TABLE
                         1924
                         1925                    Example:
                         1926       Switch Table  Offset    Memory  configuration
                         {927      “eweaeeweweeeewveaeewreeweereerwrtenreweenwweenwrnawxenenWuewewweeaewvnweeeeenwweexe
                         1928
                         1929                -          Boot  ROM and  Alpha  Roms
                         1930                -          Intrinsic   RAM (OOOOH  thru  7FFFH)
                         1931                           Expansion   memory (OOOOH   thru 7FFFH)
                         1932                -          OS_7  and  Intrinsic  RAM (2000H   thru 7FFFH)
                         1933
                         1934
                         1935
                         1936
                         1937
                         1938
                         1939  ;   *¢+¢Note: The values in  the table  are subject   to change  in future
                         1940  ;             releases of ADAM  hardware.
                         1941  ;
                         1942  ;   For an example  of the use  of SWITCH MEM   see PORT COLLECTION    below.
                         1943  ;
                         1944  ;
                         1945  ;    Outputs:
                         1946                    CUR_BANK,  a defined  memory  location  will  contain
                         1947                    the updated  input  parameter  for  applications  and
                         1948                    EOS routines  which  need to  determine  which
                         1949                    memory space  is currently   active.
                         1950
    E165                 1951   SWITCH  MEM
    E185  47             1952            LO      B A                                 ;SAVE THE  PORT DATA   TO WRITE
    E186  3AFC27         1953            LD      A (MEMSWITCH  PORT]                 ;GET THE  PORT NUMBER
    E189  4F             1954            LD      CcA
    E18A  ED41           1955            OUT     (CJ»B                               ;SWITCH  MEMORY BANKS
    E18C  78             1956            LD      AB
    E18D  32FD6E         1957            LD      {CUR_BANK],A                        >REMEMBER  WHAT WAS   SWITCHED  TO.
    E190  C9             1956            RET
                                                               @e@#@e@eeeaeH=a1@e@eee eeee@0@ea
                        1960 ;
                        1961 ;    Port collection must  be  calied  during initialization
                        1962 ;    It switches to OS7 ROM  grabs  the  ports and switches back
                        1963 ;
                        1964
    E191                1965  PORT COLLECTION:
    E191 3AFDGE         1966          LO     A,([CUR_BANK}                -GET THE CURRENT BANK
    E194 FS             1967          PUSH   AF
                        1968 ;
    E195 SAFCIA         1969          LD     A,[MEMCNFGO3]                ;SWAP IN THE OS
    E198 CDFD1I4        1970          CALL   SWITCH_MEM
    E19B 21FC29         1971          LD     HL.PORTTABLE+2               ;HL POINTS TO THE PORT   TABLE
                        1972 ;
    E19E 3A1D43         1973          LD     A,(01043H)                   ;VDP CONTROL PORT
    EtA1 77             1974          LO     {HL}.A
    E1A2 23             1975          INC    HL
                        1976 ;
    E1A3 3A1D47         1977          LD     A,(01D47H]                   ;VDP DATA PORT
    E1AG 77             1978          LD     {HL).A
    E1A7 23             1979          INC    HL
                        1980 ;
    E1A8 3A114B         1981          LD     A,[0114BH]                   ;CONTROLLER O
    E1AB 77             1982          LO     {HL}.A
    E1AC 23             1983          INC    HL
                        1984 ;
    E1AD 3A1151         1985          LO     A,{01151H]                   ;CONTROLLER 1
    E1BO 77             1986   .      LD     (HL],A
    E181 23             1987          INC    HL
                        1988 ;
    E1B2 3A1157         1989          LD     A,(01157H})                  ;CONTROLLER STROBE SET
    E1B5 77             1990          LD     [HL).A
    E186 23             1991          INC    HL
                        1992 ;
    E1B7 3A1168         1993          LD     A,{01168H]                   ;CONTROLLER STROBE RESET
    E1BA 77             1994          LD     (HL},A
    E1BB 23             1995          INC    HL
                        1996 ;
    E1BC 3A0O1BE        1997          LD     A,[O018EH]                   ;SOUND PORT
    E1BF 77             1998          LD     [HL],A
    E1CO Ff             1999          poe    AF
    E1IC1CDFD14         2000          CALL   SWITCHMEM
    E1C4 C9             2001          RET
                         2003 ;
                         2004 ;  Name:              WRSPR_ATTRIBUTE
                         2005 ;
                         2006 ;  Function:          Transfers  the  loca!  copy of  the sprit¢ attribute     table
                         2007 ;                      to VRAM.   WR_SPR_ATTRIBUTE    will also reorder    the
                         2008 ;                      sprite  table  to reduce  Sth  sprite priority  problems.
                         2009 ;
                         2010 ;  Entry:             DE - address  of  Loca:  Sprite  Table
                         2011 ;                     HL - address  of  Priority  table
                         2012 ;                      & - mumber  cf  sprites  to he  transfered (length    of  Loca!   Sprite
                         2013 ;                            table divide    by 4
                         2614 :  Exit:              None.
                         2015 ;
                         2016 ;  Registers   usec:  AF, BC,  DE, Hi.
                         2017 ;
                         2018 ;  Data   structures  accessed:
                         2019 ;                     VRAM_ADDR_TABLE   (SPRITEATTRIBL)   for the starting     address
                         2020 ;                     of the  sprite  attribute  table  in VRAM.
                         2021 ;
                         2022 ;                     PORT PTR_TABLE   (CTRL_PORT_ PTR,  DATAPORT_PTR)     for
                         2023 ;                     VDP port  access.
                         2024 ;
                         2025 ;                     Local  Sprite  Table  - User defined  memory  image   of
                         2026 ;                     the sprite  attribute   table
                         2027 ;
                         2028 ;                     Priority  Table  - User  defined  sprite priority    list
                         2029 ;                     for the  transfer  of  the sprite  attributes
                         2030 ;
                         2031 ;  Size:              ROM  - xx bytes
                         2032 ;                     RAM  - xx bytes
                         2033 ;
                         2034 ;  Comments:
                         2035 ;
                         2036 ;  Comparision:       left out  pascal  entry  point
                         2037 ;                     added  register  parameters   in place of defined    memory  pointers
                         2038 ;                     code compacted
                         2039 ;                     edited  for documentation
                         2040 ;
    E1C5                 2041  WR _SPR_ATTRIBUTE
                         2042                                                       Initialize  VOP  address    pointer
    E1CS F5              2043                   PUSH    AF
    E1IC6E5              2044                   PUSH    HL
    E1C7 2AFD64          2045                   LO      HL, (SPRITEATTRTBL }
    E1ICACDEIES          2046                   CALL    SET WRITE
    E1CD Et              2047                   POP  HL
    EICE Fi              2048                   POP  AF
    EICF 47              2049                   LD   B.A                                        |
                         2050                                                       -B = Sprite Count
                         2051                                                       -C = port address
                         2052                                                       -DE = address  of  Local   Sprite   Attribute  Table
                         2053                                                       -HL = address  of  Priority   table
                         2054                                                       -VDOPis initialized    to  appropriate    address
    E100                  2056  LOOP_EVERYSPRITE:
                          2057
                          2058  *                Index  to sprite   with the next  highest  priority
                          2059
    E1IDO 7E              2060             LD    A, [HL]            ;Get current sprite   as defined  by the  priority table
    E1D1  87              206 1            ADD   A.A                ;*2 Multiply by  an  attribute  entry (4)
    —E1D2 87              2062             ADD   A.A                ;*4
                          2063
    E1D3  23              2064             INC   HL                 ;Index to next  location   in priority table
    E1ID4 E€5             2065             PUSH  HL                 ;Save for next  sprite
                          2066
    E1D5S 6F              2067             LO    L.A                ;Offset into the  Local  Sprite  Table by  the current priority
    E1D6  2600            2068             LO    H,O
    E1Ds  19              2069             ADD   HL,DE
                          2070
                          2071
    E1D9  78              2072             LO    A.B                ;Save sprite count   tm Acc.
    E1DA  O604            2073             to    8.4                ;Set count for  write  to VRAM
                          2074                                      ;C has port address
                          2075                                      ;HL has the pointer   to a sprite’s  attributes
    E1DC                  2076  LOOPEVERY BYTE
    E1DC  EDAS3           2077             OUTI                     ;Output a byte
    EIDE  OO              2078             NOP                      ;Wait for VDP to  catch  up  (worst case)
    E1DF  OO              2079             NOP
    E1EO  20FA            2080             JR    NZ,LOOP_EVERY  BYTE
                          2081
    EI1E2 47              2082             iD    B,A                ;Restore sprite  count  to 8B register
    EIE3  Ef              2083             POP   HL                 ;Restore index  into  the priority  table
    E1E4  10€A            2084             DJNZ  LOOP_EVERY SPRITE    ; If more sprites   left then  loop back
                          2085
    E1E6  C9              2086             RET                      ;Else exit
                        2103  ;                    VDP  port access.
    E1E7                2112  SSET_READ:
    E1E7  AF            2113      .       XOR   A                 ;Clear accumulator  for later OR  which
                        2114                                      ; Getermines a  read or write
    E1E8  C2            2116              DEFB  OC2H              :This is the beginning  of a JP  NZ which
                        2117                                      ; will never be  true but leaves  the
                        2118                                      ; accumulator  intact over the  next
                        2119                                      ; two bytes (  the LD A,40H  is decoded
                        2120                                      ; as the last  two bytes of the  jump
    E1E9                2121  SETWRITE:
    E1E9  3&40          2122              LD    A,40H             ;Set bit to tell  VDP that write  is requested
    E1EB  ED4BFC29      2124              LO    BC,[VDP_CTRL_PORT]   ;Get BOTH port  addresses
    E1EF  ED69          2125              OUT   [C].L             ;Output low 8 bits  of address
    E1Fi  84            2126              OR   4H                 ;OR read/write  bit (Bit 6) into  the high    8 bytes
    E1F2  ED79          2127              OuT   [CJ.A             ;Output result
    E1F4  48            2128              iD    C,B               ;Put DATA_PORT  value into the  C register
    E1FS  C9            2130              RET                     ;Exit to caller
                          2132 ;CONTROLLER SOFTWARE
                          2133 ;
                          21QS SHHSSH SeeSSSSeSSee eeseeseseseeMATAeseeeeeeeeeeeeeeeeHeeeeeeeese
                          2135 *
                          2136 *  DECODER TABLE FOR  THE  KEYBOARD
                          2137
                          2138 *
    E1F6                  2139 DEC_KBD_TBL
    E1F6  OF              2140            DEFB KBD_NULL          ; NULL ENTRY
    EIF7  O06             2141            DEFB 6                 ; *°6’
    EIFS  Ot              2142            DEFB 1                 ; ft’
    E1FS  O3              2143            DEFB 3                 ; °3°
    EIFA  O9              2144            DEFB 9                 ; *9’
    E1FB  OO              2145            DEFB O                 ; °O’
    EFC   OA              2146            DEFB 10                ; fe!
    E1FD  OC              2147            DEFB 12                ; Purple Action  Controller  key (third  one down)
    EIFE  02              2148            DEFB 2                 ; °2°
    EIFF  O08             2149            DEFB 11                ; fw?
    E200  07              2150            DEFB 7                 ; ‘7’
    E201  OD              2151            OEFB 13                ; Blue Action  Controller  key (fourth  (or last)  one down
    E202  O05             2152            DEFB 5                 ; ‘5’
    E203  04              2153            DEFB 4                 ; 14!
    E204  O08             2154            DEFB 8                 ; ‘8’
    E205  OF              2155            DEFB KBDO_NULL         ; NULL ENTRY
                          2156
                <OOOF>    2157 KBD_NULL        EQU               OFH
                <OOOF>    2158 KBD_MASK        EQU               OFH      ;MASK  FOR  INPUT DATA BYTE
                <O040>    2159 FIREMASK        EQU               40H
                <0040>    2160 ARM_MASK        EQU               40H
                <OOOF>    2161 JOY_MASK  |     EQU               OFH
                          2162
                      2164
                      2165   __DECODER
                      2166            Will read all the data, from both segments, for a given  controller
                      2167            All data  isreturned in regtsters          .
                      2168            Segment O data is returned the same as with 0S-7
                      2169
                      2170      NOTE - some operations are done in an odd order so that a certain
                      2171             number of cycles (T states) pass between port addressing.
                      2172             Turns off interupts if they were on at entry time for
                      2173             195 T states (approx. 54.5 micro secs), the iterupts
                      2174             are reenabled after this time if they were on before.
                      2175
                      2176      Callers  -  The input parameters are different than 0OS-7and
                      2177                  both segments are returned so only one call is  required
                      2178                  for all the data from a given controller.
                      2179                  The values returned are the same for segment O  (H, L,  E)
                      2180                  but segment 1 values are returned in B and OD.
                      2181
                      2182   ;StackUsage:
                      2183   ; Uses 2 words (pushes only)
                     2184    ;
                      2185  ;Input Parameters:
                      2186  ;   A  - controller number, O or 1
                      2187
                      2188  ;Returns:
                      2189  ;   H  - fire button data
                      2190      L  - joystick data
                      2191      6  - arm button data
                      2192      C  - raw data for segment O, (joystick, fire)
                      2193      D  - keyboard data
                      2194      E  - spinner count data
                      2195      A  - raw data for segment 1, (keyboard, arm, super controller  buttons)
                      2196
                      2197      SPIN SWxCT   - reset to O after read
                      2198
                      2199      strobe port left in the reset condition
                      2200
                      2201  -Date:
                      2202  ; 9/24/83   11:14    JKL
                      2203  ;
       E206                    2205    DECODER:
       E206   4F               2206              LD           CA                                                 ;Save   controller      #
       E207   EDS7             2207              LD           A,!                                                ;get   current    state    of   interupts,    on/off,     into   P/V   flag
       E209   F5               2208              PUSH         AF                                                 ;and   save   for   later    so  can   turn  them   back   on   if  needed
       E208   79               2210              LD           A.C                                                ;Restore     controller     #
      E20C    ED4B8FC2D        2211              LO           BC,  (STROBE   SET   PORT]                         ;C<--SET     PORT   ,B<--RST     PORT
      E210    ED79             2212              OUT           {C].A                                             ;STROBE    10   SEGMENT     1 (SET)
      E212    5O               2213              LD           0.B                                                ;SAVE   RESET    PORT
      E213    21FE5S8          2214              LD           HL,SPIN    SWO   CT                                ;potnt   at   spinner     count    for  controller     O
      E216    ED4BFC2B8        2215              LD           BC,  [CONTROLLER     _O PORT}                      ;C<--PORT    O,   B<--PORT    1
      E21A    B7               2216              OR           A                                                  ;A contains      controtter      number
      E218    2002             2217              JR           NZ,GOT   CORRECT     CONTROLLER       INC       =;
      E21D    23               2218               INC         HL                                                 ;Point    to  spinner     for  ctrir    1
      E21E    48               2219              LD           c,.B                                               ;C<--PORT   1
      E2tF                     2220    GOT CORRECT     CONTROLLER_IN        C:
      E21F    AF               2221              xOR          A
      E220    SE               2222              LD           E, {HL}                                           ;HAVE    SPIN   SWITCH    COUNT
      E221    77               2223              LD           {HL}.A                                            >RESET    COUNT
      E222    42               2224              LD           B.D                                               ;>B<--RST    PORT
      E223    £078             2225              IN           A,(C]                                             ;READ    DATA   FROM   SEG    1
      E225    2F               2226              CPL
                               2227    ;
      E226    2600             2228              LD           H,O
      E228    6F               2229              LD           LA                                                ;HL<--offset       into   DEC  _KBD_TBL
      E229    79               2230              LD           A,C                                               ;Swap    RST  PORT/DATA_    PORT
      E22A    48               2231              LD           C.8
      —€228   €079             2232              OUT          {C}.A                                             ;STOBE    TO   SEG O    (reset)
      E22D    4F               2233              LD           C,A                                               ;C<--DATA      PORT
      E22E    Fi               2234              PoP          AF                                                :get   back    entry   state    of   interupt    reg
      E22F    E2E233           2235              JP           PO,LEAVE    THEM    OFF
      E232    FB               2236              2 |                                                            ;turn    interupts     back    on  only   if  they   were   on  entry
      E233                     2237    LEAVE   THEM   _OFF:
      E233    7D               2238              LD           A,L
      E234    FS               2239              PUSH      —s AF                                                ;save    raw   data   seg   !
      E235    E640             2240              ANO          ARM_MASK                                          ;Test    sleeve
      E237    47               2241              LD           B.A                                               ;>HAVE  ARM   DATA       (in  B)
      —€238   70               2242              LO           A,L
      E239    EGOF             2243              ANO          KBD_MASK                                          ;isolate     KBD   data
      —E23B   6F               2244              LD           L.A
      E23C    DS               2245              PUSH         DE                                                ;Save   spin    switch    count    on  stack   (reg   E)
      E23D    11&1F6           2246              LO           DE ,DEC_KBD_TBL                                   ;Get   top   of  keypad     decoder    table
      E240    19               2247              ADD          HL ,DE                                            ;point    to  DEC  KBD_TBL      entry
      £241    DI!              2248              Pop          DE                                                :Restore     Spinner     count    (reg  EF)
      E242    56               2249              LD           D, [HL]                                           ;sHAVE  KEYBOARD      DATA
      —€243   E078             2250              IN           A,[(C]                                            ;segment     O  data
      £245    2F               2251              CPL
                               2252    ;
      E246    FS               2253              PUSH         AF                                                ;save   raw   data
      E247    6F               2254              LD           L.A
      E248    E640             2255              AND          FIRE  MASK                                        ;isolate     fire   data
      E24A    67               2256              LD           H,A                                               ;HAVE   FIRE  DATA
      E248    70               2257              LD           A,L
      E24C    EGOF             2258              AND          JOY MASK                                          ;isolate     joystick     data
      E24E    GF               2259              LD           L.A                                               -HAVE   JOY   DATA
      E24F    Fit              2260              POP          AF                                                ;get   back   raw   data   for   seg   0
      E250    4F               226 1             LD           C,A                                               ;C  =  raw   data   segment     O
    E252 C9           2263         RET
                        2265   ;
                        2266   ;
                        2267   ;
                        2268   ;   Used   to fill  a  table of  values   for  the 2 controllers
                        2269   ;   Does  some  debouncing    if called   twice   insuccession
                        2270   ;
                        2271   ;   NOTE   - Does  not  return  at bottom   of  code, return    ts  in middie
                        2272   ;            Interupts   will  be off  for  a  while when  cal!   to  DECODE   is  performec.
                        2273   ;
                        2274   ;   Callers   - This  has  different   input   parameters  than   OS-7  and
                        2278:  ;               the  controller   map  ts  ordered  differently.
                        2276   ;
                        2277   :
                        2278   :;Stack Usage:
                        2279   :  will  use  4 words   (2 pushes,  2  call)
                        2280   ;
                        2281   ;Calis:
                        2282   ;  _DECODER
                        2283   ;  DEBOUNCE
                        2284   ;  READ_N_DEBOUNCE      (a routine   that  is  nested itn _POLLER)
                        2285   ;
                        2286   ;Input  Parameters:
                        2287   ;  IX  - pointer  to  ist  byte  of users   controller   map  (10  bytes)
                        2288   ;   A  - controller   enabled   and spinner    enable
                        2289   ;          bit  O  - set  if want  controller    O enabled
                        2290   ;          bit  1  - set  if want  controller    t enabled
                        2291   ;          bit  7  - set  if want  spinner   enabled  for  controllers     which  are  enabled
                        2292   ;
                        2293   ;Returns:
                        2294   ;
                        2295   ;  Data  in users   controller   map  is  like  this off  of  entry   IX value
                        2296   ;             IX+O   - joystick   O
                        2297   ;             IX+1   - fire  O
                        2298  ;              IX+2   - arm  O
                        2299   ;             IX+3     keyboard   O
                        2300  ;              IX+4   - spinner   count  O
                        2301  ;              IX+5   - joystick   1
                        2302  ;              IX+6   - fire  1   |
                        2303  ;              IX+7   - arm  1
                        2304  ;              IX+8   - keyboard   1
                        2305  ;              IX+9   - spinner   count  1
                        2306  ;
                        2307  ;   IX -  points  to  1 byte  past  users   data  table of  highest   enabled    controller
                        2308  ;
                        2309  ;
                        2310  ;   all  but  IY - destroyed
                        2311  ;
                        2312  ;Date:
                        2313  ;  9/24/83     11:14     JKL
                        2314  ;
                        2315
             <OOO1>     2316  CONTROLLER  O  MASK          EQU    O1H
             <OO0O1>    2317  CONTROLLER  1  BIT           EQU    1
             <OOO7>     2318  SPINNER  ENABLE  BIT         EQU    7
    E253                 2320   __POLLER:
    E253  21FESA         2321                     LO         HL
    E256  4F             2322                     LD         CA
    E257  E601           2323                     AND                    _O
    E259  2823           2324                     JR          Z,NOT
                                                                    CONTROLLER  O                    ,Ifnot  thencheck   to see  if controller    1  is
    E258  3D             2325                     DEC        A
    E25¢  CDE264         2326                     CALL       READ_N_DEBOUNCE
    E25F  CB49           2327                    BIT                       BIT.C
                                                             CONTROLLER_1                            ;see ifcontroller   1 is active
    E261  cs             2328                    RET         z
    E262                 2329   POLL_CONTROLLER_  1:
                                                                                                     ;getdata for controller    1
    E262  3EO1           2330                    LO          A,O1H
    E264                 2331  READ_N_DEBOUNCE  :
    E264  cs             2332                    PUSH        BC
    E265  ES             2333                    PUSH        HL
   E266   COE206         2334                    CALL        __DECODER
   E269   4c             2335                    LO          C.H
   E26A   70             2336                    LD          A,L
   E268   Et             2337                    PoP         HL
   E26C   CDE28B         2338                    CALL        DEBOUNCE
   E26F   ci             2339                    POP         BC
   E270   cB879          2340                    BIT         SPINNER
   E272   2807           2341                    JR          2.NEXT_IX
   E274   78             2342                    LD          A,E
   E275  DD8600          2343                    ADD         A,[IXto]
   E278  DD7700          2344                    LO          [IX+0O],A
   E27B  DD23            2345  NEXT_IX:          INC         IX
   E270  c9             2346                     RET
                        2347
   E27E  CB49           2349                     BIT                     1
                                                             CONTROLLER    BIT,C                    ;see if controller  1 itsenabled
   E260  c8             2350                     RET         Z
   E281   110004        235 1                    LD          DE,0004H
   E284   19            2352                     ADD        HL ,DE
   E265   13            2353                     INC        DE
   E286  DD19           2354                     ADD         IX,DE
   E288  C3E262         2355                     JP         POLL_CONTROLLER   1
                           2357 ;
                           2358 ;:DEBOUNCE
                           2359:            This  wil!  check     for  equal  data on two passes,    and  if
                           2360 ;           the  data  its  the   same  then  the users buffer   is  updated.
                           2361 ;
                           2362 :           This  ts  done   by   check  for  equal data, if   the  data  is
                           2363 ;           different   on   each    call  then the data on   this  call  is
                           2364 ;           stored  so  that    the   next  call can use this   new  data.
                           2365 ;           If the  data    is  equa!   then  the data is stored    with  the
                           2366 ;           ni bit  (bit    7)  set   so that  the next calli  will  yield
                           2367 ;           different   data    (IE   there  could never be   a match  on  the
                           2368 :           next  cal)).
                           2369 ;
                           2370 :Stack   Usage:
                           2371 ;   1 word   (subroutine     cali)
                           2372 ;
                           2373 ;Input    Parameters:
                           2374 ;   HL  -  Potnter   to debounce      buffer
                           2375 ;   IX  -  Potnter   to users     controller   map
                           2376 ;   A   -  joystick   data
                           2377 ;   B   -  arm data
                           2378 ;   C   -  fire  data
                           2379 ;   D   -  keyboard   data
                           2380 ;
                           2361 ;Returns:
                           2382  ;: HL    - Potnting   to   next   buffer   (entry value +  4)
                           2383 ;   IX    - Pointing   to   next   data  area  (entry value   + 4)
                           2384 ;   A  is  changed
                           2385 ;   No  others   are  modified
                           2386 ;
                           2387 ;   Calls   self  as  a nested     subroutine   CHECK
                           2388 ;
                           2389 ;Date:
                           2390 ; 9/24/83       11:14       JKL
                           2391 ;                                                               |                 °
                           2392 ;
    —E28B                  2393 DEBOUNCE  :
    E288  CDE297           2394           CALL      CHECK                                   ;debounce    joystick   data
    E28E  79               2395           LD        A,C                                     ;debounce    fire  data
    E26F  CDE297           2396           CALL      CHECK
    E292  78               2397           LO        A.B                                     ;debounce    arm  data
    E293  CDE297           2398           CALL      CHECK
    E296  7A               2399           LD        A,D                                     ;debounce    keyboard   data
                           2400                                                             -fall   thru  to  check   (return   imp!ied)
    E297                   2401 CHECK
    E297  BE               2402           cP         {HL}                                   ;see  if  data   was the   same  as  last   time
    E298  2005             2403           JR        NZ,NOT   SAME
    E29D  F680             2405           OR        80H                                     :set  hi_order    bit  if  same,  so  not  equal    on   next   cal!
    E29F                   2406 NOT SAME
    E29F  77               2407           LD         {HL).A                                 ;update   local   debounce   buffer
    E2A0  DD23             2408           INC        IX                                     :point   to  next  buffer   location
    E2A2  23               2409           INC       HL             .                        :        in  debounce   buffer   as  wel!
    E2A3  C9               2410           RET
                       2412 ;
                       2413 ;UpdateSpinner   - Controller   spin   switch interrupt  service routine
                       2414 ;
                       2415 ;  This routine  processes   the  spinner  switch interrupt  and updates
                       2416 ;    the data needed   by  both DECODER   and POLLER
                       2417 ;
                       2418 ; Ram area used:  Updates   SPIN _SWO_CNT  and SPIN SW1 CNT
                       2419 ;
                       2420 ; The spinner switch   maskable   interrupt  ts RST  38H
                       2421 ;
                       2422 ; Destroys AF, BC,  HL
                       2423 ;
             <O0020>   2424 DIR_MASK      EQU      00 1000008                     ;bit 5 tells us  the direction
             <0004>    2425 INTBIT        EQU      4                              ;bit that tells which   spinner   interrupted
                       2426
    E2A4               2427 _UPDATE_SPINNER
    E2A4 ED4BFC2B      2428         LO       BC,[CONTROLLER   _OPORT]             ;Get port values  for both  controllers
    E2a8 ED78          2429         IN       A,{C]                                ;Input data from  controller   O
    E2AA 21FE58        2430         LD       HL,SPIN SWO  CT                      ;Poitntto spinner  update  data
    E2AD CB67          2431         BIT      INTBIT,A                             ;Was this the controller   that   interrupted   ?
    E2AF 2007          2432         JR       NZ,GET CONTROLLER    1               ;If not then check  controller    1
    E281 E620          2433         AND      DIR_MASK                             ;Check direction  bit
    E283 2002          2434         JR       NZ,INCREMENT   O OIRECTION           ,If set then tncrement   direction
    E285 35            2435         DEC      {Ht]                                 -Else decrement direction
    E2B6 35            2436         DEC      [HL]                                 ;Decrement once more  to  fall  through   tncrement
                       2437
    E287               2438 INCREMENTO DIRECTION:
    E287 34            2439         INC      (HL]                                 ;Increment direction
                       2440
    E288               2441 GETCONTROLLER 1
    E2B8 48            2442         LD       C.B                                  ;Get controller  1 port  into  C
    E289 ED78          2443         IN       A.{C)                                ;Get controller  1 data
    E286 23            2444         INC      HL                                   ;Point HL to controller   1 update   area
    E2BC CB67          2445         BIT      INTBIT,A                             ;Is thts the controller   that  interrupted    me?
    E2BE CO            2446         RET      NZ                                   ;Return if not, Also  don’t   assume
                       2447                                                       ; either controller  if  no bit  is  set
    E2BF E620          2448         AND      DIR_MASK                             ;Check direction  bit
    E2C1 2002          2449         JR       NZ,INCREMENT  1  DIRECTION           ;I1fset then go  increment  direction
    E2C3 35            2450         DEC      [HL}                                 ;Else decrement direction
    E2C4 C9            2451         RET                                           ;Then return
                       2452
    —E2C5              2453 INCREMENT1 DIRECTION
    E2C5 34            2454        ‘INC      {HL]                                 ;Increment direction
    E2C6 C9            2455         RET                                           ;Exit
                              2458
                              2459   SESS   H SESS HEH HEHEHE HHS HEHEHE  HEHEHE  HEHE EEE EHH  HEHEHE   HEHEHE  EEESESEEHHEEEEE      HE HES
                              2460
                              2461                                NOTES     TO  SOUND   PROGRAMMERS
                              2462
                              2463   ; The   only   differences      between      the OS7   version     and  this   ADAM  version
                              2464   ;     are  transparent      to  the    game   programmer     and   important    to  the
                              2465   :     sound   programmer.      Formerly     CALL’s    to  PLAY  _SONGS    and  SND_MANAGER
                              2466   ;     were  necessary      to update     the   sounds.    Now   a  CALL   to SOUNDS    runs
                              2467   ;     the  same   code.   Formerly      CALL’s   to  LEAVE_EFFECT       and  EFXOVER     were
                              2468   ;    needed    to  end   a  SPECIAL    EFFECT.     Now  EFFECT    OVER    runs  the  same    code.
                              2469   :     Independent     CALL’s    to   PLAY  SONGS,    SNO  MANAGER,      LEAVE  EFFECT     and
                              2470   ;     EFXOVER   do   not  run   in   this   module   as   before!!!!!
                              2471
                              2472    PAC  OOO  EEE   OOOO  EERE   SEE   EEEEERESESEDERESSEREHEREESSEOREFEEEE             ORES    EEE EEERS
                              2473
                              2474   ;          Operating     system     sound   routine    EQUATES
                              2475
                  <OOOF >     2476   OFF                   EQU               OFH   ;Off,  no   sound
                              2477
                              2478   ;          Special    byte   O  codes
                              2479
                  <OOF F>     2480   INACTIVE              EQU               OFFH
                              2481   ;@@e@  SEFFECT               EQU               62
                              2482   ENDSDATA              EQU               O
                              2483
                              2484   ;          Offsets    within    an   SxDATA    song  data    area
                              2485
                              2486   ;@ee@  CH                    EQU               Oo
                              2487   ;@e@   SONGNO                EQU               O
                              2488   ;@@@   NEXTNOTEPTR           EQU               1
                  <0003>      2489   FREQ                  EQU               3
                  <0004>      2490   ATN                   EQU               4
                  <0004>      2491   CTRL                  EQU               4
                  <0005 >     2492   NLEN                  EQU               5
                              2493   ;@e@e  FPS                   EQU               6
                              2494   FPSV                  EQU               6
                  <0007>      2495   FSTEP                 EQU   |           7
                              2496   Oe     ALLEN                 EQU               8
                  <0008>      2497   ASTEP                 EQU               8
                              2498   ;@@e@  APS                   EQU               9
                  <0009>      2499   APSV                  EQU               9
                              2500
                              2501   :          song   end  codes
                              2502
                              2503   ;@ee@  CHOEND                EQU               000 100008
                              2504   ;@ee@  CHIEND                EQU               010 100008
                              2505   :@e@@  CH2END                EQU               100 100008
                              2506   ;@e@e@ CH3END                EQU               110 100008
                              2507   ;@@@   CHOREP                EQU               0001 10008
                              2508   ;@e@e@ CHIREP                EQU               0101 100068
                              2509   ;@@@   CH2REP                EQU               1001 10008
                              2510   ;@@e@  CH3REP                EQU               1101 10008
                              2511
                              2512   °          channel    numbers,     87   -B6
                              2513
                              2514   ;@e@e@ CHO                   EQU               O
                     2515 ;@eeCHI             EQU        010000008
                     2517 ;ee@CH3             EQU        110000008
                     2518
                                  2520
                                  2521   ,SSeS S SHE SESE  HEHEHE  SHES  EH HERS
                                  2522   -2          FREQ  SWEEP                 *
                                  2523   ,SSSSS  SSH   SEHHEHEHE   KES  EHHEHEED
                                  2524
                                  2525   -See  Users’    Manual      for  description
                                  2526   -RETs   2 SET:    {f   note   over
                                  2527   -RETs   2 RESET:      if  sweep    in  progress     or  note    not  over
                                  2528
      E2C7                        2529   FREQ_SWEEP
                                  2530
                                  2531             *   if  freq    not   swept,    dec   NLEN   and   RET   [setting     Z  flag]
                                  2532
      E2C7     DD7EO7             2533             LO           A, [IX+FSTEP]           ;check     for   no  sweep    code
      E2CA     87                 2534             OR           A                       ;SET   Z  flag   if  FSTEP    =  O
      E2CB     2009               2535             JR           NZ,L20                  ;if  PSW   is  zero   note    not   to   be  swept
      E2CO     OD7EOS             2536             LD           A, [IX+NLEN]            ;dec   NLEN   and
      E200     30                 2537             DEC          A                       ;SET   Z flag    if  NLEN   =  O
      E201     c8                 2538             RET          2                       ;leave    if  note   over   with    Z  flag     SET
      E202     DO7705             2539             LO           [IX+NLEN],A             ;store   decremented       NLEN
      E2D5     c9                 2540             RET                                  ;RET   with   Z  flag   RESET    [note    not    over]
                                  2541
                                  2542             ENDIF
                                  2543
                                  2544             ¢  sweep     going.    so   dec   FPSV
                                  2545
      E206                        2546   L20
      E206     DDES               2547             PUSH         IX                      ;point   HL   to  FPSV
      E208     E1                 2548             PoP          HL
      E2D9     110006             2549             LD           DE ,FPSV
     -E20C     19                 2550             ADO          Ht ,DE
      E200     CDOE355            2551             CALL         LOCL  DECLSN                   ;dec   FPSV
                                  2552   Sees %    JR           NZ,L21                  -if  PSW   is  zero   FPSV   has    timed    out
      E2EO     co                 2553             RET          NZ                      ;Added   u0S
                                  2554
                                  2555                *  dec    NLEN   and   leave    if  sweep    is  over
                                  2556
      E2E 1    CDE 369            2557             CALL         LOCL_MSNTOLSN                  :reload    FPSV   from   FPS
      E2E4     28                 2558             DEC          HL                     ;point    to   NLEN   [#  steps    in   the   sweep]
      E2E5     7E                 2559             LD           A, [HL]                ;dec   NLEN    and
      E2E6     3D                 2560             DEC          A                      ;SET    Z flag    {tf NLEN   =  O
      E2E7     c8                 2561             RET          2                       ;leave   if   sweep   over   with    Z   flag    SET
                                  2562
                                  2563                   *  sweep     not  over,    so   add   FSTEP   to  FREQ
                                  2564
      E2E8     77                 2565             LO           (HL},A                 ;store    decremented      NLEN
      E2E9     28                 2566             DEC          HL                     ;poitnt   HL
      E2EA     28                 2567             DEC          HL                     ;to   FREQ
      E2EB     DD7E0O7            2568             LO           A, [IX+FSTEP]          ;A   = FSTEP    [two’s    complement       step    size]
      E2EE     CDE374             2569             CALL         LOC_ADD8   16                ;FREQ    = FREQ    + FSTEP
      E2F 1    23                 2570             INC          HL                     ;point    HL   to  hi  FREQ
      E2F2     CB96               2571             RES          2, [Ht]                ;RESET    82   itn hi  FREQ    in  case    add    caused    >  10  bit   FREQ
      E2F4     FGOFF              2572             OR           OFFH                   ;RESET    Z  flag,    sweep   not    over    yet
                                  2573
                                  2574             ENOIF
                                  2575   ;@@@  121
               cg                 2576             RET
                      2877 ;       ENO FREQSWE
                                2579
                                25BO    , eet  eeeeereeeeeeeeeeeeeeseres
                                2581    ;*            ATN_SWEEP                  *
                                2582     ee   eeeresereeeeeeereeesesers
                                2583
                                2584    :;See   User's     Manual!   for  description
                                2585    :RETs     Z  SET:    tf byte    8  is  O  [means     sweep     is  over,    or   note    was    never   swept]
                                2586    ;RETs     Z  RESET:     if sweep    in  progress
                                2587
     E2F7                       2588    ATN_SWEEP
                                2589
                                2590    ;            *  RET   with   Z  SET   if  byte    8  =  00
                                2591
     E2F7    DD7EOS8            2592                 LD         A,  [1X+8)               ;check    byte    8  for   no   sweep     code
     E2FA    B87                2593                 OR         A                        -Z2  1s  set   if   byte   8   = O
     E2FB    C8                 2594                 RET        2                        ;leave     if  Z  set,    sweep    not    going
                                2595
                                2596    ;            *  sweep   going,    so   dec   APSV
                                2597
     E2FC    DDES               2598                 PUSH       IX                       ;point    HL   to   APSV
     EQFE    E1                 2599                 POP        HL
     E2FF    110009             2600                 LO         DE  ,APSV
     E302    19                 2601                 ADO        HL  ,DE
     E303    CDE355             2602                 CALL       LOCL  DECLSN                    ;dec   APSV     [LSN   of   byte    9]
                                2603    *eee8        JR         NZ,L22                   ;1f  PSW    ts  zero    APSV    has   timed     out
     E306    CO                 2604                 RET        NZ                       ;Added    u0S
                                2605
                                2606    ;            *  dec   ALEN   to  see   if  sweep     over
                                2607
     E307    CDE369             2608                 CALL       LOCL  MSNTOLSN                  ;reload      APSV   from    APS
     EJOA    28                 2609                 DEC        HL                      ;point     to  ALEN     [4  of   steps     in   the  sweep]
     E30B    CDE355             2610                 CALL       LOCL_DECLSN                     ;dec   ALEN     [LSN   byte    8]
     E30E    2815               2611                 JR         Z,L23                   ; if  PSW    is  non-zero      sweep    not    over    yet
                                2612
                                2613    ;            *  add   ASTEP   to  ATIN
                                2614
     E310    7E                 2615                 LD         A, {HL])                ;>MSN   A  =  ASTEP
     E311    EGFO               2616                 AND        OF OH                   ;mask    USN
     E313    SF                 2617                 LO         E,A                     ;E   =  ASTEP       O
     E314    28                 2618                 DEC        HL                      ;point     HL  to   ATN
     E315    2B                 2619                 DEC        HL
     E316    28                 2620                 DEC        HL
     E317    2B                 2621                 DEC        HL
     E318    7E                 2622                 LO         A, (HL)                 ;>MSN   A  =  ATN
     E319    E6FO               2623                 AND        OF OH                   ;A   =  ATN      Oo
     E31B    83                 2624                 ADD        A,E                     ;MSN    A  =  [ASTEP     +  ATN]       Oo
     E31C    SF                 2625                 LO         E.A                     -E   =  [ASTEP    +   ATN]       O
     E310    7E                 2626                 LD         A,{HL]                  -A   =  ATTN.    freq    or   CTRL
     E31E    EGOF               2627                 AND        OFH                     ;smask   old   ATN      A  =0      freq     or   CTRL
     E320    B3                 2628                 OR         E                       ;OR   in   new   ATN
     E321    77                 2629                 LO          {[HL],A                ;store     updated      value   back     into    song   data    area
     E322    F6FF               2630                 OR         OF FH                   ;RESET     Z  flag.     sweep    not  over     yet
                                26391   *ee08        JR         L22
     E324    C9                 2632                 RET                                ;Added     uO0S
                                2633
                                2634    ;            ELSE       Z2 flag   is  SET:     sweep    over
                                2635
si      eat         sf           A           si          ef         =f       sO         ef          sf             efi         =sf#      =3              —=s      =s                 8       =e                 J           =
    E325               2636 123
    E325 3600          2637         LO      (HL},0            ;set byte 8  to  O to indicate  end  sweep
                       2638
                       2639 ;       ENDIF
                       2640 ;       ENDIF
                       2641
                       2642 ;@ee@122
    E327 C9            2643         RET
                       2644
                       2646 ;       END ATNSWEE
                               2648
                               2649   seSSSSS SSS SHH HEHESSEHTSEHHHEEEES
                               2650   °8        UPATNCTRL                +
                               2651    SSSSSHSHEHESSS  EES       EHEE EES
                               2652
                               2653   ;Perform  single    byte  update    of  the   snd  chip  notse   contro!    register      or  any
                               2654   ;attenuation    register.    IX  is  passed    pointing    to byte    O of  a  song   data    area,    MSN
                               2655   ;register   C  = formatted    channel    attenuation     code.
                               2656
    E328                       2657   UPATNCTRL
    E328    DD7E0O4            2658            LD         A,([1X+4]            ;MSN   A  = ATN,   LSN  may   be  CTRL   data
    E328    C861               2659            BIT        4,C                  ;test   for   AITN
                               2660                                            >{f   PSW  is  non-zero    ATN   is  to  be  sent,
                               2661                                            ; move    it  to  the  LSN
    E32D    2804               2662            JR         Z,L24
    E32F   OF                  2663            RRCA                            ;Swap   nibbles
    E330   OF                  2664            RRCA
    E331                       2665            RRCA
    E332   OF                  2666            RRCA                            °>LSN  A  = ATN
                               2667
                               2668   ;        ENDIF
                               2669
    E333                       2670   L24
    E333   EGOF                2671            AND        OFH                  ;mask   MSN
    E335   B81                 2672            OR         C                    ;4   = formatted    registers       ATN   or  CTRL
                               2673   sees     CALL       OUT_TO_SOUNO   PORT       ;Output   ATN  or  CTRL   data
                               2674   Seeses   RET
    E336   C3E600              2675            JP         QUT _TO_SOUND   PORT      ;output   ATN  or  CTRL   data
                               2676
                               2678
                              2679    ,F8teseseseeeeereseeeeeeeeese
                              2680    ;*          UPFREQ                    *
                              2681    ,Ses  eeeereseeeeeeereeeresesese
                              2682
                              2683    ;Perform    double    byte   update     of  a sound   chip    frequency      register.       IX   its passed
                              2684    ;pointing     to  byteO   of   a  song   data  area,   MSN    register     D  =  formatted      channel!
                              2685    ;frequency     code.
                              2686
     E339                     2687    UPFREQ
     E339    DD7EO3           2688               LD         A, [IX+FREQ])          ;A =  F2  F3   F4  FS   F6   F7  FB  FIO
     E33C    E60F             2689               ANO        OFH                    7A =   0   O     O   O  F6   F7  FB  FQ
     E33E    B2               2690               OR         D                      ;A =   formatted      reg/#      F6  F7   FB  FO
     E33F    CDE600           2691               CALL       OUT_TO_  SOUND    PORT     =;output   first    freq   byte
     E342    DO7EO3           2692               LO         A,[IX+FREQ]            ;A =  F2  F3   F4  FS  F6    F7  F8  FO   again
     E345    E6FO             2693               AND        OFOH                   :A =  F2  F3   F4  F5    0    0   0    O
     E347    57               2694               LD         DA                     ;save  in  D
     E348    DD7E04           2695               LD         A,(IX+FREQ+1])         ;LSN  A  =O     O  FO  Fi
     E348    E6OF             2696               ANO        OFH                    “A=    0   0    0   0    0    OFO    FI!
     E34D    82               2697               OR         D                      ;A =  F2  F3   F4  FS    O    O  FOF!
     E34E    OF               2698               RRCA                              ;Swap  nibbles
     E34F    OF               2699               RRCA
     E350    OF               2700               RRCA                    |
     E351   OF                2701               RRCA                              ;A =   O   O   FO  F1  F2   F3   F4  F5
                              2702    *e%%       CALL       OUT_TO_SOUND     PORT     ;output     2nd   [most    significant]       freq    byte
                              2703    eee        RET
     E352    C3E600           2704               JP         OUT_TO_SOUND_PORT         ;output     2nd   [most    significant]       freq    byte
                              2705
                         2707
                         2708  ,eSSSESHHHSSSESEEHHESESHSEES
                         2709  ;¢       LOCL_DECLSN       *
                         2710  4SSSSSHESSHSSSHESSSHHHSHEEOS
                         2711
                         2712  ;Without affecting the MSN, decrement  the LSN of  the  byte   pointed to by   HL.
                         2713  ;HL remains the same.
                         2714  ;RET with Z flag set if dec LSN results  in O, reset   otherwise.
                         2715  ;RET with C flag set if dec LSN results  in -f,  reset  otherwise.
                         2716.
    E355                 2717  __DECLSN:
    E355                 2718  LOCL_DECLSN
    E355  AF             2719          XOR     A
    E356  ED67           2720          RRD                     ;& = 0    LSN [HL]
    E358  D601           2721          SUB     1               :2 flag  set {tf dec  to O,  C  flag if dec   to  -!1
    E35A  FS             2722          PUSH    AF              ;save  Z and C flags
    E358  EDG6F          2723          RLD                     ;[Ht}) = old MSN    new  LSN
    E350  Ft             2724          Pop     AF              ;restore  Z and  C flags.   A    O   new LSN
    E3SE  C9             2725          RET
                         2726
                      2728
                      2729 ,eeeeeeeseeeesetesreoeseseresese
                      2730 ;*       LOCL_DECMSN       *
                      QT3Qi eeeeeeseseaseesesrereeresee
                      2732
                      2733 ;Without affecting the LSN, decrement the MSN of the byte potnted to by HL.
                      2734 ;HL remains the same.
                      2735 ;RET with Z flag set if dec MSN results in O, reset otherwise.
                      2736 ;RET with C flag set if dec MSN results im -1, reset otherwise.
                      2737
    E3SF              2738  DECMSN
    E35F              2739 LOCLDECMSN
    ESSF AF           2740         XOR     &
    E360 EDG6F        2741         RLO                     ;A = O   MSN [HL]
    E362 D601         2742         SUB     {               ;2 flag set if dec to O, C flag set if dec  -i
    E364 F5           2743         PUSH    AF              ;save Z and C flags
    E365 ED67         2744         RRD                     ;{HtL)= new MSN   old LSN
    E367 Ft           2745         PoP     AF              ;srestoreZ and C flags, A =0    new MSN
    E3686C9           2746         RET
                      2747
                      2749
                      2750 ,tHeeeeeseceseseeeesereeress
                      2751 ;*       LOCL_MSNTOLSN     :
                      2752
                      2753
                      2754 :Copy MSN of the byte pointed to by HL to tne iSN of that byte      Hi  remains
                      2755 ;the same.
                      2756
    E369              2757 MSNTOLSN
    €369              2758 LOCi_MSNTOLSN
    E369 7E           2759         LD      Aa(Ht)          ;A = MSN   LSN to be changed
    E3GA EGFO         2760         AND     OFOH            >A = MSN   0
    E36C 47           2761         LD      8A              ;save in B
    E360 OF           2762         RRCA                    ;Swap nibbles
    E36GEOF           2763         RRCA
    E36F OF           2764         RRCA
    E370 OF           2765         RRCA                    7A = 0   MSN
    £371 BO           2766         oR      8               ;& = MSN   MSN
    €372 77           2767         LD      {HiL}],Aa       ;(HtL]= MSN   MSN
    €373 C9           2768         RET
                      2769
                        2771
                        2772 5SSSSeSHEHESSSHEHHEHEHEHHEEE
                        2773 ;*       LOC_aDD816        e
                        2774  SSS     SSSHSHEHEEHEEEEE HE
                        2775
                        2776 ;Adds 8 bit two’s complement signed vaiue passed in A to the 16 bit    location
                        2777 ;pointed to by HL.
                        2778
    E374                2779  ADDB16
    E374                2780 LOC_ADDB16
    E374  0600          27861        LO                      ;set B for positive value inA
    E376  CB7F          2782         BIT                     ;1f A is positive
    E378  2801          2783         JR                      ;skip
                        2784 eee8    LD                      7A 16 neg: extend sign bit thru 8
    ESTA                2785         DEC                     ;Added u0S
    E378                2786 POS
    E376  BE            2787         ADD                     ;do 8 bit add [and set Carry]
    E37C  77            2788         LD                      ;store result into LSB 16 bit number
    E370  23            2789         INC                     ;put SB
    ESTE  TE            2790         LO                      ;into A
    EST7F 88            2791         AOC                     ;A = MSB + Carry + B [8B{tsO or FF)
    E380  77            2792         LO                      ;store result into MSB
    E381  28            2793         DEC                     ;re-point HL to LSB 16 bit number
    E382  c9            2794         RET
                        2795
                         2797
                         279G  eeeeeeveseereseereseresretes
                         2799 ;*     PT_IX_TO_SxDATA     +
                         2800 ,Seeeeeeeeseraeeeeseseeeresers
                         2801
                         2802 :SONGNO passed in 8.       |
                         2803 :Potnt IX to byte O tn SONGNO‘s song data area.
                         2804 ;:RETwith both DE and IX potnting to SxDATA,
                         2805 ;HL pointing to MSB SxDATA entry itnLST_OFSND ADORS.
                         2806
     E383                2807 PT_IX_TO_SxDATA
                         2808
                         2809 ;       * IX & DE := addr of byte O itnSONGNO’s song  data  area,
                         2610 ;       HL pointing to MSB SxDATA entry in LST_OFSND_ADDRS.
                         2811
     E363 2AFEGE         2812         LD      HL,{PTR_TO_LST_OF_SNOD_ADDRS];poftntHL to  start  LST_OF_SNO_ADORS
     E386 26             2813         DEC     HL              ;init HL for addition
     E387 28             2814         DEC     Hi
     E386 48             2815         LD      c,.8            :form 4 ¢ SONGNO in C
     E389 0600           2816         LD      B.O
     E368 CBO!           2817         RLC     C
     —E386CBO!           2818         RLC     Cc
     E36F O98            2819         ADD     HL.BC           :HL pts to SxDATA’s entry  in LST_OF SND ADORS
     E390 SE             2820         LO      E,{Ht}          ;move addr SxDATA to IX thru  DE
     E391 23             2621         INC     HL
     E392 56             2822         LD      D,{Ht]
     E393 05             2823         PUSH    DE
     E394 DD|            2824         PoP     IX
     E396 CS             2825         RET
                         2826
                            2828
                            2829   ,seeteeeeasereseereeresesece
                            2830   ;*      AREA SONG   _IS         «
                            2B31    eeeeeeeeeseeseeeereseseresce
                            2832
                            2833   ;The address   of  byte  0  of a song  data   area   is passed    in  IX.   The  song  number  of
                            2834   ;the song  using   that  area  is returned    in  A  [OFFH   {f  inactive].     If a  special
                            2835   :effect was  using   that   area, 62   is returned    in  A  and  HL  {ts returned   with the
                            2836   ;address of  the   special   sound  effect  routine.
                            2837
    E397                    2838   AREA_SONG_IS
    E397  DD7EOCO           2839           LD         A,[1IX+0]          7A  := CHA      SONGNO   or  62,  or  A  := FF
    ES9A  FEFF              2840           CP         OFFH
    E39C  CB                2841           RET        2                  ;leave   with   A =  FF  if  area   inactive
    E39D  EG3F              2842           ANO        00111111B          smask  CHA
    E39F  FESE              2843           cP         62
    E3A1  CO                2844           RET        NZ                 ;leave   with  A  =  SONGNO   if  not  a  special  effect   [62]
                            2845       |
                            2846   ;       special   effect,    so set  Hl to  addr   effect,    stored  in   bytes  1&2
                            2847
    E3A2  DDES              2848           PUSH       IX                 ;point   HL  to  byte   1
    E3A4  E1                2849           POP       HL
    E3A5  23      .         2850           INC       HL
    E3A6  SE                2851           LD        E,[HL)              ;save  LSB   effect   addr   ine
    EJA7  23                2852           INC       HL                  ;HL  to  byte  2
    E3A8  56                2853           LD        D, {HL}             ;save  MSB   effect   addr   inoO
    E3A9  EB                2854           EX        DE ,HL              ;HL  :=  addr  special    effect
    E3AA  C9                2855           RET
                            2856
                            2857   ;       END  UTIL
                            2658
                       2860
                       PRG1
                       2862  ;:*      INIT_SOUND         ‘
                       2864
                       2865  ;See Users’ Manuai for description;   includes ENTRY POINT ALLOFF
                       2866  ;addr iST_OFSND_ADDRS  passed   in HL
                       2867  :n = # of song data areas to   init, passed in B
                       2868
                       286s .;       *¢* Sound chip register   code EQUATES **-*
                       2870
                       2871  ;       Tone generator frequency   and attenuation formatted register   codes
                       2872
              <OO08O>  2873  SRIFRQ      EQU  100000008        -BIT7 = 1, BIT6-4 = TONE GEN  1 FREQ  CODE
              <O090>   2874  SRIATN      EQU  100100008        ;BIT7 = 1, BIT6-4 = TONE GEN  1 ATTN  CODE
              <OOAO>   2875  SR2FROQ     EQU  101000008        ;BIT7 = 1, BIT6-4 = TONE GEN 2  FREQ  CODE
              <OOBO>   2876 SR2ATN       EQU  101100008        -BIT7 = 1, BIT6-4 = TONE GEN 2  ATTN  CODE
              <OOCO>   2877  SR3FRQ      EQU  110000008        -BIT7 = 1, BITG-4 = TONE GEN 3  FREQ  CODE
              <QODO>   2878  SR3AIN      EQU  110100008        ;BIT7 = 1, BITG-4 = TONE GEN  1 ATTN  CODE
                       2879
                       2880  ;       Noise generator control!  and attenuation formatted register   codes
                       2881                                                 .
              <OOEO>   2882  SRNCTL      EQU  111000008        ;BIT7 = 1, BIT6-4 = NOISE GEN  CONTROL  CODE
              <OOFO>   2883  SRNATN      EQU  111100008        ;BIT7 = 1, BIT6-4 = NOISE GEN  ATTN  CODE
                       2884
    E3AB               2885
                       2886  ;eee INITSOUND
                       2887
                       2888  ;    :  ¢ inittalize PTR_TO_LST_OF  SND _ADORS with value passed  in  HL
                       2889
    E3AB  22FEG6E      2890          LD [PTR_TO_LST_OF_SND_ADDRS},HL
                       2891            |
                       2892  ;       * store inactive code   at byte O of each of the n data  areas  [B  = n)
                       2893
    E3AE  23           2894          INC     HL                ;pt HL to song 1 data area entry   in LST_OF_SND_ADDRS
    E3SAF 23           2895          INC     HL                                                   ,
    E380  SE           2896          LD      —.[HL]     |      ;pt DE to byte 0 in first song  data  area
    E381  23           2897          INC     HL                                                    |
    E382  56           2898          LO      0D{HL}
    E3B3  EB           2899          EX      DEHL              ;pt HL to byte O in first song  data  area
    E3B4  11000A       2900          LD      DE,10             ;set DE for 10 byte increment
    E387  3EFF         2901          LD      A,OFFH            ;Added u0S
    E389               2902  B1:|
    E3B9  77           2903          LD      (HL],A            ;Geactivate area  *** Added u0S
    E3BA  19           2904          ADD     HL.DE             ;pt HL to byte O next area (10  bytes  away)
    E3BB  10FC         2905          DUNZ    B1                ;do this for the n (passed in B)  data  areas
                       2906
                       2907  ;       *¢store end of data  area  code (0) at first byte after  last  song  data  area
                       2908
    E3BD  3600         2909          LO      [HL].0            ;store end of data area code  in byte  O data   area  n+   1
                       2910
                       2911  ;       * set the 4 channel! data  area pointers to a dummy, inactive   data  area
                       2912
    E3BF  21E3E6       2913          LO   HL,DUMAREA           ;point HL to inactive byte below  [after   the  RET]
    E3C2  22FE70       2914          LD   {PTR TOS ON _O],HL   ;store addr DUMAREA at PTR_TOS  ON  _O
    E3C5S 22FE72       2915          LO   [PTR_TO_SON _1],HL   ;store addr DUMAREA at PTR_TO_S ON 1
    E3C8  22FF         2916          LO   =6{PTR_TOON 2],HL    ;store addr f  ‘REA at PTR_TO_S ON  2
    E3CB  22FE76         2917         LOD  [PTR_TO_SON_3),HL  ;store addr  DUMAREA at PTR TO SON  3
                         2918
                         2919 ;       *  initializeSAVECTRL
                         2920                                                         :                    |
                         2921 eeses   LD      A,OFFH          ;note: this  ts only time MSN SAVE CTRL  will be non zero,
                         2922 *see¢                           ;Out uOS (loaded  earlier)
                         2923
    E3CE  32FE78         2924         LD      [SAVE CTRL],A   ;thus ensuring  PLAYSONGS  will output  ist real CTRL data
    E301                 2925 __TURN_OFF_SOUND:
                         2926 ;@e@eALLOFF
                         2927
                         2928 ;       * turn off all 4 sound generators
                         2929
    E3D1  3AFC2F         23930        LO      A.{SOUNODPOR}   ;Added u0S
    E3D4  4F             2931         LD      C,A             ;Added u0S
    E305  3ESF           2932         LD      A,OFF+SRIATN    ;form off code  for tone generator  1
    E307  E079           2933         OUT     (C].A           ;send {ftout
    E309  3EBF           2934.        LD      A,OFF+SR2ATN    ;form off code  for tone generator  2
    E308  E079           2935         OUT     (C}.A           ;send it out
    E300  3EDF           2936         LD      A,OFF+SR3ATN    ;form off code  for tone generator  3
    E3DF  E079           2937         OUT     {C]).A          ;s8endit out
    ESE’  3EFF           2938         LD      A,OFF+SRNATN    :form off code  for noise generator,  N
    E3E3  ED79           2939         OuT     {C]).A          ;send it out
    E3ES  C9             2940         RET
                         2941
    E3E6  FF             2942 DUMAREA DEFB    INACTIVE
                         2943
                         2944 ;       END INITSOU
                         2945         :
                            2947
                            2948    eeeeeeeeeeeresereseeeeereees
                            2949   ;*        JUKE  _BOX               ‘
                            2950   ,eee eeereeesreeeseeereeereees
                            2951
                            2952   ;see  Users’  Manual!   for  description
                            2953   ;SONGNO  passed  in   B
                            2954
     E3€7                   2955    PLAY  _IT
     E3€7                   2956   JUKE BOX
                            2957
                            2958   ;        * RET   if  song   already    in progress
                            2959
     E3SE7  C5              2960            PUSH      BC                    ;save  SONGNO  on  stack
     E3E8   CDE383          2961            CALL      PT_IX_TO_SxDATA       ;point   IX to SONGNO’s   song  data  area
     EIJEB  DO7EOO          2962            LD        A,[1xX+0])            ;A  := CH#  [if any]     SONGNO   [if any]
     E3EE   EGSF            2963            AND        3FH                  >A  := 0 O SONGNO
     ESFO   Ci              2964            POP     =—BC                    ;B  := SONGNO
     E3Fi   B88             2965      .     cP        8                     ;test   ifalready    in progress
     E3F2   C8              2966            RET       2                 '   if   so, leave
                            2967   |
                            2968   ;        *  load  first   note   and  set  NEXT_NOTE  PTR   [thru  LOAD  NEXT_NOTE]
                     :      2969
     E3F3  DD7000           2970            LD         {1X+0],B             ;store  SONGNO  in  byte  O
     ESF6   2B              2971            DEC       HL                    >-HL  left by  PT_IX_TO_SxDATA     pointing   to  MSB  SxDATA
     E3SF7  2B              2972            DEC       HL                    ;-entry   in LST_OF_SNO_ADDRS     point  Ht  to  note  list
     E3F8  56               2973            LO        D, (Ht)               ;"Starting  addr  entry   in  LST_OF_SND_ADDRS     and  save   this
     E3F9  28               2974            DEC       HL                    ;-addr  in DE
     E3FA  SE               2975            LD        E, (HL)               ;DE  now has  the  initial   value  for  NEXT _NOTE_PTR
     E3FB  007301           2976            LD        [IX+1),€              ;set  NEXT_NOTE PTR   for  first   note  in  song
     E3FE  007202           2977            LO        {I1X+2]}.D0
     E401  CDE4F2           2978            CALL      LOAD  _NEXT_NOTE      ;load  note,  byte  0 :=  CH#  SONGNO,   set  new  NEXT NOTE  PTR
     E404   1874            2979            JR        UP_CH_DATA_PTRS       ;new  song, so  update   channel!  data  ptrs
                            2980                              :
                            2981   ;        END  JUKEBOX
                            2982
                         2984
                         2985   FSSeeeeeeee eee eeaeeee eeeeese
                         2986  ;*      PLAY SONGS  _          *
                         2987  ,Seeeeeseseseseeseeeeseseeeseeeens
                         2988
                         2989  ;       **¢  Sound  chip  register   code  EQUATES
                         2990
                         2991  ;@@@ WHITE        EQU        00000 1008     ;BIT2  =  1, white  noise   code
                         2992  ;@@e@PERIOD       EQU        000000008      ;BIT2  = O,  periodic   noise   code
                         29933 ;@@e@NSRHI        EQU        000000008      :B:TO-1  Set  for  highest   noise    shift   rate   {N/512]
                         2994  ;ee@@NSRMED       EQU        0000000  18    ;BITO-1  Set  for  medium   noise   shift    rate   [N/1024]
                         2995  ;ee@ NSRLOW       EQU        000000  108    ;BITO-1  Set  for   lowest  noise   shift    rate   [N/2048]
                         2996  ;ee@ NSRTG3       EQU        000000  11B    :BITO-1  Set  for  shift   from   tone  gen   3  output
                         2997
    E406                 2998  SOUNDS
                         2999  ;@e@@PLAYSONGS   _
                         3000
                         3001  ;       * output   CH! attenuation     and frequency
                         3002
    E406  3€9F           3003          LD        A,OFFtSRIATN        ;format  CH!  OFF  byte   into A
    E408  OF90           3004          LD.       C,SR1IATN           ;format  MSN  C  for  CH1iattenuation
    E40A  1680           3005          LD        D,SRIFRO            ;format  MSN  O  for  CHi frequency
    E40C  DD2AFE72       3006          LO        IX,[PTR_TO_S   ON  _1) ;point   IX  to byte  O  data  area   of  song   for  CH!
    E410  CDE456         3007          CALL      TONEOUT
                         3008
                         3009  ;       * output   CH2 attenuation     and frequency
                         3010          |
    E413  3EBF           3011          LO        A,OFF+SR2ATN        ;format  CH2  OFF  byte   into A
    E415  OEBO           3012          LO        C,SR2ATN            :format  MSN  C  for CH2. attenuation
    E417  16A0           3013          LD        D,SR2FRO            ;format  MSN  D  for CH2  frequency
    E419  DD2AFE74       3014          LO        IX,{PTR_TO_S   ON 2]   ;point  IX  to  byte  O  data  area   of  song   for  CH2
    E410  CDE456         3015          CALL      TONE_OUT
                         3016
                         3017  ;       * output   CH3 attenuation     and frequency
                         3018
    E420  3EDF           3019          LD        A,OFF+¢SR3ATN       ;format  CH3  OFF  byte  into  A
    E422  OEDO           3020          LD        C,SR3ATN            >format  MSN  C  for CH3  attenuation
    E424  16CO           3021          LD        D,SR3FROQ           >format  MSN  D  for CH?  frequency
    E426  OD2AFE76       3022          LD.       IX,{PTR_TO_S  ON  3)   ;potnt  IX  to  byte  O data   area   of  song   for  CH3
    E42A  CDE456         3023          CAL       TONE_OUT
                         3024
                         3025  ;       * output   CHO [noise]   ATN   [and CTRL,   if  different   from   last   time]
                         3026                                                           .
    E42D  3EFF           3027          LO        A,OFF+SRNATN        ;>format CHO  OFF  byte  into  A
    E42F  OEFO           3028          LO        C,SRNATN            ;format  MSN  C for  CHO  attenuation
    E431  DD2AFE70       3029          Lo        IX,[PTR_TO_S_  ON _O]) ;point  IX  to  byte  O data   area   of  song   for  CHO
    E435  DDSEOO         3030          LD        E,{1X+0]            ;look for  inactive    code,  OFFH
    E436  1C             3031          INC       3=€                ;this  sets  Z  flag   if E  = OFFH
    E439  2005           3032          JR        NZ,LS               ;{f PSW  1s zero   song  data  area  is   inactive
    E43B  CDE60D         3033          CALL      OUTTO  SOUND   PORT    ;turn  off  CHO
    E43E  1825           3034          JR        L6                 ; SND_MANAGER
                         3035
                         3036  ;       ELSE
                         3037
    E440                 3038  L5
    E440  CDE328         3039          CALL      UPATNCTRL          ;send  out  current   ATN
    E443  DD7EO4         3040          LD        &,EIUX4+CTRL]      ;LSN  A  = current   CTRL  data
    E446   E6OF             304 1           ANO       OFH                  ;mask  MSN
    E448   21FE78           3042            LD        HL ,SAVE CTRL        ;point  to  last CTRL    data  sent
    E448   BE               3043            cP        [Ht J                compare
    E44C   2817             3044            JR        7,16             >if PSW   is zero  CTRL  has   not  changed     (done)
    E44E   77               3045            LD        {HLJ),A              ;SAVE CTRL   = new  CTRL   data
    E44F   OEEO             3046            LO        C,SRNCTL             ;send  new CTRL  data
    E451   CDE328           3047            CALL      UPATNCTRL
    E454   160F             3048            JR        L6                   SNO_ MANAGER
                            3049
                            3050  ;         ENDIF
                            3051  ;         ENDIF
                            3052
    E456                    3053  TONE OUT
    E456   DDS5SE0O         3054            LD        E,{1x+0]            ;look   for  inactive  code,   OFFH
    E459   1C               3055            INC       E                   ;this  sets  Z  flag   if  E = OFFH
    E45A   2003             3056            JR        NZ,L7               ;if  PSW  is zero  song    data  area    is  inactive
                            3057  #448      CALL      OUT_TO_  SOUND PORT     =;turn off  CHx
                            3058  *ees      JR      ~—~6t8s
    E45C   C3IE6OD          3059            JP        OUT_TO_SOUND_PORT       ;turn  off  CHx
                            3060
                            3061  ;         ELSE  send  out  current    ATN and  FREQ
                            3062
    E45F                    3063  L7 .
    E4S5F  COE328           3064            CALL      UPATNCTRL           :send  out  attenuation
    E462   C3E339           3065            JP        UPFREQ              ;send  out  frequency
                            3066  *ee8      CALL      UPFREQ              ;send  out  frequency
    E465        .           3067  L8                 |
                            3068  sess      RET                                                                                              -
                            3069  ;         ENDIF
                          JBOT1i;eeeeeeeeeeseseseeeeerereseese
                          3072  ;:¢      SNO_MANAGER         ‘
                          3074
                          3075  ;See Users’ Manual  for description
                          3076
    E465                  3077  16
    E465                  3078  SNO_MANAGER
                          3079
                          3080  ;       * IX  :* addr of song  #1  data  area  [SiDATA]
                          3081
    E465  0601            3082          LD       B,1               :pt  IX  to byte  O song   data  area  for  song 14
    E467  CDE383          3083          CALL     PT_[X_TO_SxDATA
                          3084
    E46A                  3085  Li                                 ;LOOP  until  end  of  song  data   areas
    E46A  3E00            3086          LD       A,ENOSDATA        ;check  for  end  of  song  data  areas
    E46C  DOBEOO          3087          cP       {1X+0]            :set  Z flag  if  inactive
    E46F  C8              3088          RET      Zz                :leave   [Z set],  if  all  data  areas   have been  processed
                          3089
                          3090  ;       * process  active song   data areas
                          3091
    E470  CDE4CD          3032          CALL     PROCESSDATA_AREA;   update   counters   or call   effect  get  next  note
                          3033
                          3094  ;       * point  IX to byte  O next  song  data  area
                          3095
    E473  11000A          3096          LD       DE,10
    E476  DD19            3097          ADD      IX,DE
    E478  18FO            3098          JR       Lf                ;REPEAT  LOOP
                          30939
                           3101
                           3102  ;Seeeeeaeeeeseeeeeeeeeseserss
                           3103  ;*     UP_CH DATA   _PTRS       -
                           3104
                           3105
                           3106  :For each active   data  area,   starting    with   SIDATA  and  proceeding     in order,    toad
                           3107  ;the associated   channel!  data   area  pointer    [PTR_TO_S  ON x}   with   the  address    of
                           3108  ;byte O.This  routine    is called    by JUKE BOX,    when  a  song  starts   and
                           3109  ;PROCESSDATA_AREA     when  the  channel    using  a  data  area  has  changed    as  a  result   of
                           3110  ;calling LOAD_NEXT_NOTE     [this   happens   when   a song  finishes    and  when   it switches
                           3111  :back and forth   between   noise   and   tone notes].
                           3412
    E47A                   3113  UP_CHDATA _PTRS
    E47A   DDES            3114          PUSH      IX                   ;Save  curent   IX
    E47C   21€3E6          3115          LD        Hi ,DUMAREA          ;set  all  4 ch  data  ptrs   to dummy    inactive    area
    E47F   22FE70          3116          LD        {PTR_TO_S  ON  _O}),HL
    E482   22FE72          3117          tD        {PTR_1O_  SON  1),HL
    E485   22FE74          3118          LD        {PTR_TO_S  ON  2),HL
    E488   22FE76          3119          LO        {PTR _TO_S ON  3).HL
    E48B   O601            3120          LD        a                    ;set  IX  to byte   O SIDATA
    E480   CDE383          3121          CALL      PTIX_TO_SxDATA       ;RETS  with   IX addr  byte  O  song   1
                           3122
    E4390                  3123  L2                             |       ;LOOP  until   end  of song  data   areas
    E490  DD7EOO           3124          LD        A,[1IX+0]            ;test  for  end  of  song  data  araes
    £493  87               3125          OR        A              ; #00   CP        ENDSDATA
    E494   281F            3126          JR        Z,O00NE_SNOMAN       ;leave  loop   if all  data  areas   checked
                           3127
                           3128  ;       *  {f area  active,   set   appropriate    channel!  data  area   pointer
                           3129
    E496   3C              3130          INC       A ; #888    cP         INACTIVE            ;check   for  inactive    data   area:   don’t  up date   ptr if  so
    E497   2815            3131          JR        Z,.L9                ;tf PSW   is non-zero   area   is active:    update    channe!   data  ptrs
    E499  DD7E00           3132          LO        A,(1X+0]}            ;get  CHW  in  A
    E49C  E6CO             3133          AND      OCOH                  ;87  - BE   tn  A   = CHA
    E49E  O7               3134          RLCA                           ;form  CH¥   *  2   inaA,  t.e.,   the  offset   from
    E49F  O7               3135          RLCA                           ;PTR_TO  S ON_O    of  the   channel    data  area   pointer
    E4A0  O07              3136          RLCA                           >that  points    to  channel    CH”
    E4A1  SF               3137          LO        E.A                  ;add  offset   to addr  of  PTR_TO_S  ON_O
    E4A2   1600            3138          LO       0,0
    E4A4   21FE7O          3139          LO       HL,PTR  TO   _SON  O
    E4A7   19              3140         -ADD      HL ,DE                ;-HLpoints   to   proper   channel    data   area   pointer
    E4A8  DDES             3141          PUSH      IX                   ;store  this  song   data  area’s   byte   O   addr    there
    E4AA  D1               3142          POP      DE
    E4A8  73               3143          LO        {HL],€
    E4AC  23               3144          INC      HL
    E4A0  72               3145          LO        (HL},O
                           3146
                           3147  ;       ENOIF
                           3148
                           3149  ;       ¢ point   IX to  byte  O  next   song  data  area
                           3150
    E4AE                   3151  9
    E4AE   11000A          3152          LO       DE ,10
    —€4B1 D019             3153          ADD       IX,DE
    E483   1806            3154          JR       L2                    -REPEAT  Loop
                           3155
    E485                   3156  DONESNOMAN
    E485  ODE1             3157          POP       IX                   ;restore   Ix
                      3158 ;@@@ L112
    E487 C9           3159         RET
                      3160
                          3162
                          3163 SESS SSHHSESHER SHESHEHEEEE
                          3164 :¢      LEAVE_EFFECT
                          3165 SPSS  SSSSHHHESSESHEHEHEEEEE
                          3166
                          3167 ;LEAVEEFFECT,  called by a special sound effect routine when it’s finished,
                          3168 ;restores the SONGNO of the song to which the effect note belongs to B5 - BO  of
                          3169 sbyte 0 in the effect’s data area, and loads bytes 1 and 2 with the address  of
                          3170 -the next note inthe  song.  The address of the 1 byte SONGNO (saved by the
                          3171 ;effect when first called) is passed in DE.  The 2 byte address of the next  note
                          3172 -in the song. also saved by the effect, is passed in HL.  IX is assumed to  be
                          3173 ;pointing to byte O of the data area to which the song number is to be restored.
                          3174 ;Bits 7 and 6 of the saved SONGNO are ignored, and therefore may be used by  the
                          3175 ;effect to store flag information during the course of the note.
                          3176
    E468                  3177 __EFFECT_OVER
                          3178 :@@@ LEAVEEFFECT
    E488  007501          3179         LD      {IxX+t4],b      ;LSB NEXT_NOTEPTR     LSB addr next note  in song
    E4B8  DD7402          3180         LD      {IX+2],H        ;MSB NEXTNOTE PTR  := MSB addr next note  in song
    E4BE   1A             3181        LD       A,[0E)             >= =x=xSONGNO (i.e., the saved, original  SONGNO)
    E46F  E63F            3182         ANO     O3FH               :® O O SONGNO
    E4C1  47              3183         LD      B.A                := 0 O SONGNO (B now = ortginal SONGNO)
    E4C2  DD7E0O          3184         LD      A,[1X+0]           .= CHA   62 (all effect notes have SONGNO  =  62)
    E4C5  E6CO            3185         ANO     OCOH                  CH¥ O00 0000
    E4C7  BO              3186         OR      B                     CHa   SONGNO
    E4Cc8 007700          3187         LO      {IX+0O],A       ;restore the song number
    E4CB   1816           3188         JR      EFXOVER
                          3189
                             3191
                             31G2Q  ;eeeeeeeeereaeeseseeresereees
                             3193   ;*    PROCESS   DATA_AREA           *
                             31Q4   ,Steerer eserregeeseoeueeeeees
                             3195
                             3196   ;See  Users’   Manual    for   description
                             3197   ;Terminology:     SFX   2  address    of  sound  effect     routine
                             3198
      E4CD                   3199   PROCESS  DATA_AREA                               |
      E4CD   CDE397          3200             CALL       AREA_SONG_IS          ;return    area’s    SONGNO     in A   [and   addr   SFX  in  HL]
      E4D0   FEFF            3201             cP         INACTIVE              ;test   for   inactive     code
      E4D2   C8.             3202             RET        Z                     ;RET,   no   processing      if  area   inactive
                             3203
                             3204   ;         *  if special     effect,    call   it to   process     the  data   area
                             3205
      E403   FESE            3206             cP         62                    ;test   for   special     sound   effect
      E4D5   2005            3207             JR         NZ,L10                ;1f  PSW    is zero    data   area   used   by  sound   effect
      E4D7   110007          3208             LO         DE ,7                 ;pt  HLto    SFX+7,    starting    adr   of   the  effect’s     cod  e
      E4DA   19              3209             ADD        HL ,DE
      E4DB   £9              3210.            JP         {HL )                 -do  1  pass   thru    effect,    RET   from   effect
                             3211
                             3212   ;          ENDIF
                             3213
                             3214   ;         * else   process     a non-effect     note
                             3215              |
      E4DC                   3216   L10
      E40C   CDE2F7          3217             CALL       ATN_SWEEP             ;process     atn  sweep    data,    if  any
      E4DF   CDE2C7          3218             CALL       FREQ  SWEEP           ;proc   frq   sweep   data,     if any,    &  note  dura    timer  s
       :                     3219   see       JR      |  NZ,L12                ;'f  PSW   {ts zero    note   is  over
      E4E2   CO              3220             RET        NZ
      E4E3                   3221   EFXOVER
      E4E3   DD7EOO          3222             LO         A,[IX+O]              ;A  := CH#                 this   note
      E4E6   F5              3223             PUSH       AF                    ;save  on    stack
      E4E7   CDE4F2          3224             CALL       LOAD_NEXT   NOTE     ;load  data    for   next   note
      E4EA   C1              3225             PoP        BC                    ;B  := CHA       SONGNO    previous     note
      E4EB   DDO7EOO         3226             LO         A,[1X+0])             ;A  :® CHA#      SONGNO    new   note   [may   be  inactive]
      E4EE   B88             3227             cP         8                     ;check    against    new   note’s    CHé#     SONGNO
                             3228   ese       JR         Z,L12                 >1f  PSW   is  non-zero     change    to/from     tone/efx/noise
      E4EF   C8              3229             RET        Z
      E4FO   1888            3230             JR         UP_CH_DATA_PTRS       ;to  maintain     data   area    priority     system
                             3231
                             3232   ;         ENDIF
                             3233   ;         END  SNOMAN
                             3234
                                3236
                                3237    eee  eeeeeereeeeeseseeeeseges
                                3238   ;*        LOAD  _NEXT  NOTE           .
                                3299   ,eeeeeseeeereseseeseeeeeeees
                                3240
                                3241   ;see   Users’    Manual    for  description
                                3242   :SFX   refers    to  the   beginning     address     of  a  special     sound   effect    routine
                                3243
      E4F2                      3244   LOAD  NEXT  NOTE
                                3245
                                3246   ;          *  deactivate     area,    save   SONGNO    on   stack
                                3247
      E4F2   DOTVEOO            3248              i)         A,[1x+0]                ;A  :=  byte   O
      E4F5   EGSF               3249              AND        00111111B               ;mask   CH#,    if  any
      E4F7   FS                 3250              PUSH       AF                      ;save   SONGNO    on   stack
      E4F8   ODSGOOFF           3251              Lo         [IX+O0]),  INACTIVE     ;deactivate      area
                                3252
                                3253   ;          *  A  :®  header    new   note
                                3254
      E4FC   DDGEO              3255              LO         L, [1X+1]               -HL   := addr    new   note    in ROM
      E4FF   DD6602             3256              LD         H, [1X+2]
      €502   7E                 3257              LD         A, (HL)                -A   :=  header    new   note
                                3258
                                3259   ;          *  save   header    of  new   note   in  song    on  stack    and   load    its  data  CASE     note    type
                                3260
      E503   47                 3261              LO         B.A                    ;save    header    new   note    in  B
      E504   CBG6F              3262              BIT        5,A                    ;test    for   rest
      E506   281C               3263              JR         Z,L13                  ;1f   PSW   is  non-zero     note    is  a  rest
                                3264
                                3265   ;@@@   REST
      ESOo8  C5                 3266              PUSH       BC                     ;save    header    on   stack
      ESOS   EGIF               3267 .            AND        000111118              ;mask    al!   but   duration     bits
                                3268
                                3269   ;          *  set   up NEXT_NOTE     PTR
                                3270
      E508   23                 3271              INC        HL                     ;HL   =  address     of  the   header    of  the   note    after     this   note
      ESOC   0D7501             3272              LO         (IxX+t),b              ;Store    in  NEXT_NOTE     PTR
      ESOF   DD7402             3273              LD         {1X+2),H
                                3274
                                3275   ;          *  move   this   note’s    data   and   fill   in   bytes   where    necessary
                                3276
      E512   DO3604FO           3277              LD         { IX+ATN]   ,OFOH      ;set   atn   off
      E516   DD7705             3278              LD         [ IX+NLEN],A           ;NLEN    :=  5  bit   duration
      E519   DD360700           3279              LD         [ IX+FSTEP],O          ;indicate      freq   not   to  be  swept
      E51D   DD360800           3280              LO         [ IX+ASTEP],0          ;indicate      atn   not  to   be  swept
      E521   C3ES5EC            3281              JP         MODBO
                                3282                                                         .
                                3283   ;          ENOIF
                                3284
      E524                      3285   113
      E524   CB67               3286              BIT        4,8                    -test    for  end
      E526   280E              3287               JR         Z,L14                  ;if  PSW    is  non-zero     end   of  song
      —528   CBSF              3288               BIT        3,A                    ;test    for   repeat
      E5S2A  2804              3289               JR         2, ENONOREP            ;1f  PSW    is  non-zero     repeat    song
                               3290    ;@@@   ENDREP
      E52C   Ct                 3291              POP        BC                     ;B  :=  SONGNO
      ES2D   C3E°~              3292              JP         JUKE  BOX              ;to  reload     is*   note   of   this   song
                            3293
                            3294   ;       RET                           ; to PROCESS  DATA   _AREA,  don’t   save  header
                            3295   ;       ENDIF
                            3296
     E530                   3297   ENONOREP
     E530    SEFF           3298           LD        A, INACTIVE
     E532    F5             3299           PUSH      AF                  ;Save   inactive   code   to end  song
     E533   C3ES5EC         3300           JP        MODBO               ;to  load  byte   O
                            3301
                            3302   ;       ENDIF
                            3303   ;       -  test  for  special   sound  effect
                            3304
     £536                   3305   114
     E536   E63C            3306           AND       001111008           smask   irrelevant    bits
     ES38   FEO4            3307           cP        00000  1008         ;test   for  BS  - B2  = OOO!
     ES3A   2027            3308           JR        NZ,L15              ;1f  PSW  is  zero  note   is a  special   effect
                            3309   ;e@@ EFFECT
     E53C   FDE1            3310           PoP       ly                  ;TY  :=  SONGNO
     ES3E   FOES            3311           PUSH      ly                  ;put  SONGNO   back  on  stack
     E540   CS              3312           PUSH      BC                  ;Save  header   on  stack   NEXT_NOTE  PTR    := SFX,  DE  :=  SFX
     E541   23             3313            INC       HL                  ;-pt  HL  to  next  byte   [LSB  addr  SFX]
     E542   SE              3314           LO        E, {Ht}             ;-E  :*  LSB  SFX
     E543   DD7301          3315     |     LO        {IxX+1]),€          ;-put  LSB  of  SFX   in byte   1 of  SxDATA   ([NEXT_NOTE_PTR]
     E546   23              3316           INC       HL                  ;"pt  HL  to  MSB  SFX
     E547   56              3317           LO        D, {HL}             ;-D  :=  MSB  SFX
     E548   DD7202          3318           LO        {IxX+2],D           ;-put  MSB  SFX   in byte   2 of  SxDATA
     E548   23       |      3319           INC       HL                  ;point   HL  to next   note  [after   this  new  note]
     E54C   FDES           3320            PUSH      ly                  ;A  :2 SONGNO
     ES4E   Fi             3321            PoP       AF
    ES4F    D5             3322            PUSH     DE                   ;1Y  :=  SFX
    ESSO    FDE1           3323            PoP       ly
    E552    11&€558        3324            LD       DE ,PASS1            ;create   “CALL   [IV]"  with  RET  to  PASS1  by  storing
    E555    D5             3325            PUSH     DE                   ;PASS1  on  the  stack
    E556    FDES           3326            JP        {ly}                ;ist  7 bytes   SFX  will  save   addr  next  note  &  SONGNO
    E558                   3327   PASS!
    E558    110007         3328            LO       DE ,7                ;in same   fashion,   create   a  “CALL  (1Y+7)*
    E558    FD1I9          3329           ADD        IY,DE               ;to allow   SFX  to  load   initial  values
    ES5D    11ES5EC        3330            LD       DE ,MODBO           ;RET   to  MODBO
    E560   05      .       3331           PUSH      DE
    E561    FDES           3332           JP         {Iy]
                           3333
                           3334    ;      ENDIF
                           3335
                           3336    ;       - 1f  here,  note   is type  0  - 3
                           3337
    E563                   3338   L15
    E563   C5              3339           PUSH      BC                  ;Save   header   on  stack
    E564   78              3340           LO        A.B                 ;A  :=  fresh  copy   header
    E565   E603            3341           AND       000000  1 1B        ;mask   all  but  type  number
    E567   87              3342           OR        A                   ;test   for  type  O
    E568   2020            3343           JR        NZ,L16              7;if PSW   is zero  note   is  type  O: fixed   freq  and  atn
                           3344
                           3345   ;@ee TYPEO                                   ;5e@t up NEXT_NOTE   PTR
    ES6A   23              3346           INC       HL                  ;next   note  [after   this  new  note]   ts 4 bytes   away,
    E56B   23              3347           INC       HL                  ;point   HL  to  it     .
    ES6C   23              3348           INC       HL
    ES6D   23              3249           INC       HL
     ES6E   007501           3350               LD          [IX+t]}.b               ;put  addr    in NEXT_NOTE_PTR
     ES71   DD7402           3351               LD          {IX+2].H
                             3352
                             3353    :          * move    new   note   data    and   fill   in  bytes   where    necessary
                            3354
     E574   28              3355               DEC         HL                       ;point   HL  back    to  ist  ROM   data    to  move,   NLEN
     E575    110005         3356                LD         DE  ,O5                  ;point   DE  to  destination:       bytes    5,  4,   and  3
     E578   CDE6O03         3357               CALL        DE TO  DEST
     E57B   010003          3358               LD          BC  3                    ;move  3  bytes
     ES7E   EDBS            3359               LDDOR
     E580   DDO360700       3360               LD           [IX+FSTEP}.0O           ;set  for   no  freq   sweep
     €584   00360800        336 1              LO           {IX+ASTEP],0            ;set  for   no  atn   sweep
     E588   1862            3362               JR          MODBO
                            3363
                            3364    ;          ENDIF
                            3365
     ESBA                   3366    Li6
     ESBA   FEO!            3367               cP           1                       ;test  for   type    1
     ES8C   201A            3368               JR          NZ,L17                   ;if  PSW  is  zero    note   is   type   1:  swept
                            3369                                                   ;  freq,   fixed    attenuation
                            3370    ;e@e@   TYPE!                                         ;  set  up   NEXT_NOTE    PTR
     ESBE   110006          337  1             LO          DE ,6                    :note  after    this   note    is  6 bytes    away,
     E591   19              3372               ADD         HL ,DE                   ;pt  HL  to  it
     E592   007501          3373               LD          (IX+t).b                ;Store    in  NEXT_NOTE    PTR
     E595   007402          3374               LD          {IX+2],H
                            3375
                            3376    ;          *  move    new  note    data    and  fill    in bytes    where    necessary
                            3377
     —€598  2B              3378               DEC         HL                      ;point   HL   back   to   ist  ROM   data   to   move,   FSTEP
     E599   1C        |     3379               INC         E                       ;E;  point    DE  to  destination:       bytes    7   - 3
     ES9A   CDEG6O3         3380               CALL        DE TO  DEST
     ES59D  010005          338 1              LD          BC .5                   ;move   5  bytes
     ESAO   EDBS            3382               LDDR
     E5A2   DD36G0800       3383               LD          [IX+ASTEP],0            ;set   for  no   atn  sweep
     ESAG   1844            3384               JR          MODBO                                      .
                            3385
                            3386    ;          ENDIF
                            3387
     ESAB                   3388    117
     ESAS   FEO2            3389               cP          2                       ;test   for   type   2                                 |
     ESAA   2026            3390               JR          NZ,TYPE3                ;if  PSW   is  zero   note    is  type   2:   fixed    freq,  swept  attenvation
                            3391    ;@e@e   TYPE2                                         ;set   up  NEXT  _NOTE  PTR
     ESAC   110006          3392               LD          DE ,6                   ;pt  HL  to   note   after    this   note,    since    it’s  6 bytes   away,
     ESAF   19              3393               ADD         HL ,DE                  ;pt  HL  to   it  by  adding    6
     ESBO   Fi              3394               POP         AF                      ;A  :=  header    this   note   [CH¢      SONGNO   }
     ESB1   F5              3395               PUSH        AF                      ;put   back   on  stack
     —E5B2  E6CO            3396               AND         110000008               ;mask   SONGNO,     leaving    CHA
     E584   2001            3397               JR          NZ,L18          |       ;1f  PSW   is  zero   this    its a  noise   note,     which  is  only  5  ROM    bytes     iong
     E586   28              3398               DEC         HL                      ;SO  move   HL  back    1 byte
                            33939
                            3400    ;          ENDIF
                            3401
     E587                   3402    118
     —€587  007501          3403               LD          {IX+1],t                ;put   addr   in  NEXT_NOTE_PTR
     ESBA   DD7402          3404               LO          {1X+2],H
                            3405
                            3406    ;          *  move    new  note   data     and  fill   int      ‘s  where   necessary
                        3407
    E5BD  2B            3408          DEC       HL                  ‘;pointHi back   to  ist  ROM  data   to move,  APS
    E5BE  1£09          3409          LD        E,9                 ;point DE to  destination:     bytes   9,8,5  - 3
    ESCO  CDE603        3410          CALL      DETO DEST
    €5C3  010002        3411          LD        BC,2                ;move 2 bytes
    E5C6  EDBB          3412          LDDR                          -when done,  DE  points   to  FSTEP,   HL to  ROM NLEN
    E5C8  AF            3413          XOR       A
    E5C9  12            3414          LD        [DE]),A             -FSTEP := O  for  no  freq  sweep
    ESCA  16            3415          DEC       DE                  ;pt DE to RAM   NLEN
    E5CB  1B     .      3416          DEC       DE
    ES5CC OEO3          3417          LD        C,3              -        last  3 ROM  bytes    if this   is a noise  note,   garbage
    ESCE  EDBS          3418          LDDR                          -will be loaded   into   byte  3,  buts  that’s  OK
    E500  181A          3419          JR        MODBO
        |               3420                  .
                        3421;    |    ENOIF
                        3422
                        3423  ;       if here,   note  is  type  3:  swept fred,  swept   attenuation
                        3424
    E502                3425  TYPE3                                 ;set up NEXT NOTE   PTR
    E502  110008        3426          LO        DE,8          .     ;snoteafter  this  note   is  8 bytes   away,
    E5D5  19            3427          ADD       HL,DE               ;pt HL to  it
    E506  007501        3428          LD        {IxX4+4),0          ;put addr  in NEXT_NOTE   PTR
    E509  DD7402        3429          LD        {1X+2]),H
                        3430
                        3431  ;       * move  new  note  data   and  fill in bytes   where   necessary
                        3432   .
    E5DC  28            3433          DEC       HL                  ;point HL back   to  ist  ROM  data   to move,  APS
    ESDD  DDES          3434          PUSH   ~=e'IK        |        ;point DE to  destination:     bytes   9 - 3
    ESDOF FDE1          3435          POP       LY                  -I1Y:= addr  byte  O   [and DE  =  6]
    ESE   1C            3436          INC       E      .            ;DE  :9
    ESE2  FDIS          3437          ADD       IY,DE               -IY  :=addr  byte  9   [APS]
    E5E4  FDES          3438          PUSH      ly         |                   a
    ES5E6 D1            3439          POP       DE          :       ;DE  :=addr  APS
    ESE7  010007        3440          LD        BC,7                ;move 7 bytes |
    ESEA  EDBS          3441          LDDR
                        3442                                              |
                        3443  ;       * modify   byte O  basis   header  new note
                        3444
    ESEC                3445  MODBO
    ESEC  DDES          3446          PUSH      IX                  ;pt HL to byte   O
    ESEE  E1            3447          PoP       HL
    ESEF  Fi            3448          POP       AF                  ;A := header  new  note
    ESFO  Ci            3449          PoP       BC                  ;B :2=SONGNO                                             |
    ESF1  FEFF          3450          cP        INACTIVE            -test for  inactive    [song  over,   as detected   above]
    ESF3  C8            3451          RET       Z
    ESF4  57            3452          LD        D,A                 ;save header   in D
    ESFS  E63F          3453          AND       3FH                 ;Rid channel  bits
    ESF7  FEO4          3454          cP        04                  -Special effect
    ESF9  2002          3455          JR        NZ,L20_ LOAD  _NEX
    E5FB  O63E          3456          LD        B,62
                        3457
    ESFD                3458  L20 LOAD_NEX:
    ESFD  7A            3459          LD        A,D                 ;restore A  to  header
    ESFE  E6CO          3460          AND       OCOH                -A  :=CHA    GOQOOO0OO00O
    E600  BO            3461          OR        B                   ;A  :=mew CH#     SONGNO
    E601  77            3462          LO        {[HL],A             ;store back  in  byte  O
                        3463
                       3464 ;         ENDIF
                       3465
                       3466 ;@ee@ 119
    E602 C9            3467           RET
                       3468
    E603               3469 DETO  DEST                             :DE  passed = offset  from byte  0,  RETed w  addr  byte  offset
    E603 DDES          3470           PUSH      _—IX
    E605 FDE1          3471           POP       LY                 -1Y     addr byte  O [and DE  = offset]
    E607 FD19          3472           ADD       IY,DE              -1Y     addr byte  O + offset
    E609 FDES          3473           PUSH      —si‘TY
    E608 D1            3474           POP      DE                  ;DE     addr of destination   byte  in SxDATA
    E6OC C9            3475           RET
                       3476
                       3477           END LOADNEX
                       3478
                              B4BO   5 rrr                      rr      re        rrre  ee ee  ee   eee  ee eeee ee   eee
                              3481   ;
                              3482   ;  Out_to_sound_    port
                              3483   ;                   input:   a=sound   port   data  to  output
                              3484   ;                  register    usage:  n.a.
                              3485   ;
       E60D                   3486   OUT_TO SOUND   PORT:
       E600  C5               3487             PUSH       BC                            ;SAVE  BC
       E60E  47               3488             td         B,A                           ;THE  IDEA   IS  TO  GET  THE
       EGOF  3AFC2F           3489             LD         A,[SOUNDPORT }              —; INDIRECT    PORT  ADDRESSING
       E612  4F               3490             LD         C,A                           ;THRU  THE   PORT   TABLE  IN   EOS
       E613  ED41             3491             OUT        {cC}.8                                                             |
       E615  78               3492       |     LD         A,B
'      E616  Cf               3493             PoP        BC
       E617  C9               3494             RET
                              3495   ;
                              3496   ,SSRSHS ST SSSR  SSSCESTESTSS  SSSSS SSSSS SSS SSSSS SSS STS SSS  SsSlsessSessssrze
                              3497   »SSSSSSSSESSSSSSPSSSSESSSSSSSSS       SSS SPSSTssssssescssessssssezseeszer=2et2zee2
                              3498   ,BBSSPSSSSECTPTPSFESSSSSSSSSSP SHSSS STSST SSSSSSSSTessersersesstestsseeexse22eze22222
                              3499   ;
                              3500
                                     3502               ;GLB         _  QUERY    FILE,       SET    FILE,      MAKE    FILE
                                     3503               ;GLB         __FILE    QUERY
                                     3504               “EXT          FCB  _HEAD   _ADDR,FCB_       DATA_ADOR
                                     3505                EXT          SCAN_FOR    FILE
                                     3506               ;EXT         BLOCKS    REQ,USER        BUF   ,USER    NAME
                                     3507               ;EXT         BUF  START    ,BUF    END
                                     3508               ;EXT         STRCMP    ,BASECMP
                                     3509               ;EXT         NEW   HOLE   SIZE,NEW         HOLE   START,HOLE        FILE    NAME
                                     3510               ;EXT         EOS   YEAR,EOS      MONTH,EOS        DAY
                                     3511               ;EXT         BLK_STRT_PTR,VOL            BLK   S2           -DLS(8/29/83)
                                     3512               ;EXT         READ_BLOCK.,WRITE           BLOCK,CHECK        IF   OIRECTORY
                                     3513               sEXT         DIR_BLOCK_NO,FOUND             AVAIL    ENTRY
                                     3514               ;EXT         FILENAME     CMPS
                                     3515                           .
                                     SENG    3m        nm  ee        enenn       we  me  mn      ee me re  mem ewe  nee  ree       nee     ee eneeen
                                     3517    ;
                                     3518    ;    QUERY    FILE     --  Read     the   file’s      directory        entry.     (USES     STRCMP     FOR   FILE    NAME     COMPARISIONS)
                                     3519    ;    FILE    QUERY     --   SAME   AS   ABOVE      BUT    SETS    UP   SCAN  _FOR_FILE       FOR    BASE    COMPARES        (  USES      BASECMP    )
                                     3520    ;
                                     3521    ;  CALLING     PARAMETERS:        Device     number       in  A
                                     3522    ;                                 address     of     name    string      in  DE
                                     3523    ;                                 address       of   buffer      in  HL
                                     3524    ;
                                     3525    ;  EXIT    PARAMETERS:       if   no  errors       --   Z  =   1;  A   =  0;  BCDE     =  file’s     start     block:
                                     3526    ;                                  Girectory         entry     in  caller’s      buffer
                                     3527    ;                            if   errors      --   Z  =   0;  A   =  error    code;      DE  =   junk;
                                     3528    ;                                  caller’s        buffer     undef    ined
                                     3529    ;
                                     3BIO    seer  ccc  ccc  rr rrr rte         et        rt      er rr          er    re          ee er re     eee
                                     3531                                             |
       E618                          3532     FILE    QUERY:
       E618     37                   3533                SCF                                   ;  THIS    ENTRY    DOES    NOTHING      MORE     THAN    SET   CARRY     FLAG
       E619     1802                 3534                JR          QUEER                                                                   .                      |
            |                        3535
       E618                          3536     QUERY    FILE
       E61B     37                   3537                SCF                                    ;  THIS    ENTRY     CLEARS     CARRY     FLAG
       E61C     3F                   3538                CCF
       —E61D                         3539    QUEER:                                                    |
       E610     ES                   3540                PUSH        HL                         ;SAVE     REG’‘S
       E61E     DOES                 3541                PUSH        IX
                                     3542
       E620     FS                   3543                PUSH        AF                                              ]
                                     3544
       E621     3801                 3545                JR          C,SET     UP_A      -      ;  DID    WE  COME     IN  AT   FILE   QUERY
                                 -   9546
       E623     AF                   3547                XOR         A                               ;  USE   STRCMP     FOR    FILE    NAME     COMPARE
       £624                          3548    SET _UP_A:                                              :                               !
       E624     32FDOD8              3549                LD          [FILENAME     CMPS),A           ;  O  =  COMPARE      COMPLETE       FILE    NAME
                  |                  3550                                                            ;  NOT   O   -  COMPARE      ONLY    THE    BASE
       E627     Fi         |         3551                POP         AF
                          .          3552
       E628     22FEO6               3553                LD          [USER   _BUF  ]},HL        ;SAVE     USER’S     DATA    ADDRESS
                                     3554
       —E62B    OD2AFDFD             3555                LO          IX,  (FCB_HEAD      ADDR]       ;POINT     TO   SYSTEM’S       FCB
       E62F     62                   3556                LO          H,D                        ;GET    NAME    POINTER      IN   HL
       E630     68                   3557                LD          L,E
       E631     Cf       B           3558                CALL        SCAN_FOR_FILE              ;LOOK     IN  TH’     ‘RECTORY
    E634  2017          3559           JR        NZ,Q_ERROR      ;BRANCH IF ERROR RETURNED
                        3560
    E636  D5            3561           PUSH      DE              >SAVE START BLOCK OF FILE
    E637  C5            3562           PUSH      BC
                        3563
    E638  EDSBFEOG      3564           LD        DE,[USERBUF )   ;GET BUFFER ADDRESS IN DOE
    E63C  DDGE21        3565           LO        L,{1IX+FCPOINTER]  ;GET ADDR OF ENTRY IN  HL
    E63F  DD6622        3566           LO        H,[IX+FCB_POINTER+1]
    E642  010017        3567           LD        BC,OIR_ENT_LENGTH-3  ; SET BYTE COUNT TO  LOAD  ONLY  VALID INFO  THAT
                        3568                                     ; THAT WAS STORED ON THE  DEVICE
                        3569
    E645  EDBO          3570           LDIR                      ;COPY DATA TO CALLER’S BUFFER
                        3571
    E647  C1            3572           POP       BC              ;GET FILE’S START BLOCK
    E648  D1            3573           PoP       DE
                        3574
    E649  AF            3575           XOR       A               ;SHOW NO ERROR
    E64A  32FD08        3576           LD        (FILENAME_CMPS].A  ; DEFAULT FOR SCAN FOR  FILE
    E64D                3577  Q_ERROR:
    E64D  DDE!          3578           POP       Ix              ;sRESTOREREG‘S
    EG4F  E1            3579           POP      HL
    E650  C9            3580           RET
                        3581
                           3OBQ   5 r rr                  rrr       rts     tern          ttre              ~atte
                           3584   ;
                           3585   ;   SET FILE    --   Re-write    the  file’s   directory    entry.
                           3586   ;
                           3587   ; CALLING  PARAMETERS:      Device    number    in A
                           3588   ;                           address    of  name   string   in DE
                           3589   ;                           address    of  buffer    in HL
                           3590   ;
                           3591   ; EXIT  PARAMETERS:      tf no  errors    --  2  = 1; A  =  0;
                           3592   ;                             directory    entry   updated
                           3593   ;                        if errors    --  2  = 0;  A =  error   code;
                           3594   ;                             directory    entry   unchanged
                           3595   ;
                           SSDG   5mm                       rr   rn       re  mere   ees crest e reece  sow mere teen
                           3597
    E651                   3598    SET  FILE
    —€651  C5              3599            PUSH        BC                   ;SAVE  REG’S
    E652   D5              3600            PUSH       DE
    E653   E5              3601            PUSH       HL
    E654   DDES            3602            PUSH        IX
    E656   22FEO6          3603            LD          [USER BUF)  ,HL      ;SAVE  ADDR  OF   USER’S   DATA
                           3604
    E659   DD2AFDFD        3605            LD          IX,{FCB_HEAD_ADDR]       ;POINT  TO  SYSTEM’S     FCB
                           3606
    E65D   62              3607            LD         H,D                   ;GET  STRING   ADDRESS    IN  HL
    E6SE   68              3608            LD          ae
    E6SF   CDEFOS          3609            CALL        SCAN_FOR  FILE       ;GET  THE  DIR  ENTRY
    E662   2026            3610            JR         NZ,S_ ERROR           ;BRANCH   IF ERROR
                           36 11
    E664   2AFEOG6         3612            LD         HL, [USER  BUF  ]     ;GET  BUFFER   ADDRESS
    E667   DDSE21          3613            LD         E,(IX+FCB_   POINTER]     ;GET  ENTRY  ADDR    IN  DE
    E66A   DD5622          3614            LD         D, (IX+FCB_POINTER+1]
    E660   010017          3615            LO         BC ,DIR_ENT_LENGTH-3          ;SET BYTE   COUNT
    E670   EDBO            3616            LOIR                             ;COPY  THEIR   BUFFER   TO   BLOCK   BUFFER
                           3617
    E672                   3618   TAPE TIMED OUT:
    E672   DD7E17          3619            LD         A, (IX+FCB_  DEVICE]    ;SET   DEVICE  NUMBER
    E675   2AFDOFF         3620            LO         Hi, (FCB_DATA_ADOR]       ;GET  ADDR  OF  MY  BUFFER
    E678   DDSE19          3621            LD         E,{IX+FCB_   BLOCK]    ;GET  BLOCK   ADDRESS    IN  BCDE
    E67B   DOSGIA          3622            LO         D,[IX+FCB_BLOCK+1]
    EG7E   DD4E1B          3623            LD         C,{IX+FCB_BLOCK+2]
    E681   DD461C          3624            LD         B,[1X+FCB_   BLOCK+3]}
    €684   CDFIE6          3625            CALL       WRITE  BLOCK           ;RE-WRITE   THE   DIRECTORY     BLOCK
                           3626
    E687   2001            3627            JR         NZ,WRITE   ERRORS
    E689   AF              3628            XOR        A                     ;SHOW  NO  ERRORS
                           3629
    EG8A                   3630   WRITE ERRORS:
    E68A                   3631   SERROR
                           3632
    E68A   DDE!            3633            POP        IX                    ;RESTORE   REG‘S
    E68BC  Et              3634            POP        HL
    E68D   Di              3635            POP        DE
    E68E   C1              3636            PoP        BC
    E68F   CS              3637            RET
                           3638
                          3640   Br           rr          rt        rr      cer     rere  rrr       -----------
                          3641   ;
                          3642   ;  _MAKE  FILE:   creates  a  file  in  the directory.
                          3643   ;
                          3644   ;  ENTRY  PARAMETERS:   called  with  device   ID  in A:  address   of name
                          3645   ;                  string   in HL;  file  size   (in bytes)   in  BC DE.
                          3646   ;
                          3647   ;   NOTE:    IF FILE SIZE   = O (BC  DE),  THEN  THE  REMAINDER    OF THE  TAPE IS
                          3648   ;            ALLOCATED  TO THE  FILE
                          3649   ;
                          3650   ;  EXIT  PARAMETERS:  CONDITION   FLAGS
                          3651   ;                       Z    -   NO  ERRORS
                          3652   ;                     NZ     -   ERRORS
                          3653   ;                                 A  = ERROR   CODE
                          3654   ;
                          3655   ;        ALL  REGISTERS  ARE  PRESERVED   EXCEPT  AF
                          3656   ;                                       |
                          BEST   5mm   rrr             rr     rrr    rr   en  rr   rn nn   rere en rereeee  ----
                          3658
                <0000>    3659   FOUND_ENTRY        EQU      O         ; BIT   INOICATING   DELETED   FILE FOUND  FOR  OVERLAYING
                          3660                                                                           |
    E690                  3661    MAKE   FILE
    E690  FDES            3662             PUSH     IY                 ;SAVE  REGISTERS
    E692  DDES            3663             PUSH     IX
    E694  E5              3664             PUSH     HL
    E695  D5              3665             PUSH     DE
    E696  C5              3666             PUSH     BC
                          3667
    E697  DD2AFOFD        3668             LD       IX,[FCB_HEAD_ADDR]     ;POINT  TO  SYSTEM   FCB
    E69B  DD36  1800      3669             LD       [IX+FCB_MODE],0         >  INIT  IT IN  CASE   IT WAS SET
                          3670
    E69F  007717          3671             LD       [IX+FCB_DEVICE],A     ;SAVE  DEVICE  NUMBER
    EGA2  22FE10          3672             LD       [USER_NAME],HL     ;SAVE  POINTER   TO  NAME
                          3673
    E6A5  78              3674             LD       A,B               ; CHECK   IF TO  ALLOCATE   REST  OF TAPE
    E6GA6 B1              3675             OR       C
    E6A7  200A            3676             JR       NZ,GOT_ FILE SIZE           ; NOPE,  GOT  SIZE
                          3677
    E6A9  78              3678             LD       A,E
    E6AA  B82             3679             OR       D
    EGAB  2006            3680             JR       NZ,GOT FILE  SIZE
    E6AD  DDCBISEE        3681             SET      MODEREMAINDER   _BIT,[IX+FCB_   MODE]    ;  FLAG  IT
                          3682
    E681   1820           3683             JR       SET_UP_DIR
                          3684
                          3685
                          3686  ;   SINCE  WE ARE  CALLED  WITH  A BYTE  COUNT,   DIVIDE  IT  BY  1024
                          3687  ;   (SHIFT  RIGHT  10 BITS)  TO  GET  A BLOCK  COUNT.
                         3688
    E6B3                 3689   GOT  FILE  SIZE:
    E6B3  5A             3690              LD       E.D                ;D0  A QUICK   SHIFT  BY  8
    E6B4  51             3691              LO       D.C
    E6B5  48             3692              LO       C.B
    E6B6  0600           3693              LD       B,O
    E6B8  CB39           3694              SRL      C                  ;SHIFT  ONE  MORE
    E6BA  CB1A           3695              RR       D
    F6BC  CBtB           3696              RR       E
    E6BE  CB39            3697             SRL       Cc                   ;THEN  ONE   LAST   TIME
    E6CO  CBIA            3698             RR        a)
    E6C2  CB1B            3699             RR        E
                          3700
                          3701    ; FOR THIS   TO BE  A LEGAL   FILE   SIZE,   IT  MUST  FIT   INTO  DE.
                          3702
    E6C4  79              3703             LO        A,C                  ;CHECK   FOR  TOO  BIG
    E6CS  B7              3704             oR        A
    E6C6  C2E992          3705             uP        NZ,TOO  BIG          ;JUMP   IF TOO   BEEG,   SENOR
    E6C9  13              3706             INC       DE                   ;ROUND   UP  IN  CASE  THERE   WAS   A FRACTION
    E6CA  78              3707             LD        A,E                  ;CHECK   FOR  TOO  BIG  AGAIN
    E6CB  B2              3708             OR        D
    E6CC  CAE992          3709             uP         Z2,T0BIG
    E6CF  EDS3FEOC        3710             LD        [BLOCKS  REQ),DE     ;ELSE  SAVE   THE  BLOCK   COUNT
                          3711
    E6D3                  3712    SET_UP_DIR:
    E603  110000          3713             LD        DE,O                         ; ZERO  OUT   HI  ADDRESS
    E6D6  EDS3FEOE        3714             LD        [BLOCKS  _REQ+2].DE
    EGDA  EDS3FDD9        3715             LO        [DIR_BLOCK_NO),DE
    EGDE  AF              3716             xOR       A
    EGDF  32FDDB.         3717             LD        [FOUND  _AVAIL_ENTRY].A
                 |        3718                    |
    EGE2  DD361901        3719             Me)       [IX+FCB_BLOCK]),1     ;INIT  NUMBER    OF  FIRST   DIR  BLOCK
    EGEG  DD771A          3720             LO        [IX+FCB_BLOCK+1],A          ZERO   IT  OUT
    EGES  0D771B          3721             LD        [IX+FCB_BLOCK+2),A
    EGEC  DD771C          3722             LD        [IX+FCB_BLOCK+3],A
                          3723
    EGEF  DD360001        3724             LD        [IX+FCB_START_BLOCK],1        ;INIT  NUMBER    OF  FIRST   DIR  BLOCK
    EGF3  DD770E          3725             LD        [IX+FCB_START_BLOCK+1],A
    EGF6  D0D770F         3726             LD        [IX+FCB_START   BLOCK+2],A
    E6F9  0D7710          3727             LO        [IX+FCB_START   BLOCK+3),A
    7                     3728
    EGFC  EDSBFOFF        3729             LD        DE,[FCB_DATA_ADDR]      ;INIT   POINTER    TO BUFFER
    E700  007321          3730             LD        [IX+FCB_POINTER],€
    E703  007222          3731             LD        [IX+FCB_POINTER+1],0
                          3732
    E706  EDS3FEO8        3733             LD        [BUF_START],DE      ;ALSO   INIT   HERE  WITH   SAME
    E70A  210400          3734             LD        HL,1024             ;CALC   ADDR   OF  END  OF  BUFFER   TOO
    E700  19              3735             ADD       HL,DE
    E7OE  22FEOA          3736             LD        (BUF_END],HL        ;AND   SAVE  IT
                          3737
                          3738    ;THIS LABEL   NOT  USED  IN THIS   ROUTINE,    NOT  DECLARED    GLOBAL
                          3739    ;REMOVED  BECAUSE   IT CONFLICTS    WITH   IDENTICAL    LABEL   ELSEWHERE
                          3740    ;READ_TIMEOUT:
    E711  DD7E17          3741             LD        A,[IX+FCB_DEVICE]      ;GET  PARAMETERS     FROM  FCB
    E714  DDGE2!          3742             LD        L,[IX+FCB_POINTER]
    E717  DD6622          3743             LD        H,[IX+FCB  POINTER+1]
    E71A  DDSE19          3744             LD        E,{IX+FCB  BLOCK]
    E710  DDS6IA          3745             LD        0,{1X+FCB_BLOCK+1]}
    E720  DD4E18          3746             LO        C,{IX+FCB_BLOCK+2]
    E723  DD461C          3747             LD        B,[IX+FCB_BLOCK+3]
    E726  COF178          3748             CALL      READBLOCK           ;THEN   READ   THE  FIRST   BLOCK
                          3749
    E729  C2E989          3750             uP        NZ,MAKE_ERROR                  IF  ERROR
                          3751
    E72C                  3752   SET_UP_FCB:
    E72C      \FOFF       3753             LD        IY,[FCB _DATA_ADDR]     ;POINT       THE  BUFFER
                                   3754
      E730    FO7EOC               3755               LO          A,{IY+VOL_DIRSIZE)           ;GET   THE   DIR  SIZE    BYTE
      E733    EG7F                 3756               AND         7FH                      ;ZERO   THE   PERM   BIT
                                   3757               INC         A                        :BECAUSE    WE   START    IN  BLOCK    1
                                   3758               DEC         a                        ;TO  SOLVE    PICKET    FENCE    PROBLEM
      E735    007710               3759               LD          LIX+FCB_LAST       BLOCK),A      ;SET   THE   LAST   BLOCK    #
      E738    DOD36  1E00          3760               LO          [IX+FCB_LAST_BLOCK+1],0             ;OTHER    BYTES    WILL   BE  ZERO
      E73C    0036   1FOO          3761               LO          [ IX+FCB_LAST_BLOCK+2),0
      E740    DD362000             3762               LD          [I1X+FCB_LAST_BLOCK+3],0
                                   3763
      E744    CDFO35               3764               CALL        CHECK_IF_DIRECTORY                  ;  CHECK    IF  DIRECTORY     EXISTS
      E747    C2E989               3765               JP          NZ,MAKE_ERROR
                                   3766
      E74A    0626                 3767               LO          B,ENT_PER_BLOCK-       1    ;INIT   ENTRY    COUNT,    ALLOW   FOR   vOL   ID
                                   3768
      E74C                         3769   NEXT_ENT
      E74C    DODGE 21             3770               LD          L,[IX+FCB_POINTER]           ;GET   CURRENT    POINTER
      E74F    DO6622               3771               LD          H, [IX+FCB_POINTER+1)
      E752    11001A               3772               LO          DE ,DIR_ENT_LENGTH         ;GET   LENGTH     OF  AN  ENTRY
      E755    19                   3773               ADD         HL .DE                   ;ADVANCE    POINTER     TO  NEXT   ENTRY
      E756    007521               3774               LO          [IX+FCB_POINTER],L           ;AND   SAVE   IT  AGAIN
      E759    007422               3775               LD          [IX+FCB_POINTER+1],H
                                   3776
      E75C                         3777   CHECK_ENT
      E7SC    DDOGE21              3778               LO          L,{IX+FCB_POINTER]           ;GET   POINTER    INTO    IY  THE   LONG   WAY
      E75F    DD6622               3779               LO          H, [IX+FCB_POINTER+1]
      E762    ES                   3780               PUSH        HL
      E763    FDE1                 3781               PoP         IY                       sft!
                                   3782
      E765    FD7EOC               3783               LD          A,{IY+DIR_ATTR]          ;GET   THE  ATTRIBUTE      BYTE   FOR   THIS   ENTRY
      E768    4F                   3784               LO          C,A                      ;SAVE   IT  HERE    FOR  NOW
      E769    CB47                 3785               BIT         ATTR_HOLE     BIT,A      ; CHECK    IF  HOLE
      E768    C2E807               3786               JP          NZ,  FOUND  _HOLE         ;BRANCH    IF   IT‘S   A  HOLE!!!    << ewereaxaz
                                   3787
      E76E    DDCB   186E         3788                BIT         MODE  REMAINDER      BIT,[IX+FCB_MODE]            ;  DO  WE   ALLOCATE     REST   OF   TAPE?
      E772    2037                 3789               JR          NZ,0_FILE                ; YUP,   DON’T    BOTHER    CHECKING
                                   3790
      E774    CB51                 3791               BIT         ATTR_DEL_BIT,C           ;IS  IT  A  DELETED     FILE?
      E776    2824                 3792               JR          Z, ACTIVE    FILE        ;NOPE,   AN   ACTIVE   ONE
                                   3793
                                   3794               LET’S     LOOK   FOR   DELETED     FILE   TO  USE
                                   3795
      E778    FDGE  11             3796               LD          L.{1¥+DIR_MAX_LENGTH]               ;  GET   ALLOCATED     SIZE
      E77B    FD6612               3797               LD          H, [IY+DIR_MAX_LENGTH#1]
                                   3798
      E77E    EDSBFEOC             3799               LD          DE,  [BLOCKS   REQ]                 ;  MIN  NO  OF   BLOCKS    NEEDED
      E782    87                   3800               OR          A                                   ;clear    carry    flag
      E783    ED52                 3801               SBC         HL ,DE                              ;  WILL   WE  FIT?)
      E785    3824                 3802               JR          C.D  FILE                           ;  NOPE,   LOOK    FOR  ANOTHER     ENTRY
                                   3803
      E787    21FODB               3804               iD          HL ,FOUND   AVAIL    _ENTRY         .  FLAG   BYTE
      E78A    CB46                 3805               BIT         FOUND_ENTRY,      [HL]              ;  DO  WE  ALREADY     HAVE   FIRST    FIT?
      E78C    201D                 3806               JR          NZ,D_FILE                              YUP,   DON’T    EVEN   CONSIDER     THIS   ONE
                                   3807
      E78E    CBC6                 3808               SET         FOUND    ENTRY,   [HL  ]
      E790    DDSE   19            3809               LD          —,[1X+FCB     BLOCK]                ;GIT   BLOCK   NO   OF  THIS   DIRECTORY
      E793    DDS61iA              3810               iGas?       DO,(1X+FCB    BLOCK+1}
                          3811
    E796  EDS3FDD9        3812            LD        {[OIR_BLOCK_NO]),DE         ; SAVE  IT
    E79A   180F           3813            JR       0FILE
                          3814
                          3815
                          3816   ; IF THIS  IS  A REAL FILE,  WE  CAN  SEE  IF  ITS NAME MATCHES    THE
                          3817   ; ONE  WE ARE  ABOUT TO MAKE   --  IT’S AN  ERROR  IF SO.
                          3818
    E79C                  3819   ACTIVE_FILE:
    E79C  DDSE21          3820            LD       E,[IX+FCB_ POINTER]    ;POINT TO  THIS  ENTRY
    E79F  005622          3821            LD       OD(IX+FCB_POINTER+1]
    E7A2  2AFE10          3822            LD       HL,[USER_NAME)     ;POINT  TO DESIRED  NAME
    E7A5  CDFO54          3823            CALL                        ;COMPARE  THE  BASE OF  THE   FILENAMES
    E7A8  CAE996          3824            UP       Z,FILE_EXISTS      ;BRANCH   IFTHEY’RE   THE  SAME
    E7A8                  3825   DFILE
    E7AB  109F            3826            DUNZ   = NEXT_ENT           ;ELSE  GO TO NEXT  ENTRY   (IF  IT  EXISTS)
                          9827                                                                                   |
    E7AD  2AFEO8          3828            LO       HL,(BUF_START]     ;IF NOT  RESET  FCB  FOR NEXT   BLOCK
    E780  007521          3829            LD       (IX+FCB_POINTER),L
    E7B3  007422          3830            LD       [IX+FCB_POINTER+1),H
    E7B6  003419          3831            INC      [IX+FCB_BLOCK)     ;INC  THE BLOCK  -- NO  CARRY   OUT
                          3832
                          3833   ; DO 4-BYTE   COMPARE OF FCB BLOCK    VS FCB_LAST  BLOCK   TO SEE
                          3834   ; IF THERE’S   MORE FILE LEFT.
                          3835
    E789  DD7E20          3836            LD       A,[IX+FCB_LAST_BLOCK+3]      ;COMPARE MS  BYTES
    E7BC  ODBE 1C         3837            cP       [IX+FCB_BLOCK+3]
    E7BF  DAE7FD          3838            uP       C,FULL_DIR          ;BRANCH  IF BLOCK   IS LARGER
    E7C2  OD7E1F          3839            LD       A,[IX+FCB_LAST_BLOCK+2]     ;COMPARE  NEXT  BYTES
    E7C5  DDBE1B     .    3840            cP       [IX+FCB_BLOCK+2]}
    E7C8  DAE7FD          3841            JP       C,FULL_DIR          ;BRANCH  IF BLOCK   IS LARGER
    E7CB  DO7E1E          3842            LO       A,[IX+FCB_LAST_BLOCK+1}     ;COMPARE  NEXT  BYTES
    E7CE  DDBE1A          3843            cP       (IX+FCB_BLOCK+1)
    E7D1  DAE7FD          3844            uP       C,FULL_DIR-         ;BRANCH  IF BLOCK  IS  LARGER
    E7D4  DD7E1D          3845            i)       A,[IX+FCB_LAST_BLOCK+0]     ;COMPARE  LS  BYTES
    E707  DDBE19          3846            cP       [1X+FCB_BLOCK+0]
    E7DA  DAE7FD          3847            uP       C,FULL_DIR          ;BRANCH  IF BLOCK  IS  LARGER
                          3848   ; IF WE  FALL  OUT, FCB_BLOCK  <=  FCB_LAST  BLOCK.
    €700                  3849   DOREAD  AGAIN:
                          3850
    E7DD  OD7E17          3851            LD       A,{IX+FCB_DEVICE]    ;SET  UP THE  PARAMETERS
    E7EO  DDG6E21         3852            LD       L,[IX+FCB_POINTER]
    E7E3  DD6622          3853            LD       H,[IX+FCB_POINTER+1)
    E7E6  DDSE19          3854            LD       E,{IX+FCB_BLOCK]
    E7E9  DDS61A          3855            LO       D,[1X+FCB_BLOCK+1]
    E7EC  DD4E18          3856            LD       C,{IX+FCB_BLOCK+2)
    E7EF  DD461C          3857            LO       B,[IX+FCB_BLOCK+3]
    E7F2  COF17B          3858            CALL     READ_BLOCK         ;AND READ  THE  NEXT BLOCK   OF  ENTRIES
    E7F5  C2E989          3859            uP       NZ,MAKE_ERROR             ; NOPE,  A REAL  ERROR
                          3860
    E7F8                  3861   NOTIMEOUT:
    E7F8  0627            3862            LD       B,ENTPER  BLOCK    ;SET  THE ENTRY  COUNTER
    E7FA  C3E75C          3863            UP       CHECK_ENT          ;AND GO  CHECK  THE NEW  ENTRY
                          3864
    E7FD                  3865   FULLDIR:
    E7FD  21FDDB          3866            LO       HL,FOUND AVAIL  _ENTRY
    E800     §            3867            BIT      FOUND_ENTRY,  [HL]               ‘E WE FOUND   AN  ENTRY?
              E802  CAEQ9A          3868            uP         Z,FULL_DIR_EXIT                 ; NOPE,  EXIT
              E805  1807            3869       |    JR         USE_ENTRY                       ; YUP,  CREATE   NEW   ENTRY    THERE
                                    3870
                                    3871  ; ARRIVE   HERE   WHEN  WE’VE   FOUND   THE  HOLE   ENTRY   IN  THE  OIRECTORY.
                                    3872  ; IV  IS  STILL   POINTING   TO  THE  ENTRY    IN  THE  BUFFER.
                                    3873
              E807                  3874  FOUND_HOLE                                    |
              E807  21FDD8          3875            LD         HL,FOUND  _AVAIL_ENTRY          |
              ESOA  CB46            3876            BIT        FOUND ENTRY,   [HL]             ; HAVE  WE  FOUND    A DELETED     ENTRY   WE  COULD  USE?
              ESOC  2864            3877            JR         Z,USE_HOLE                      ; NOPE,  STICK    IT  IN  THE   END
                                    3678
              EBOE                  3879  USE ENTRY:
              EGOE  CBS6            3880            RES        FOUND_ENTRY,   [HL }            ; RESET  FOR   NEXT   TIME
                                    3881
              E810  DDGE19          3882            LO         L,(1X+FCB_BLOCK]                ; GET THE   CURRENT    BLOCK                                                             '
              E813  DDGGIA          3883            LD         H,[IX+FCB_BLOCK+   1]                                                                            |
                                    3884
              E816  EDSBFOD9        3885            LD         DE,(OIR_BLOCK_NO]               ; BLOCK  NO  WHERE    WE  HAVE   ENTRY    TO  USE
              EStA  87              3886            OR         A                               ;Clear  carry   flag
              E@1B  ED62            3887            SBC        HL,DE                           ; SAME  BLOCK?
                                    3688
              E81D  2AFEOS          3689            LD         HL,[BUF  START]                 ; POINT  TO  START    OF  BLOCK
              E820  0076521         3890            LD         {IX¢FCB_ POINTER)   .L
.             E623  007422          3891            Lo         (IX+FCB_POINTERt1).H
          |                         3892                          )
              E826  2624            3893            JR         Z,GOT_BLOCK                   ; YUP,  DON’T    NEED   TO  READ   IN   ANOTHER   BLOCK
                                    3894
              E828  007319          3895            LD         {IX+FCB_BLOCK],E               ;  GET THIS   BLOCK
              E828  DO721A          3896            LD         {IX+FCB_BLOCK+1)   ,D
                                    3897
              E82E  010000          3698            Lo         BC,O
              E831  DO7E17          3899            LD         A,[IX+FCB_DEVICE    ]          ;  DEVICE  ID
                                    3900
              E834  COF178          3901            CALL       READ_BLOCK
              E837  C2E9869         3902            JP         NZ,MAKE ERROR
              EB3A  1810            3903            JR         GOT_BLOCK                      ;  READ  IN  NEW  DIRECTORY
                                    3904
              E83C                  3905  NEXT_DIR:
              E83C                  3906  TOOSMALL:
              E83C  DDG6E21         3907            LO         L,[IX+FCB_POINTER]             ;  GET POINTER    TO  DIR   ENTRY
              ES3F  006622          3908            LO         H,(IX¢FCB_POINTER+1]
                                    3909                               |
              E842  11001A          3910            LO         DE,OIR_ENT_LENGTH              ;  LENGTH  OF   ENTRY
                                    3911
              E845  19              3912            ADD        HL,DE                          ;  POINT  TO  NEXT   ENTRY
                                    3913
              E846  007521          3914            LD         {IX+FCB_POINTER),L
              E849  007422          3915            LD         [1X+FCB_POINTER+1),H
                                    3916
              E84C                  3917  GOTBLOCK:
              EG4C  E5              3918            PUSH       HL
              E84D  FOE1            3919            pop        ly
                                    3920
              EB4F  FOCBOC56        3921            BIT        ATTRDEL   BIT, [1Y+#DIR   ATIR)          ;  IS  IT  DELETED?
              E853  26E£7           3922            UR         Z,NEXT_DIR                               ; NOPE,    LOOK   FOR   ANOTHER   DLETED    ENTRY
                                    3923
              E855  FO6E11          3924            LO         L,({1Y+DIR MAX  LENGTH]                  - GET   ALLOCATED     AMOUNT    OF  DELETED   File
    E858  FDGG612         3925             LO        H,(1Y+DIR_MAX_LENGTH+      1}
                          3926
    E8S8  EDSBFEOC        3927             LO        DE, (BLOCKS  REQ)                          ; MIN   AMOUNT    NEEDED
                          3928
    EGSF  ES              3929             PUSH      HL
    E660  87              3930             OR        &                                          ;Clear  carry    flag
    E861  ED52            3931             SBC       HL ,DE                                     ; WILL   IT  FIT?
    E863  £1              3932             PoP       HL
                          3933
    E864  3806            3934             JR        C,TOO_SMALL                                ; NOPE,   TRY  ANOTHER    ONE
                          3935
    E866  22FEOC          3936             Lo        [BLOCKS  REQ),  HL                          ; FORCE   ALLOCATED     AMOUNT
                          3937
    E869  CDESEF          3938             CALL      LOAD_NEW_ENTRY_INFO
                          3939                                                                                                                                                    '
    ES6C  C2E989          3940             JP        NZ,MAKE  ERROR
                          3941
    EGGF  C3E971          3942             uP        TIME_TO_WRITE
                          3943
                          3944   ; COMPARE    FCB_BLOCK   TO  FCB LAST   BLOCK.     GO   TO MORE  BLOCKS
                          3945   ; IF  FCB _LAST  BLOCK   > FCB BLOCK.
                          3946
    E872                  3947   USE_HOLE:
    E872  OO7EIC          3948             LO        A,( IX+FCB_BLOCK+3}
    E676  DOBE20          3949             cP        [IX+FCB_LAST_BLOCK+3]
    E678  3B61E           3950             JR        C,MORE  BLOCKS
    E87A  OD7E18          3951             LD        A,[IX*FCB_BLOCK+2]}
    E870  DDBE iF         3952             cP        [IX+FCB_  LAST  BLOCK+2)
    E88O  3816            3953             JR        C,MORE_BLOCKS
    E882  DOTEIA          3954             LD        A,[IX*FCB_BLOCK+    1)
    E885  DDBE IE         3955             cP        [IX*FCB_LAST_BLOCK+1)
    E888  380E            3956             JR        C,MORE_BLOCKS
    E88A  0D7E19          3957             LO        A,[IX+FCB_  BLOCK]
    E88D  DDBE 10         3958             cP         IX*FCB_LAST_BLOCK)
    E890  38606           3959             UR        C,MORE  BLOCKS
                          3960           |
                          3961   ; FALL   THROUGH   IF THIS   IS  THE  LAST   BLOCK  OF   THE  FILE.
                       ~  9962
    E892  78              3963             LO        A.B                  ;LOOK   AT ENTRY   COUNTER
    E893  FEO!            3964             cP        1
    E895  CAE99E          3965             JP        2,TAPE_FULL          ;ERROR   IF  NO  ENTRIES   LEFT   VACANT
                          3966
    Eaos                  3967   MORE BLOCKS
    Eaes  FOGE11          3968             LD        L,[1Y¥+DIR_MAX_LENGTH]       ;GET  THE  SIZE   OF  THE  HOLE
    E89B  FDG612          3969             LO        H,[1¥+DIR_MAX_LENGTH+1)
                          3970
    ES89E DDCB186E        3971             BIT       MODE _REMAINOER_BIT,[IX+FCB_       MODE)     ; NEED   TO  ALLOCATE    REST   OF TAPE?
    E8A2  280C            3972             UR        2,CHECK_HOLE   SIZE                          ; NOPE
                          3973
    EBA4  7C              3974             LO        AH                            ; YUP,   CHECK   IF  THERE   ARE  ANY  BLOCKS    LEFT
    E8A5  B5              3975             OR        L
    EBAG  CAEQ9E          3976             JP        2,TAPE _FULL                  ; TAPE   FULL
                          3977
    EBAQ9 22FEOC          3978             LD        [BLOCKS  REQ]).HL             ; NOT   FULL,  REQUEST    REST   OF  TAPE
    EBAC  DOCBIBAE        3979             RES       MODE REMAINDER    BIT,{IX+tFCB    MODE]
                          3980
    EaBo                  3981  CHECK_HOLE   SIZE:
    E68BO EDSBFEOC       3982            Lo        DE, {BLOCKS  REQ]    ;GET  THE  REQUESTED    SIZE
    E884  87             3983            OR        A
    E8BS  ED52           3984            SBC       HL ,DE               -COMPARE   THEM
    E8B7  DAESSE         3985            JP        C,TAPE  FULL         ;BRANCH   IF  THE  HOLE   IS  TOO  SMALL
    EBBA  22FEIA         3986            LD        (NEW HOLE  SIZE),HL      ;ELSE  SAVE   THE  RESULT
                         3987
                         3988
                         3989   ; ADD BLOCKS  REQ   TO DIR_START    BLOCK    TO  FIND  THE  HOLE‘S    NEW
                         3990   ; START  BLOCK.    NOTICE  HOW   STOOOPID    THE  Z80  IS  WITH   ADDITION!
    E8BD  21FEOC         3991            LO        HL ,BLOCKS REQ      ;POINT    TO THE  NUMBER    TO  ADD
    EBCO  FO7EO0D        3992            LO        A,[IY¥+DIR_START_BLOCK)
    E8C3  86             3993      :     ADD       A,[HL]
    E8C4  23             3994            INC       HL
    ESCS  32FE16         3995            LD        (NEW_HOLE  START],A
    E8C8  FD7EOE         3996             )        A,{IV+DIR_START_BLOCK+1)                                                                                                ‘
    ESCB  BE         -   9997            ADC       A,(HL)
    EBCC  23             3998            INC       HL
    E8CD  32FE17         3999            LD        (NEW _HOLE START+1],A
    E8DO  FO7EOF         4000            LD        A,(IY+DIR_START_BLOCK+2]
    E8D3  BE             4001            ADC       A,{HL]
    E804  23             4002            INC       HL
    E805  32FE18         4003            LO        (NEW_HOLE  START+2],A
    E808  FD7E10         4004            LD        A,[IY#DIR_START_BLOCK+3]
    E808  SE             4005      .     ADC       A,(HL)
    EsDC  23             4006            INC       HL
    E8DD  32FE19         4007            LO        (NEW HOLE  START+3],A
       :                 4008
    ESEO  C5             4009            PUSH      BC                  ;SAVE   ENTRY   COUNT   (IN  B)
                         4010                )
    EBE1  CDESBF         4011            CALL      LOAD_NEW_ENTRY_INFO
                         4012
    ESE4  Ci             4013            POP       BC                  ;RESTORE    ENTRY   COUNT
                         4014
    ESES  C2E989         4015            uP        NZ,MAKE  ERROR
                         4016
    ESE8  DDGE21         4017            i)        L,(IX+FCB_POINTER)      ;GET   CURRENT   POINTER
                         4018
                         4019
    ESEB  0D6622         4020            LO        H,[1X+FCB_POINTER+1]
    EBEE  11001A         4021            LO        DE,OIR_ENT_LENGTH      ;GET  LENGTH   OF  AN  ENTRY
    ESF1  19             4022            ADD       HL,DE               ;ADVANCE    POINTER   TO  NEXT   ENTRY
    E6F2  007521         4023            LO        [IX+¢FCB_POINTER],L     ;AND   SAVE  IT  AGAIN
    E8FS  007422         4024            LO        [I1X+FCB_POINTER+1),H
                         4025
    E8FS  1044           4026            DUNZ      NOT_END             ;UUMP   IF  THERE  ARE   MORE   ENTRIES
                         4027
                         4028   ;THIS LABEL  NOT   USED  IN THIS   ROUTINE,    NOT  DECLARED    GLOBAL
                         4029   ;REMOVED  BECAUSE   IT CONFLICTS    WITH   IDENTICAL    LABEL   ELSEWHERE
                         4030   ;WRITE_AGAIN:
    ESFA  DD7VE17        4031            LD        A,{IX+FCB_ DEVICE]    ;GET   PARAMETERS    FROM   FCB
    E8FD  2AFEOS         4032            LD        HL,(BUF START]
    E900  DDSE19         4033            Lo        E,[1X+FCB_ BLOCK)
    E903  DDS61A         4034            LD        D,[1X+FCB_BLOCK+1]
    E906  DD4E1B         4035            LD        C,[1X+FCB_  BLOCK+2}
    E909  DD461C         4036            LD        B,[1X+FCB_  BLOCK+3}
                         4037
    ESOC  CDF1E6         4033            CALL      WRITE BLOCK
                         4039
    ESOF  C2E989         4040           uP         NZ,MAKE_ERROR                              ;NOPE,    A REAL  LIVE    ERROR
                         4041
                         4042
    E912                 4043  RESET THE POINTER:
    E912  2AFEOS         4044           LO         HL, [BUF_START]    ;RESET   THE  POINTER
    E915  007521         4045           LD         [IX¢FCB_POINTER],L
    E918  007422         4046           LD         [ IX+FCB_POINTER+1].H
                         4047
    E91B  003419         4048           INC        (IX¢FCB_BLOCK)      ;INC   BLOCK   -- NO  CARRY  OUT
                         4049
    ES1E                 4050  TIMEOUT_IN_READ:
    E91E  DO7E17         4051           LO         A,[IX+FCB_DEVICE]      ;GET  PARAMETERS    FROM   FCB
    E921  DDGE21         4052           LD         L,( IX+FCB_POINTER)
    E924  006622         4053           LD         H,(IX+FCB_POINTER+1)                                                                                                           '
    E927  DOSE19         4054           LD         E,(IX+FCB_BLOCK])                        |
    E92A  DOSGIA         4055           LD         DO[IX+FCB_BLOCK+1]
    E92D  DD4E18         4056           LD         C,[ IX+FCB_BLOCK+2]
    E930  0D461C         4057           LD         8B[IX+FCB_BLOCK+3]
    E933  CDF17B         4058           CALL       READ BLOCK          ;AND   READ  THE  NEXT  BLOCK
                         4059
    E936  2051           4060           UR         NZ,MAKE_ERROR           ;  NOPE,  ERRORIIIII!
                         4061
     |                   4062
    E938  DDGE21         4063           LO         L,({IX*FCB_POINTER]     ;GET  POINTER    INTO  IY  THE   LONG WAY
    E938  006622         4062           i)         H,[IX+FCB_POINTER+    1]
                         4065
    E93E                 4066  NOT_END:
    EQ3E  £5             4067           PUSH       HL
    EQ3F  FDE1           4068           PoP        IY                  stat
          °              4069                .
                         4070  *
                         4071  *  STILL  TRYING    TO CALC  THE  NEW   START   ADOR
                         4072  =                    .
    E941  2AFEIA         4073           LO         HL,[NEW _HOLE SIZE)
    E944  FD7S11         4074           LD    =——t—i‘4DL:TR_MMAX_LLENGGTH]  LL            ;  BLOCKS   LEFT   ON TAPE
    E947  FD7412         4075           LD         [1¥*DIR_MAX_LENGTH+1],H
               :         4076
    EQ4A  3AFE16         4077           LD         A,(NEW_HOLE  START]
    E94D  FD7700         4078           LD         (I1¥*DIR_START_BLOCK),A
    E950  3AFE17         4079           LD         A,(NEW_HOLE  START+1)
    E953  FD770E         4080           LO         [1¥*DIR_START_BLOCK+1],A
    E956  3AFE18         4081           LD         A,(NEW HOLE  START+2)
    E959  FO770F         4082           LO         [1¥Y¢DIR_START_BLOCK+2],A
    E9SC  3AFE19         4083           LD         A.(NEW_HOLE  START+3]
    E9SF  FO7710         4084           LD         [1¥+DIR_ START  BLOCK+3],A
                         4085
    E962  FD360C01       4086           LD         [1¥*DIR_ATTR),ATTR_HOLE                  ; SET  HOLE   UP
                         4087
    E966  FDES           4088           PUSH       LY
    E968  D1             4089           POP        DE
                         4090
    E969  21F428         4091           LD         HL,HOLE FILE  NAME
    E96C  01000C         4092           LO         BC,12
    E96F  EDBO           4093           LDIR
                         4094
    E971                 4095  TIMETO  WRITE:
     E971   DO7E17          4096            LO        A,[IX+FCB  DEVICE)     ;GET PARAMETERS  FROM  FCB
     E974   2AFEOS          4097            LO       Hi,  (BUF START)
     E977   DOSE19          4098            LO        E,(IX+FCB_BLOCK   }
     E97A   ODSGIA          4099            LD       0, [1X+FCB_BLOCK+   1)
     E970   DD4E 16         4100            LO       C,[1X+FCB_BLOCK+2)
     E960  00461C           4101            LO        8B[IX+FCB_BLOCK+3]}
     E983   COFIEG          4102            CALL     WRITE  _BLOCK        ;WRITE  THE BLOCK OUT
                            4103
     E9866  2001            4104            JR       NZ, MAKE ERROR           ; IT’S A BOO BOO! !
:    E988   AF              4106            XOR      &                    ;SHOW NO  ERROR
                            4106
     E989                   4107  LETS  _GET_OuT:
     E989                   4106  MAKE ERROR:
                            4109                                          ;RESTORE  THE REGISTERS
     E969  87               4110            OR       a                                                                                                             ‘
     E9BA  Ci               4tit            PoP      BC
     E988  D1               4112            POP      DE
     E9SC   E1          —   «4193           PoP      HL
     E98D  DDE I            4114            POP      Ix
     ESGF  FDE1             41165           PoP       ry
     E991  Ce               6-416           RET
     E992                   4118  TOO BIG
     E982  3£08      .      4119            LO       A,TOO  BIG  ERR      ;SHOW AN  ERROR
     E994   18F3            4120            JR       MAKE ERROR
                            4121
                            4122
     E996                   4123  FILE_EXISTS
     E996  3E06             4124            LO       A,FILE_ EXISTS   ERR
     E988   1GEF            41265           JR       MAKE ERROR
                            4126
     cBBA                   4127  FULL_DIR_EXIT:
     ESSA  3EOC             4126            LO       A,FULL_DIR_ERR
     ESOC   18EB            4129            JR       MAKE ERROR
                            4130
     ESE         .          4131  TAPE _FULL
     ESSE  3E0D             4132            LO       A,FULL_TAPE_ERR
     ESAO   18E7            4133            JR       MAKE ERROR
                            4134  «+
                            4135  ¢
                            4136  *    SUBROUTINE   NAME:  GET  FILE   NAME  LENGTH
                            4137  *
                            4138  «      ENTRY:   HL- POINTS   TO  TEXT  STRING
                            4139  *      EXIT:    Z=1=FOUND   AND  PROPER   SIZE  (1-12)
                            4140  *                 BC=BYTE   COUNT
                            4141                    A=TRASHED
                            4142  *
                            4143  *               Z=O=ERROR
                            4144  *                 BC=TRASH
                            4145  »                 A=FILE  NAME  _TOO LONG
                            4146  * DLS(8/28/83)
                            4147  *
     E9A2                   4148  GET FILE  NM_LEN:
     E9A2  E5               4149                     PUSH       HL                         ;SAVE  THE POINTER  TO  FILE NAME
     E9A3  O6OC             4150                     LO         B,12                       ;SCAN  UP TO 12 BYTE
     E9A5  O£0!             4151                     LD         C,1                        ;SET COUNT  TO 1
     ESAT                   4152  SRCH LOOP:
    EQA7  7E              4153                     LD        a,{HL]                     ;GET FN(1)
    E9A8  FEO3            4154 -                   cP        03                         SETX
    EQAA  2809            4155                     UR        2,GOT_IT
                          4156  *
    E9AC  OC              4157                     INC       c
    E9AD  23              4158                     INC       HL                         ;ADVANCE POINTER  TO FILE  NAME  STRING
    EQAE   10F7           4159                     DUNZ      SRCH_LOOP
                          4160  ¢
    E9B0                  4161  ERR_GFN
    E9BO  3E0E            4162                     LD        A,FILE_NM_ERR
    E982  87              4162                     OR        A                          ;SHOW ERROR
    E983  E1              4164                     Pop       HL                      |
   £984   C9              4165                     RET
                          4166  *
    Fees                  4167 GOT_IT
    E985  79              4168                     LD        A.C
    E986  FEO!            4169                     cP        1                          ;ETX ALONE  IS NOT VALID
    E988  26F6            4170                     UR        2,ERR_GFN
    E9BA  0600            4171                     LO        8,0
    E9BC  AF              4172,                    XOR       A                          ;SHOW OK
    EQGD  £1              4173                    pop        HL
    E9BE  CO              4174                    RET
                          4175
                         4176
                              4178
      ESBF                    4179    LOAD  NEW  _ENTRY_INFO:
      ESBF   FOES             4180               PUSH         IY                      ;GET   NAME   ADORESS     INTO    DE
     E9Ci    Di               4181               PoP          DE
                              4182
     E9C2    2AFE10           4183               LD          HL,[USER_    NAME]       ;GET   USER’S    STRING    ADDRESS
                              4184    «
     E9CS    CDE9A2           4185               CALL                                 ; DLS(8/28/83)
     ESC     C2ESFF           4186               uP          NZ,  MAKE  ERR   1
                              4187    *
     E9CB    EDBO             4188               LOIR                                 ;COPY   USER’S    NAME    INTO   DIR   ENTRY
                              4189
     E9CD    3E10             4190               LO          A,ATTR_USER              ;SET   THE  DEFAULT     ATTRIBUTE
     E9CF    FD770C           4191               LD           [1Y+OIR_ATTR),A
                              4192              |                                                                                                                                                       é
     E902    ED4BFEOC         4193               LO          BC,  (BLOCKS   REQ]       ;GET   NEW   FILE’S    MAX   SIZE
     E906    FD7111           4194               LO           {I¥+DIR_MAX_LENGTH),C           ;PUT   INTO    DIR
     E909    FO7012—i(s‘«C    195                LD           [1Y¥*DIR_MAX_LENGTH+1],8
                              4196,
                              4197
     E90C    FD361301         4198               LD           {1¥+DIR_USED_LENGTH],1            ;INIT   COUNT    OF   BLOCKS    USED
     E9EO    FD361400         4199               LD           [1¥*DIR_USED_LENGTHt1],0
                os            4200
     E9E4    FD361500         4201               LO          (I¥+DIR_LAST_COUNT],O              ;INIT   BYTECOUNT      IN   LAST   BLOCK
  .  E9EB    FD361600         4202               LD          (1 ¥*#DIR_LAST_COUNT+1]},0
     |              |         4203                |
     ESEC    3AFDEO           4204               LD          A. [EOS  YEAR]           >INSERT    THE   DATE
     ESEF    FDO7717          4205               LO          (IV+DIR_VEAR],A
     ESF2    3AFDE1           4206               LD          A, {EOS  MONTH]
     E9FS    FD7718           4207               ‘LO         (1¥*#DIR_  MONTH)    ,A
     ESFS    3AFDE2           4208               LD          A, [EOS  DAY)
     E9FB    FD7719           4209               LD          [1V¥+DIR_DAY],A
                              4210
     EQFE    AF               4211.                          A
                    |         4212
     EFF                      4213    MAKE  _ERR_1:
     ESFF    C9               4214               RET
                         -    4215
                              4216    ;
                              4217    ;SSSSSSSKSSHSSSSKSSSCSSSCESSSSSSSREKSTERSETS              SE SSRRSTRARRERRERESEREERTC         EEE
                              4218    ,SSSSSSSSHTESSSSSESTTSSSSSSHTESSSSSSSSE               SESE  SERS   SRESKEERREERRETEBERKE
                              4219    ,BESSSKSSESESSSSSEESSSSHESCHSSSTCRERSEESTCE             ESRC ERSSRERREREREBRESEESEREBEE
                              4220    ;
                             4221
                             4223             ;GLB       _  OPEN  FILE,    CLOSE    FILE,    RESET     FILE
                             4224             SEXT       FCB_HEAD_ADOR,FCB_DATA_ADOR
                             4225             SEXT       BUF START,    FMGR  DIR_ENT
                             4226             SEXT       __QUERY_   FILE,  MODE  CHECK   ,READ   BLOCK,    WRITE  BLOCK
                             4227             ,EXT       __SET_FILE
                             4228             sEXT       FILE   NAME  ADDR
                             4229
                             4290    Brrr                rrr                    tr  rr terre     reer  ern  reer rennet  e rene
                             4231    ;
                             4232    ;  _ OPEN_FILE    --  Sets   up  an  FCB  for   the   caller    to   access    a file.
                             4233    ;
                             4234    ;  CALLING  PARAMETERS:      device   number    in  A;   address    of   name   string
                             4235    ;                    in HL;   mode   in  6.
                             4236    ;
                             4237    ;  EXIT  PARAMETERS:     if no   error   --  Z  =  1;  A  =  file   number                                                                                      '
                             4238    ;                        if error    --  2  = 0;   A  =  error   code;    8  =  junk
                             4239    ;
                             AQ4O    Brrr rrr                            tr   rrr    rr grrr  rrr   rts   terres  erent   eee
                             4241
                             4242    ;  NEXT_FCB   CHANGED   TO  O NEXT   _FCB   TO  PREVENT    CONFLICT      WITH
                             4243    ;  IDENTICAL    LABEL  ELSEWHERE
                             4244
     EAOO                    4245    _OPEN_FILE
     EAOO   FDES.            4246              PUSH      ly                    ;SAVE    REGISTERS
     €A02   ES               4247              PUSH      HL
     EAO3   DDES             4248              PUSH      Ix
     EAOS   0S               424%              PUSH      DE
                             4250
     EAOS   FS               4251              PUSH      AF                    ;SAVE   DEVICE     NUMBER
     EAO7   CS               4282              PUSH      BC                    ;SAVE   MODE
                             4253
                             4254    ;  FIRST,  WE  HAVE  TO   LOCATE   A  FREE   FCB.
     EAO@   DD2AFDOFO        4258              LO        IX, (FCB_HEAD_ADOR)        ;GET  POINTER     TO   FIRST   FCB’S   HEAD
     EAOC   110023           4256              LD        DE .FCB_LENGTH
     EAOF   0D19             4257              ADD       IX ,DE                ;  SKIP   OVER   IT   --  BELONGS     TO  SYSTEM
                             4258
     EA11   FD2AFOFF         4259              LO        I¥,[FCB_DATA_ADDR}        ;:GET  POINTER     TO   FIRST   FCB’S   BODY
     EA1S   110400           4260              LO        DE ,1024
     EA1I8  FD19             4261              ADO       IY .DE                ;  SKIP   OVER   IT   TOO
                             4262
     EA1IA  0601             4263              LD        Bi                    ;SET   FCB   NUMBER
     EAIC                    4264    O_NEXT FCB
     EAIC   DOTE1&8          4265              LO        A, {IX+FCB_   MODE]   ;GET   THE   MODE   BYTE    FROM   FCB
     EAIF   87               4266              OR        A                     ;CHECK    IT
     EA20   281C             4267              JR        Z,GOT_ONE             ;BRANCH     IF  THIS   ONE   IS  FREE
                             4268
     EA22   110023           4269              LO        DE,FCB_LENGTH         ;ELSE     SKIP   OVER    IT
     EA25   DD19             4270              ADO       1X ,DE
     EA27   110400           4271              LO        DE, 1024
     EA2A   FD19             4272              ADD       IY ,DE
                             4273
     EA2C   04               4274              INC       8                     -INC   THE   FCB  NUMBER
     EA2D   78               4275              LO        A.B
     EA2E   FEOS             4276              cP        NUM FCBS              SARE   THERE    MORE   FCBS   TO  CHECK?
     EA30   36EA             4277              JR        C.0 NEXT   FCB        ;LOOP   UNTIL    WE’VE    SEEM   THEM   Ait
     EA22                    4278    NO _FCBS                :
     EA32                    4279              pap       BC                    RESTORE      RP    §
    EA33   Fi            4280          POP       AF
    EA34  D1             4281          POP       DE
    EA3S  DDE1           4282          POP        IX
    EA37  E1             4283          PoP       HL
    EA38  FDE1           4284          POP        ly
                         4285
    EA3A  3E07           4286          LD        A,NO_FCB_ERR      ;SET  THE ERROR CODE
    EA3C  B87            4287          OR        A                 ;SET  THE CONDITIONS
    EA3D  C9             4268          RET
              |          4289
    EASE                 4290  GOT_ON
    EASE  FD22FEO8       4291      .   LD        (BUF_START],IY    ;SAVE  THE FCB BUFFER’S  ADDRESS
                         4292
    EA42  Fi             4293          POP       AF                ;GET THE  MODE
    EA43  0D7718         4294          LO        (IX+FCB_MODE},A   ;PUT  IT INTO FCB                                                                       '
    EA46  Fi             4295          POP       AF                ;GET THE  DEVICE
    EA47  007717         4296          LO        {IX+FCB_DEVICE].A    ;PUT IT INTO FCB
                         4297
    EA4A  CS             4298          PUSH      BC         |      ;SAVE  THE FCB NUMBER
                         4299
    EA4B  E5             4300          PUSH      HL
    EA4C  D1             4301          POP       DE                ; ADDRESS  OF NAME STRING
       .                 4302                            |
    EA4D  DDES           4303          PUSH      IX                ;POINT  TO FCB NAME (ASSUME  OFFSET  =  0)
    EA4F  E1             4304          POP       HL
    EASO  DO7E17         4305          LO        A,[IX+FCB_DEVICE]   ;GET  DEVICE NUMBER
    EAS3  CDEG1B         4306          CALL      __QUERYFILE       ;GET THE  FILE’S DIR  ENTRY
    EASG  C2EAFS         4307          JP        NZ,OP_ERR         ;BRANCH  IF THERE WAS  AN ERROR
                         4308                                      ;#** SET  PARAMS ees
    EASS  COFODS         4309          CALL      MODECHECK         ;SEE IF  MODE MATCHES  ATTRIBUTES
    EASC  C2EAFS         4310          JP        NZ,OP_ERR         ;BRANCH  IF NOT
                         4311
    EASF  DO7E13         4312          LD        A,(IX+FCB_USED_ LENGTH]    ;CALC. & SET  LAST BLOCK
    EA62  DO8600         4313          ADD       A,[IX+FCB_FIRST BLOCK)
    EA6S  0D7710         4314          LO        [IX+FCB_LAST BLOCK]),A
    EAGB  DOTEOE         4315          LD        A,(IX+FCB_FIRST  BLOCK+1)
    EAGE  DDSE14         4316          ADC       A,(IX+FCB_USED LENGTH+t1]
    EAGE  DO771E         4317          LO        (IX+FCB_LAST BLOCK+1],A
    EA71  OD7EOF         4318          LD        A,[IX+FCB_FIRST BLOCK+2]
    EA74  CEOO           4319          ADC       A,O     |
    EA76  DD771F         4320          LD        [IX+FCB_LAST_BLOCK+2),A
    EA79  DOJVE10       4321           LD        A.(IX+FCB_FIRST_BLOCK+3}]
    EA7C  CEOO           4322          ADC       A,O
    EA7TE 007720         4323          LD        [IX+FCB_LAST BLOCK+3],A
                         4324
    EA81  DD7E10        4325           LO        A,[IX+FCBLAST  BLOCK+tO]
    EAB4  DEO!           4326          SUB       1
    EAB86 DD771D        4327           LO        {IX+FCB_LAST BLOCK+O],A
                        4328
    EA89  DO7TIE        4329           LD        A,[IX+FCB_LAST BLOCK+i]
    EABC  DEOO          4330           SBC       A,O
    EABE  DO77I1E       4331           LD        [IX+FCB_LAST BLOCKti],A
                        4332
    EA91  DOTEIF        4333           iD        A,({IX+FCLAST  BLOCK+t2]
    —EA94 DEOO          4334           SBC       A,O
    EA96  DD771F        4335           Lb        [I1X+FCBLAST BLOCK+2],A
                        4336
    EA98  DD7E20          4337             LD         A,{IX*FCB_LAST_BLOCK+3]
    EASC  DEOO            4338             Sac        A.O
    EASE  007720          4339             LO          [IX+FCB_LAST  BLOCK+3),A
                          4340
    EAA(   EOSBFEOS       4341             LO         DE, ({BUF_START)   ;INIT   BUFFER  POINTER
    EAAS  0DO7321         4342             LD         [IX+FCB_POINTER],E
    EAAS  D07222          4343             LD         (IX+FCB_POINTER+1),0
                          4344
    EAAB  DD7EOD          4345             LD         A, (IX+FCB_FIRST_  BLOCK}   ;SET  BLOCK   TO FIRST BLOCK
    EAAE  007719          4346             to         {IX*FCB_BLOCK),A
    EAB!  DD7EOE          4347             LD         A, [IX+FCB_FIRST  BLOCK+1]
    EAB4  DDTTIA          4348             LD         (IX+FCB  BLOCK+1),A
    EAB?  DDTEOF          4349             LO         A, (IX+FCB_FIRST_BLOCK+2]
    EABA  007718          4350            LO          {IX+FCB  BLOCK+2],A
    EABD  DD7E10          4351            LD          A, [IX*FCB_FIRST_BLOCK+3]                                                                                        :
    EaCO  DO771C          4352            LD          {IX+FCB_BLOCK+3],A                                             .
                          4353
    EAC3  DO7E18          4354            LO          A,({IX+FCB_MODE]   ;LOOK  AT  THE  MODE
    EAC6  E607            4355            AND         MODE MODE
    EACS  FEO2            4356.           CP          MODE WRITE         ;IS  IT  WRITE  MODE?
    EACA  2827            4387            JR          2,OPENS            ;JUMP   IF SO  --  NO PRE-READ  NECESSARY
            :             4358
    EACC                  4359   READ TIMEOUT:
                          4360   *                    Tf FCB_USED  LENGTH    = 1  (file  size  of  one block)
    EACC  AF              4361            XOR         A                                      ;load  Acc with zero
    EACD  DDBE 14         4362            cP          [IX+FCB_USED_LENGTH+   1]              sHigh  order must be zero
    EADO  200A            4363            JR          NZ,NOT_SIZE  1                         ;I1f not then past bitset
    EaD2  3C              4364            INC         &                                      ;Inc  Acc to a  1
    EAD3  DDBE 13         4365            cP          {IX+¢FCB_USED_LENGTH]                  ;Compare  with low order
    EAD6  2004            4366            JR          NZ,NOT_SIZE_1                          ;If not  equal then exit
                          4367
                          4368   +                    Then  set  last block   bit  in mode
    EADS  DOCBIGFE        4369            SET        MODE  LAST  BLOCK BIT,  [{IX+FCB_MODE]    ;Set  it
                          4370   +                    Endif
    EADC                  4371  NOT  SIZE 1:
                          4372
    EADC  DD7E17          4373            LD         A, (IX*FCB_DEVICE])   ;GET  THE  DEVICE   NUMBER
    EADF  2AFEO8          4374            LO         HL,(BUF_ START]     ;GET  BUFFER  ADDRESS
    EAE2  DDSE19          4375            LD          E,({IX+FCB_BLOCK])  ;GET  BLOCK  NUMBER
    EAES  DDSG6GIA       4376             LO         O,(IX+FCB_BLOCK+   1)
    EAEG  DD4E18         4377             LD         C,{IX+FCB  BLOCK+2)
    EAEB  DD461C         4378             LO         8, (IX+FCB_BLOCK+3)
    EAEE  CDF178         4379             CALL       READ  BLOCK         ;READ  THE  FIRST  BLOCK
                         4380
    EAFi  2005           4361             JR         NZ,OP_ERR           ; IT’S  AN  ERROR
                         4362
    EAFS                 4383   OPENS
    EAF3  AF             4384             XOR        A                   ;SHOW  NO  ERROR
    EAF4  C1             4365             POP        BC                  -GET  THE  FILE  NUMBER   IN B
   EAFS   78             4386             LO         A.B
                         4387
   EAFG   1805           4388             JR         REST  REGS
                         4389  .;         PoP        DE                  >RESTORE  REGISTERS
                         43390   ;        PoP         IX
                         4391;            pap        HL
                         4392    ;        pop         ly
                         4393.          _ RET
        |             4394
    EAF8              4395  OP_ERR
    EAF@ 00361600     4396          LD       (1X+FCB_MODE],MODE_UNUSED ;MAKE THE FCB  UNUSED  AGAIN
                      4397
    EAFC C1           4398          PoP      BC              SRESTORE REGISTERS
    EAFD              4399  REST_REGS:
    EAFD D1           4400          POP      OE
    EAFE ODE!         4401          Pop      IX
    EBOO €1           4402          PoP      HL
    E801 FOE!         4403          POP      Iv
    EBO3 C8           4404          RET
                         BOQ0G                     rr rrr mr  rrr  rrr parr rrr  tr rrner etter erent     etn ne
                        4407   ;
                         4408  ; _CLOSE   FILE    --does   the  necessary   clean-up   and  marks   the  FCB
                         4409  ;                  as unused.
                         4410  ;
                         4411  ; ENTRY   PARAMETERS   --  file  number    inA,
                         4412  ;
                         4413  ; EXIT   PARAMETERS   --  if no  error   -- Z=    1;A#®0O
                         4414  ;                         if error    -- Z = 0;  A * error   code
                         4415  ;
                         ROAR, 5.0ttt   tt    nt eemewn     nee  mee see eee  eee  seems  ames  tenet  nanan aee
                         4417
    EBO4                 4418   CiLOSé  FILE
    EBO4  DOES         —64419            PUSH     Ix              |    ;SAVE REGISTERS
    EBOSG ES             4420            PUSH     HL       7
    E607  05            4421             PUSH     DE
    EBOS  cs             4422            PUSH     BC
                         4423
    E809  87             4424            OR       A                    ;CHECK  FILE NUMBER
    EBOA  2850           4425            JR       Z,C_ERROR            ;BRANCH  IF ZERO
   ~EBOC  FEO3           4426            CP       NUM FCBS     |       ;CHECK  FOR MAX  RANGE
    EGOE  304C           4427            JR       NC,C_ERROR           ;BRANCH  IF TOO  LARGE
                         4428          mt         |      a
    EB10  47         ~   4429            LO       BA .                 ;PuT IT  INTO 8B
    E811  DD2AFOFD       4430            LO       IX,[FCB_HEAD_ADDR}       ;GET ADDRESS  OF  OTH  FCB
    EB15  2AFOF F        4431            to       HL,{FCB_DATA_ADOR]      ;GET  ADDRESS  OF  OTH  BUFFER
    E818               4432    CLOSE2    _                  |
    £618  110023         4433            LO       DE ,FCB_LENGTH       ;SET OFFSET
    E818  DD19          4434             ADD      IX,DE   -         -  sADVANCE  POINTER  TO  NEXT   FCB
    EB1D  110400         4435            LO       DE,1024
    E820  19             4436            AOD      HL ,.DE              ;ADVANCE  POINTER  TO  NEXT   BUFFER
    B21   10F5           4437            DUNZ     CLOSE2               ;UNTI“L WE GET TO  THE  ONE   WE  WANT
                         4438             a
    EB23  DO7E18         4439            Lo       A,(IX+FCB_MODE]      ;LOOK AT  THE MODE  BYTE
    EB26  87             4440            OR       A
    E827  2833           4441            JR       Z,C_ERROR            ;BRANCH  IF FCB  NOT  IN  USE
                         4442
    EB29  E640           4443            AND      MODE DIRTY           ;ZERO UNWANTED   BITS
    E628  2825           4448S           JR       Z,CLOSE3             ;BRANCH  IF BUFFER  NOT   DIRTY
                         4445                                                   .
    EB20  0D022FD73      4446            LO       {FILE NAME   ADOR),IX      ;  POINTER  TO  FILE  NAME   IN  FCB
    E831                 4447  WRITE TIMEOUT:
    E831  DO7E17         4443            LO       A,[IX+FCB_DEVICE)      ;GET  THE DEVICE  NUMBER
    E837  DD561A         4450            LO       D,[IX+FCB_  BLOCK+1}
    EBSA  DO4E 18        4451            LO       C,{IX+FCB  BLOCK+t2]
    E830  0D461C         4452            LO       B.{IX+FCB  BLOCK+3}
                         4453                                          ;HL STILL  HAS ADDRESS    OF BUFFER
    EB40  COF 1E6        4454            CALL     WRITE BLOCK           :FLUSH  THE BLOCK  TO  TAPE
    E843  2020           4455            JR       NZ,C ERROR           ;BRANCH  IF ERROR
                         4456
    E845                 4457  CLOSE4:
    EB45  DD7E17         4458            LD       A,LIX+FCBR DEVICE}        GET  DEVICE  10
    E648  DDES           4459            PUSH     IX
    EB4A  E1             4460            POP      HL
    E846  EDSBFD73       4461            Lo       DE,{FILE  NAME   ADDR}
                         4462
    EB4F CDEGS1        4463          CALL     __SET_FILE
          |            4464
    EBS2               4465 CLOSE3
    E852 00361800      4466          LD       [IX+FCB_MODE],MODE_UNUSED ;MARK  THE  FCB  EMPTY
                       4467                       ,
    EBS6 C1            4468          Pop      Bc              ;RESTORE
         Of            4469          PoP      DE
   -EBS8 E1            4470  -       Pop      HL
    EBS9 DOE!          4471          PoP      IX
    EBSB CO            4472          RET
    EBSC               4473 C_ERROR                  |
    EBSC C1            4474  Ct      PoP      BC              ;RESTORE REGISTERS
    EBSD D1            4475          PoP      DE
    EBSE £1            4476          PoP      HL
    EBSF ODE!          4477          Pop      Ix                                                                                                         '
    EB61 3E09          4478          ‘Lo      A,BAD_FNUM_ERR  ;SET THE ERROR
    E863 B7            4479          OR       A               :SET THE CONDITIONS
    E864 C9            4480          RET            :
    EB6S               4481 C_ERROR2       |
    EB65 C1            4482          PoP      BC              ;RESTORE REGISTERS
    EB66 D1            4483          PoP      OE
    EB67 Et            4484          POP)   ssHL
    E868 ODE!          4485          PoP      IX
    EB6A B7            4486          OR       A               ;SET CONDITIONS
    E868 C9            4467          RET .
                          4489  ;------7  rrr--  Pe           rr          rt   nnn  en ne  eeen ne eeeee eee    eee
                          4490  ;
                          4491  ;  _RESET   FILE   --  rewinds   the  file   back  to  the  first  byte.
                          4492  ;
                          4493  ;  ENTRY  PARAMETERS:    file   number   in  A
                          4494  ;
                          4495  ;  EXIT  PARAMETERS:    no  error   --  Z =  1; A=O
                          4496  ;                       if  error   --  2 = OO; A  = error   code
                          4497  ;
                          AMDD  5mm  mn             rn         ttt              nr    nt  rent      nent   ce cceee
    EBEC            :     4500  _RESET_FILE
    EB6C   DDES5          4501            PUSH      IX                   ;SAVE  REGISTERS
    EBGE   05             4502            PUSH      DE
    EBG6F  C5             4503            PUSH   =  BC                                                                                                                       ;
    E870   ES            .4604            PUSH      HL                                   :
                          4505
    —B71   87             4506     |      oR        a                    ;CHECK   FILE  NUMBER
    E872   CAECO7         4507            uP        Z,R_ERROR            ;BRANCH   IF  ZERO   -
    EB7S   FEOS3          4508            cP        NUM _FCBS            ;>CHECK  FOR MAX   RANGE
    E877  D2ECO7          4509            JP        NC ,R_ERROR          ;BRANCH   IF TOO   LARGE
                          4510
    EB7A   47          _  4511            LO        B.A                  ;PUT  IT  INTO  B
    EB7B  DD2AFDFD        4512           ~Lo        IX, [FCB_HEAD_ADOR])     ;GET  ADORESS   OF  OTH  FCB
    EB7F   2AFOFF         4513            LO        HL, (FCB _DATA_ADDR]     ;GET  ADORESS   OF OTH   BUFFER
    EB82                  4514  RES!                                         |       |                         -
    EBB2   110023         4515            LO        DE,FCB_LENGTH      ;SET    OFFSET
    Eses  D019            4516            ADD       IX,DE                ;ADVANCE   POINTER   TO  NEXT   FCB
    E887   110400         4517         -  Lo        DE, 1024             ;SET  BUFFER   SIZE
    EBSA   19             4518            ADD       HL .DE               ;ADVANCE   POINTER   TO  NEXT  BUFFER
    E888   10F5           4519            DuUNZ     RES1                 ;UNTIL  WE  GET  TO  THE  ONE  WE  WANT
                        _ 4820
    EB8D  DO7E18          4521            LD        A,[IX+FCB_  MODE}    ;LOOK  AT  THE  MODE  BYTE
    E890  B87             4822            OR        &
    E88!  2874            4523            wv        Z,R_ERROR            ;BRANCH   IF FCB  NOT   IN USE
                          4524
    EB93  E640            4525          _ AND       MODE DIRTY           ;ZERO  UNWANTED   BITS
    EB9S  2818            4526            JR        2,RES2               ;BRANCH   IF BUFFER   NOT  DIRTY
                          4527
    EB97                  4528  TIMED OUT:           .
    E897  DO7E17          4529            LO        A,{IX+FCB  DEVICE]     ;GET  THE  DEVICE   NUMBER
    EBSA  DOSE 19         4530            LD       -E,[IX¢FCB_BLOCK]      ;GET  THE  BLOCK  NUMBER
    EBSD  DDS61A          4531            LO        D,[IX+FCB_BLOCK+1]
    EBAO  DD4E  1B        4532            LO        C,{IX+*FCB_BLOCK+2]
    EBA3  DD461C          4533            LO        B,[IX+FCB_BLOCK+t3]
                          4534                                           sHL STILL   HAS  ADDRESS   OF  BUFFER
    EBAG  CDF 1E6         4535            CALL      WRITE BLOCK          ;FLUSH  THE  BLOCK   TO  TAPE
    EBAQ  2065            4536            JR        NZ,R_ERROR2          ;BRANCH   IF ERROR
                          4837
    EBAB                  4538  RESET BIT:
    EBAB  DDCB 1886       4539            RES       MODE DIRTY  _BIT,{IX+FCB_MODE]       :CLEAR   THE  DIRTY   BIT
    EBAF                  4540  RES2
    EBAF  DOCBI1SBE       4541            RES       MODE LAST  BLOCK   BIT,  [IX+FCBR MODE]     ;  BACK   TO  FIRST   BLOCK
    EBB3  OD7EOD          4542            Lo        A,{IX+FCB_FIRST_    BLOCK]   ;SET  BLOCK   TO  FIRST  BLOCK
    EBBE  007719          4543            LO        {1X+FCB BLOCK]),A
    E889  ONT’            4544            LO        A,{IX+FCB  FIRST   BLOCK+?   |]
    EBBC                  A545            LD        [1X+FCB BLOCK+1].A
    EBBF OD7EOF        4546         LD       A,(IX+FCB_FIRST_BLOCK+2]}
    EBC2 007718        4547         LD       [1X+FCB_BLOCK+2],A
    EBCS DD7E10        4548         LO       A,[IX+FCB_FIRSTBLOCK+t3)
    EBCS 00771C        4549         LO       {IX+FCB_BLOCK+3],A
                       4550
    EBCB 007521        4551         LO       [IX+FCB_POINTER+O),L                    ;reset pointer   for new  (first) block
    EBCE 0D7422        4552         LD       [IX+FCB_POINTER+1).H
                       4553
    EBD1 OO7E18        4554         LD       A,(IX+FCB_MODE) ;GET THE MODE AGAIN
    EBO4 E607          4555         AND      MODEMODE        ;LOOK AT MODE TYPE ONLY
    EBDG FEO2          4556         cP       MODEWRITE       ;ARE WE WRITING?
    EBOS 2012          4557    :    JR       NZ,READ_IT       ;NOPE, NEED TO PRE-READ
                       4558
    EBDA 0D361500      4559         LD       {IX+FCB_LAST_COUNT],0
    EBDE 0D361600      4560         LO       [IX+FCB_LASTCOUNT+1],0                                                                             ‘
                       4561
    EBE2 DD361301      4562         LD       {IX+FCB_USEDLENGTH],1
    EBEG DD361400      4563         LO       {IX+FCB_USED_LENGTH+1],0
                       4564
    EBEA 1814          4565         JR       NO_READ
                       4566
    EBEC               4567 READ_IT:
    EBEC DD7E17        4568         LO       A,(IX*¢FCB_DEVICE];GET THE DEVICE NUMBER
    EBEF DOSE19        4569         LO       E,(IX+FCB_BLOCK] ;GET THE BLOCK NUMBER
    EBF2 DDSGIA        4570         LD       D,[1X+FCB_BLOCK+1]
    EBFS DO4E18        4571         LD       C,[1X+FCB_BLOCK+t2)
    EBFS DD461C        4572         LO       8,[IX+FCB_BLOCK+3)
                       4573                                  ;HLESTILL HAS ADDRESS  OF BUFFER
    EBFB CDFI7B        4574         CALL     READ_BLOCK      ;READ THE FIRST BLOCK
                       4575
    EBFE 2010          4576         JR       NZ,R_ERROR2     ;BRANCH ON ERROR
   .                   4577
    ECOO               4576 NO_READ
    ECOO E1            4579         PoP      HL              ;RESTORE THE REGISTERS
    ECO! Ct            4580         PoP      BC
    ECO2 D1            4581         PoP      DE
    ECO3 ODE!          4582         PoP      IX
    ECOS AF            4563         XOR      A               ;SHOW NO ERROR
    ECOG C9            4584    |    RET                    :         |
                       4565
    ECO7          |    4586 R_ERROR                         |
    ECO7 E1            4587         PoP      HL             —;RESTORE THE REGISTERS
    ECOS C1            4588         POP      BC
    ECOS D1            4589         PoP      DE
    ECOA DDE!          4590         POP      IX
    ECOC 3€09          4591         LO       A,BAD_FNUM_ERR  ;SHOW THE ERROR
    ECOE B7            4592         OR       A               ;SET CONDITIONS
    ECOF C9            4593         RET
    EC1O               4594 R_ERROR2
    EC10 E1            4595         PoP      HL              ;RESTORE REGISTERS
    ECi1 Ct            4596         PoP      BC
    EC12 D1            4597         POP      DE
    EC13 DDE           4598         POP      IX
    EC15 87            4599         OR       &               >SET CONDITION
    EC16 C9            4600         RET
                       4601 ;
                       4602  ,BSBSSERSARTES  ESSses rserssssssesrsssrsssssrsexesssas  seetrsetstszte
                      4603 ,SSSSSSSSCSHSSSSHBSASTRESSSSSTSSSSSSPSSSSSSRHSSTSSSSERSSSSESSCSesezss
                      4604
                      4605 ;
                      4606
                               4608
                               4609  ;Packed some code   to  allow  room for
                               4610
                               4611        ;GLB    - __READ_FILE,    WRITE FILE
                               4612        sEXT      BUF START  ,BUF_END,USER BUF  BYTES   REQ,BYTES    TO GO
.                              4613        ;EXT      FNUM
                               4614        sEXT      FCB_HEAD  ADDR  ,FCBDATA_AOOR
                               4615        ;EXT      READ BLOCK   ,WRITEBLOCK
                               4616        ;EXT      MODE _CHECK
                               4617                                  |
                               4B1B pr mnm rrr                        em meme mentee           tee eee    cerns
                               4619 ;                         .                                                  ;
                               4620 ;  READ FILE   -- read   some  data from a file   into  the  user’s   buffer.
                               4621 ;
                               4622 ; ENTRY PARAMETERS:   device   number in A; buffer   address    in  HL;
                               4623 ;                Gesired   number  of bytes  in BC.
                               4624 ;
                               4625 ; EXIT PARAMETERS:   no  errors  -- Z = 1; Az0O
                               4626 ;                    {f  errors  -- Z = 0; A =  error  code;
                               4627|;                BC  = number   of bytes transferred
                               4628 ;
                               4630                                                                    .
                               4631 ; GET OUT CHANGED   TO R_GET_OUT   TO PREVENT CONFLICT    WITH
                               4632 ; IDENTICAL LABEL   ELSEWHERE
                               4633
           EC17                4634  READ FILE
           EC17 CS             4635         PUSH     BC                 ;SAVE REGISTERS
           EC18 DS      |      4636         PUSH     DE
           EC19 E5             4637         PUSH =   HL
           EC1A ODES           4638         PUSH =   IX
           4639 22FEO6         4640         LO       (USER  _BUF],HL    ;SAVE USER’S  BUFFER   ADDRESS
           EC1F ED43FEO2       4641         LO       [BYTES  REQ].BC    ;SAVE REQUESTED   COUNT
           EC23 32FE0!         4642         LO       [FNUM),A           ;SAVE FILE  NUMBER
          -EC26 ED43FEO4    ©  4649         LO       (BYTES  TO_GO),8C   ;INIT COUNTER   (COUNTS   DOWN)
                               4644
           EC2A B7             4645         OR       A                  ;CHECK FILE  NUMBER
           EC2B CAED7F         4646         uP       Z,READ_ERR2        ;BRANCH IF  ZERO
           EC2E FEO3           4647         cP       NUM_FCBS           ;CHECK FOR  MAX  RANGE
           EC30 D2E07F         4648         uP       NC ,READ_ERR2      ;BRANCH IF  TOO  LARGE
                               4649
           EC33 47             4650         LD       B.A                ;PUT IT INTO  B
           EC34 DO2AFOFD   =:  4651         LO       IX,([FCB_HEAD  ADDR]  ;GET ADORESS   OF  OTH  FCB
           EC38 2AFOFF         4652         LO       HL, [FCB  DATA  ADOR] ;GET ADDRESS   OF  OTH  BUFFER
           EC38                4653 READ!
           EC3B 110023         4654         LD       DE,FCB_LENGTH               POINTER   TO  NEXT   FCB
           EC3E D019           4655         ADD      1X, DE
           EC40 110400         4656         LO       DE, 1024           ;ADVANCE POINTER   TO  NEXT   BUFFER
           EC43 19             4657         ADD      HL, DE
           EC44 10F5           4658         DUNZ     READ               ;UNTIL WE GET  TO  THE  ONE   WE  WANT
                               4659
           EC46 22FEO8         4660         LO       [BUF _START],HL    ;SAVE ADORESS  OF  MY  BUFFER
           EC49 19             4661         ADD      HL ,DE             ;POINT HL PAST   ENO  OF  MY  BUFFER
           EC4A 22FEOA         4662         LO       [BUF_END]   Hi   ;SAVE IT TOC
                               4663
                               4664                                       peeCHECK  FOR  MODE  «#5
         EC4D   DDES           4665           PUSH      IX
         EC4F   E1             4666           PoP       HL
                               4667
         ECS50  CDFODS         4668           CALL      MODE CHECK         ;SEE  IF THE  MODE  IS OK
         ECS3   C2ED81        4669            JP        NZ,READ_ERR1       ;BRANCH  IF NOT
                              4670        |                                     |
         ECS6                 4671   READ3
         ECS6  DDCB187E       4672            BIT       MODE LAST BLOCK_BIT,[IX+FCB_MODE]       ;LOOK AT  LAST BLOCK  BIT
         ECSA  C2ED2B         4673            JP       NZ,READ_LAST        ;BRANCH  IF THIS   IS THE LAST  FILE BLOCK
                         :    4674         |
         EC5D  2AFEOA         4675            LO       HL, (BUF_END])      ;GET END  ADDRESS  OF  BUFFER
         EC60  DDSE21         4676            LD        E,(IX+FCB_ POINTER]   ;GET  POINTER  INTO  BUFFER
         EC63  DDS622         4677        ~   to        DO(1X+FCB_POINTER+1)
         EC66  87             4676            oR       |
         EC67  E052           4679            SBC      HL ,DE              ;CALC.  BYTES  LEFT  IN BUFFER                                                             ,
         EC69  2825           4680            UR       Z,_0  BYTES  LEFT2                                                            |
                  |           4681
         EC6B  44             4682            LD       B.H                 ;SAVE BYTES  LEFT  IN  CASE WE  NEED  IT
         EC6C  4D      |      4683            LO     6k
                              4684
         EC6D  EDSBFEO4       4685            LO       DE, [BYTES  TO_GO)   ;GET BYTES  LEFT  TO  SEND
         EC71  B7             4686           OR        A             |         |
         EC72  EDS2           4687            SBC      HL ,DE              ;COMPARE  TO WHAT  WE  HAVE
         EC74  D2ECEA   |     4688           JP        NC ,ENOUGH          ;BRANCH  IF WE HAVE   ENOUGH DATA  HERE
                              4689
                              4690   : IF WE FALL   THROUGH  HERE,  WE  KNOW  WE WILL  HAVE  TO  GET ANOTHER
                              4691   ; BLOCK AFTER   THIS  ONE.   FIRST,  LET’S  TRANSFER   WHAT  WE HAVE.
                    :         4692
        EC77   2AFEO4         4683           LO        HL, [BYTES  TO_GO)   ;UPDATE  NUMBER  OF  BYTES TO  GO
        AC7A   87             4694           oR
               ED42           4695           SBC       HL .BC             ;SUBTRACT   NUM OF  BYTES  WE ARE  SENDING
        HERE   22FE04         AGG            LO    3=——sBY TESS_TO_GO},HL
                              4697
        EC8O   DDGE21         4638           LO        L,({IX+FCB_POINTER])   ;POINT  INTO MY  BUFFER
        EC83   006622         4699           LD        H, [IX+FCB_POINTER+  1}
        EC86   EDSBFEO6       4700   _.      LO        DE,(USER_BUF]              INTO  THE  CALLER’S  BUFFER
                    :      —  4701                           :            ;BC  HAS COUNT  FROM  ABOVE
        EC8A   EDBO           4702           LOIR                         ;GIVE  WHAT  WE HAVE
                              4703         .                 |
        EC8C   EDS3FEO6       4704           LO        (USER_BUF],DE              TO  NEXT SPOT
          .                   4705                                |
        EC90                  4706  _O BYTES LEFT2:
        EC9O   2AFEOS         4707           LO        HL,(BUF_START]     ;RESET  THE  POINTER
        EC93   007521         4708           LO        [IX+FCB  POINTER]  ,L
        EC96   007422         4709           LO        [IX+FCB_POINTER+1],H
                              4710
        EC99   003419         4711           INC       {IX+FCB. BLOCK)    ;INC  THE BLOCK  NUMBER
        ECSC   2000           4712           JR        NZ,READ4           ;BRANCH  IF  NO CARRY  QuT
        ECSE   DD341A         4713           INC       [IX+FCB BLOCKt1]
        ECA!   2008           4714           UR        NZ,READ4
        ECA3   0D341B         4715           INC       {IX+FCB_BLOCK+2]
        ECA6   2003           4716           JR        NZ,READ4
        ECA8   DD341C         4717           INC       [I1X+FCB_BLOCK+3]
                              4718
        ECAB                  4719  READ4
                              4720
        ECAB   [              4721           LO        A,[IX+FCB  DEVICE}          ;      “EVICE   ID
ee                  cert                                                                                                               2                                     ee
    ECAE 2AFEO8       4722         LD       HL,[BUFSTART]              ;GET  ADDRESS  OF USERS BUFFER
    ECBi DDSE19       4723         LD       E,[1X+FCBBLOCK]            ;GET  BLOCK NUMBER
    ECB4 DOS6IA       4724         LD       D,([1X+FCBBLOCK+1)
    ECB7 DD4E18       4725         LD       C,{1X+FCB_BLOCK+2)
    ECBA DD461C       4726         LD       8,[1X+FCB_BLOCK+3)
                      4727
    ECBO CDF17B       4728         CALL    ~READBLOCK           ;READ THE NEXT  BLOCK
                      4729
    ECCO C2ED81       4730         JP       NZ,READ_ERR1      ;BRANCH IF ERROR
                      4731
    ECC3              4732 NOT_TAPE1:
    ECC3 DO7E20       4733    :    LO       A,[IX+FCB_LAST_BLOCK+3)    ;SEE IF THIS  IS THE LAST BLOCK
    ECC6 DDBEIC       4734         CP       (IX+FCB_BLOCK+3]
    ECCS 201C         4735         JR       NZ,JP_TO_READ3          ;BRANCH  IF NOT
    ECCB DOTEIF       4736         LD       A,(IX+FCB_LAST BLOCK+2]                                                                                  '
    ECCE DDSE16       4737         cP       {IX+FCB_BLOCK+2]}
    ECD1 2014         4738         JR       NZ,JP_TO_READ3
    ECD3 DOTEIE       4739         LO       A,(IX+FCB_LAST_BLOCK+1)
    ECD6 DOBEIA       4740         cP       (IX+FCB_BLOCK+1]}
    ECD9 200C         4741         JR       NZ,JP_TO_READ
    ECDB DO7T1D       4742         LD       A,(IX+FCB_LAST_BLOCK]
    ECDE DDBE19       4743         cP       (1X+FCB_BLOCK]
    ECE1 2004         4744         JR       NZ,JUP_TOREAD3
    ECE3 DOCBIBFE     4745         SET      MODELAST BLOCK  BIT. [IX*FCB_ MODE]  ;ELSE  SET THE LAST  BLOCK   BIT
    ECE7              4746 JP_TOREADS:
    ECE7 C3ECSE       4747         JP       READ3            ;AND  DEAL WITH  THE NEXT  BLOCK
                      4748
                      4749 ; ARRIVE HERE  IF THIS BLOCK CONTAINS   ENOUGH BYTES  TO SATISFY
                      4750 ; THIS CALL.
                      4761
    ECEA              4752 ENOUGH:
    ECEA DD7E20       4753         LO       A,(IX+FCB_LAST_BLOCK+3]   ;SEE  IF THIS  IS THE LAST BLOCK
    ECED DDBEIC       4754         cP       [IX+FCB_BLOCK+3])
    ECFO 2018         4755         JR       NZ,READLAST!     ;BRANCH  IF NOT
    ECF2 DD7E1F       4756         LD       A,[IX+FCB_LAST_BLOCK+2)
    ECFS ODGE1B       4757         cP       [IX+FCB_BLOCK+2)
    ECF8 2010         4758         JR       NZ,READ_LAST1
    ECFA DOTEIE       4759         LD       A,[IX+FCB_LAST_BLOCK+1]
    ECFD ODBE1A      4760          cP       [1X+FCB_BLOCK+?1)
    EDOO 2006         4761         UR       NZ,READ_LAST1
    EDO2 DD7E10       4762         LD       A,{IX+FCB_LASTBLOCK)
    EDOS DOSE19       4763         cP       [IX+FCBBLOCK}
    E008 2810         4764         JR       Z,LAST_BLOCK
                      4765
    EDOA              4766 READLAST1:
    EDOA ED4BFE04     4767         LO       BC,[BYTESTO GO}       ; GET BYTE  COUNT TO  MOVE
                      4768                     :
                      4769
    EDOE DDG6E21      4770         LO       L,{IX+FCBPOINTER}   ;POINT  INTO  MY BUFFER
    ED11 0D6622       4771         LD       H,(IX+FCBPOINTER+1]
    ED14 EDSBFEOG     4772         LO       DE,(USERBUF }    ;POINT  TO THE USER’S  BUFFER
    ED18 EDBO         4773         LOIR                      ;MOVE  THE DATA
                      4774
    ED1A DD7521       4775         LO       [IX+FCBPOINTER].L   ;UPDATE  MY POINTER
    ED1ID007422       4776         LO       [IX+FCBPOINTERt+i].H
                      4777
                      4778
    ED20  DDE1           4779           Pop      IX                ;RESTORE REGISTERS
    ED22  Et             4780           PoP      HL
    E023  01             4781           Pop      DE
    ED24  ci             4782           PoP      BC
    E025  AF             4783           KOR      a                 SHOW NO  ERROR
    ED26  ce             4784           RET
                         4785
                         4786   ; ARRIVE HERE  IF THIS IS THE  LAST BLOCK  OF THE  FILE.
    E027                 4787   LAST_BLOCK:
    E027  OOCB 18FE      4788           SET      MODE_LASTBLOCK  _BIT,[IX+FCB_MODE J
                         4789
    E028                 4790   READ_LAST
    E028  2AFE06         4791        "1p         HL,[BUF_START]    ;POINT TO MY BUFFER
    ED2E  DOSE 15        4792           Lo       E,(IX+¢FCB_LAST_COUNT]  ;GET # BYTES  IN  IT
    ED31  0086 16        4793           rT)      0,[IX+FCB_LAST_COUNT+1]
    €034  19             Age            ADO      HLDE             ;CALC ADOR  OF LAST  BYTE  +  1
    ED3S  OOSE21         4798           rT)      E,[IX+FCB_POINTER]   ;GET CURRENT POINTER
    E038  DO8622         4796          to        0,[IX¢FCB_POINTER+1)
    ED38  87             4797           Om       &                ;CLEAR CARRY
    ED3C  E052           4708           SBC      Ht DE            ;CALC # BYTES  LEFT  IN BUFFER
    EDSE  ae             4788           ip       B.H              SAVE   IT IN CASE  IT’S NEEDED
    ED3F  4a.            4800           Lo       C.L
    E040  262A           4801           JR       2,_0BYTES LEFT
                         4802
    £042  EDSBFEO4       4803           LO       DE.[BVTES_TO_GO)  ;GET REQUESTED  COUNT
    ED46  87             2806           oR       a                ;CLEAR CARRY  (UGLY  280)
    £047  E0S2           4808           SBC      HL.OE            ;SEE IF WE  HAVE ENOUGH  BYTES
    £049  308F           4806           JR       NC,READ_LAST!1   ;BRANCH  IF SO -- NO  SWEAT
                         4807
    EG46  2AFEO4         4808           LO       HL,(BYTES TO_GO)  ;UPDATE NUMBER  OF  BYTES  TO  GO
    ED4E  67      |      4809           OR       A
    ED4F  E042           4810           Sac      Ht BC            ;SUBTRACT  NUM OF BYTES  WE  ARE  SENDING  HERE
    EDS1  22FE04         4811           LO       (BYTESTO_GO]},HL
                         4812
    E084  DOGE21         4813           LD       L,{IX*¢FCB_POINTER) ;GET POINTER  TO  MY BUFFER
    E067  006622         4814           LD       H,[IX¢FCB_POINTER+1)
    LOBA  EDSBFEOS       4815           LO       DE,(USER_BUF}         POINTER  TO USER’S  BUFFER
                         4816                                     ;BC HAS COUNT  FROM  ABOVE
                         4817           LOIR                      ;MOVE WHAT  WE HAVE  TO USER
                        4818
    ED6O  2AaFEO2       4819            LO       HL.(BYTES_REQ)   ;GET # BYTES  REQUESTED
    EDG3  ED48FE04      4820            Lo       BC,(BYTESTO_GO)   ;GET # BYTES  WE DION’T  00
    E067  87            4621            OR       A
    EDGS  ED42          4822            SBC      Ht,8C            ;CALC. # OF  BYTES WE  DID  00
    EOGA  se            4823            Lo       BH               ;PUT IT INTO  BC
    £068  4G            4824            LD       C.L
                        4825
    ED6C                4826   0  BYTES LEFT:
    ED6C  3EOA          4827            LO       A,EOF_ERR        ;SHOW AN ERROR
    EDGE                4828   R_GET_OUT:
    EDGE  DOE1          4829            PoP      IX               ;RESTORE REGISTERS
    ED70  Et            4830            PoP      HL
    ED1   01            4631            PoP      DE
    E072  33            4832            INC      SP               ;DISCARD OLD  BC
    ED73  33            4833            INC      SP      |
                        4834
    ED74  67            4835            OR       A
    E075  cCotitit«s     4836
                         4837
    ED76                 4838  RQ STAT_ERR:
    ED76  DDE!           4839           PoP      IX
    E078  E1             4840          PoP       Hi
    E079  01            4841           Pop       DE
    ED7A  Ci             4842          PoP       BC
                         4843                                ,
    ED7B  3E15           4844          LO        A,RQ_TP_STAT_ERR
    ED70  B7          —  4845          OR        A
    ED7E  C9             4846          RET
                         4847
    ED7F       ,         4846  READ_ERR2:
    ED7F  3E09           4849           LO     -
        |    |         ' 4650          ,
    E081                 4851  READ_ERR!
    ED81  2AFEO2   —     4852           LO        HL.(BYTES REQ]     ;GET # BYTES  REQUESTED
    E084  ED4BFE04       4853           LO        BC,(BYTES TO  GO}    ;GET# BYTES  WE  DIDN’T   00
    ED88  B7             4854           OR        A
    EDS9  E042           4665                     HL,BC              ;CALC. # OF  BYTES   WE  DID  DO
    ED8B  44             4656           LD        B.H                ;PUT IT INTO  BC
    EDSC  40             4657           LD        Cyt
    .                    4658
    EDSD  18DF           4859           JR        R_GETOUT
                         4860                              :
                         4861  +        pop       IX  |              RESTORE  REGISTERS
                         4862  *        pop       HL
                         4863  +        pop       DE
                         4864  «        INC       SP                 ;DISCARD OLD  BC
                         4865  »        INC       sP
                         4866  *        OR        A                  ;SET CONDITION   CODES
                         4867 *»        RET        |
                         4868  +
                         4869  *READ_ERR2
                         4870  +        LO        HL,(BYTES REQ]     ;GET # BYTES  REQUESTED
                         4871  *        LD        BC,[BYTES TO  GO)   ;GET # BYTES  WE  DION’T   DO
                         4872  *        OR        A
                        4873   +        SBC       HL,BC              ;CALC. # OF BYTES    WE DID  DO
                         4874  +        LD        BH                 ;PUT IT INTO  BC
                         4675  «        LD        c.t
                         4876  +
                         4877  *        PoP       IX                 ;RESTORE REGISTERS
                         4878  +        PoP       HL
                         4879  *        pop       DE
                         4880  «        INC       SP                 ;DISCARD OLD  BC
                         4881  +        INC       SP
                         4882  »        LD        A,BAD_FNUM_ERR     ;SET THE ERROR   CODE
                         4883  *        OR        A                  ;SET CONDITIONS
                         4884  +        RET
                        G4BBG  rrr                rrr       rrr    rrrn tn rn ertnn tenet       nenne
                        4887   ;                    .
                        4868   ; WRITE  FILE -- write  some  bytes  toa  file.
                        4889   ;
                        4890   ;ENTRY PARAMETERS:  file number   inA; byte count  in BC;  pointer
                        4891  ;               to data  in HL.
                        4892  ;
                        4893  ; EXIT PARAMETERS: no  errors  -- 2 +  1;A#0O
                        4694  ;                   if errors  -- Z * 0; A  *error  code
                        4695  ;
                        48697
    EDSF                4698   WRITE _FILE
    EOGF  C5            4889          PUSH    BC                ;SAVE REGISTERS
    EDSO  05            4900          PUSH    DE                       |                                                                                  \
    ED91  ES            4901         PUSH     HL
    ED92  ODES          4902          PUSH    IX
                        4903               |
    ED94  22FE06        $904          LD      [USER_BUF),HL     ;SAVE USER’S BUFFER  ADDRESS
    ED97  ED43FEO2      4908          LO      [BYTES REQ),.BC   ;SAVE REQUESTED COUNT
    ED9B  32FE01        4o06          LD      (FNum).A          ;SAVE FILE NUMBER
    EDSE  ED43FE04      4907          Lo      ([BYTES_TO_GO),BC  ;INIT COUNTER (COUNTS  DOWN)
    EDA2  87            4909          OR      A                 ;CHECK FILE NUMBER
    EDA3  CAEEBC        4910          ‘JP     2,WRITE ERR2      ;BRANCH IF ZERO
    EDAG  FEOS3         4911          cP      NUM_FCBS          ;CHECK FOR MAX RANGE
    EDAS  D2EEBC        4912          JP      NC WRITE ERR2     ;BRANCH IF TOO LARGE
                        4913
    EOAC  OD2AFOFO      4916          LD      IX,[FCB_HEAD_ADDR]}] ;GET ADDRESS OF  OTH FCB
    EDBO  110023        4916          LD      DE,FCB_LENGTH     ;SET OFFSET
    E063                4917  WRITE!
    EDB3S 0D19          4918          ADD     Ix,DE             ;ADVANCE POINTER TO  NEXT  FCB
    E0BS  10FC          4919          DJUNZ   WRITE1            ;UNTIL WE GET TO THE  ONE  WE WANT
                        4920              :
    E0B7  47            4921          LD      BA                ;POINT HL AT MY BUFFER
    E0BB  110400        4922       ~   0d     DE,1024
    E0BS  2AFOFF        4923          LD      Hi,(FCB_DATA_ADDR)
    EDGE                4924  WRITE2
    EDBE  19            4925          ADD     HL.DE
    EOBF  10FD          4926          DUNZ    WRITE2
                        4927
    EDC!  22FE08        4928          LD      (BUF_START]),HL   ;SAVE ADDRESS OF MY  BUFFER
    EO0C4 19            4320          ADO     HL,.DE            ;POINT HL PAST END OF  MY BUFFER
    EDCS  22FEOA        4930          LO      (8UF_END],HL    ;SAVE IT TOO
                        4931
                        4932                                    ;*** CHECK FOR MODE  +
    Eocs  DDES          49333         PUSH    Ix
    EDCA  E1            4934          POP     HL
                        4935
    EDCB  CDOFODS       4936          CALL    MODECHECK
    EODCE C2EEBE        4337          uP      NZ,WRITEERR!      ;JUMP IF WRONG MODE
                        4938
    EDD1                4939  WRITES
    EDD1  DO7E14        4940          LD      A,(IX+FCB USED LENGTH+1]
    EDD4  ODBE12        494i          cP      [IX+FCB_MAX_LENGTH+1]
    EDD?  3°            4942          JR      C,SET_uP
    EDD9 DD7E13        4943           )      A,[IX+FCB_USED_LENGTH+O]
    EDDC DDBE11        4944          cP      [1X+FCB_MAX_LENGTH)
    EDOF 3804          4945          UR      C,SET_uP
                       4946
    EDE1 DOCBISFE      4947          SET     MODE_LAST_BLOCKBIT, [1X+FCB_MODE }
    EDES               4948  SET_UP:
    EDES 2AFEOA        4949          LO      Ht,(BUF_END]    ;GET LAST ADDR  +  1OF BUFFER
    EDE8 DDSE21        4950          LD      E,[IX+FCB_POINTER]  ;GETCURRENT  POINTER
    EDEB 005622        4951          LO      D,[IX+FCB_POINTER+1)
    EDEE 87            4952          OR      A               ;CLEAR CARRY
    EDEF E052          4953          SBC     HL,DE           ;CALC. ROOM LEFT  IN BUFFER
    EDF1 44            4954      .    Oo     B,H             ;SAVE IT IN CASE  WE NEED   IT
    EDF2 4D            4955          LO      Cyt
    EDF3 EDSBFEO4      4956          LD      DE,(BYTESTO  GO) ;GET BYTES LEFT  TO TRANSFER
    EDF] 87            4967          OR      A
    EOFS E052          4958          SBC     HL,DE           SEE  IF WE HAVE  ROOM FOR   IT ALL
    EDFA D2EE93        4959          uP      NC,ROOM_OK      ;BRANCH IF YES
                       4960
                       4961  ; WE FALL THROUGH HERE IF THE NUMBER OF BYTES  TO BE WRITTEN
                       4962  ; IS MORE THAN THE SPACE WE HAVE IN THE CURRENT  BLOCK.
                       4963  ; FILL THE BLOCK, WRITE IT OUT, THEN DECIDE WHAT  TO DO.
                       4964
    EOFD 78            4965          Lo      A.B             ; CHECK IF ANY  BYTES AVAILABLE
    EDFE B1            4066          OR      Cc
    EDFF 2818          4967          JR      2,CHECK_LAST_BLOCK  ; NOPE, EMPTY  BUFFER  FIRST
                       4968
    EEO! 2AFEO4        4969          LD      HL,{BYTES TOGO)  ;GET THE COUNT
    EEO4 87            4970          OR      A
    EEOS ED42          4971          SBC     HL,BC           ;SUB THE ROOM  IN BUFFER  TO  UPDATE   IT
    EEO? 22FEO4       4972           LD      {BYTESTO_GO),HL
              |        4973
    EEOA DDSE21        4974          LO      E,[I1X+FCB_POINTER];GET POINTER  INTO BUFFER
    EEOD 005622        4975          LD.     D,[1X+FCB_POINTER+1)
    EE10 2AFEO6        4976          LO      HL,(USER_BUF]        POINTER TO  USER DATA
                       4977                                  ;B8CSTILL HAS COUNT  FROM  ABOVE
    EE13 EDBO          4978          LDIR                    ;MOVE DATA INTO  THE BUFFER
                       4979
    EE1S 22FEO6        4980          LO      [USER_BUF),HL   ; SAVE WHERE WE  LEFT OFF
                       4981
                       4962
    EE18 DOCB18F6      4983          SET     MODE_DIRTY_BIT,(IX+FCBMODE)   ;SET THE DIRTY   BIT
                       4984
    EE1C               4985  CHECK_LAST_BLOCK:
    EE1C DDCB1IB7E     4986          BIT     MODELAST BLOCK _BIT,[IX+FCBMODE]   ;CHECK  FOR  LAST   BLOCK
    EE20 2809          4987          JR      2,MOREFILE      ;JUMP IF THIS  ISN‘T LAST  BLOCK
                       A986
                       4989  ; IF THIS IS THE LAST BLOCK (AND IT’S NOW FULL)  THERE’S  NOTHING
                       4990  ; MORE WE CAN DO.  WE LEAVE THE DATA IN PLACE  (IT WILL  GET
                       4991  ; FLUSHED WHEN THE FILE IS CLOSED) ANO REPORT AN  EOF ERROR.
                       4992  ; MEANING THAT WE COULDN’T WRITE ALL THE DATA.
                       4993
    EE22 ODE           4994          POP     IX              -RESTORE REGISTERS
    EE24 £1            4995          PoP     Hi.
    EE25 Dt            4936          POP     DE
    EE26 Ct            4997          PoP     BC
    FEQ273EOR          43998         ip      A,EOFERR        SHOW  THE ERROR
    EE29 87             4399         OR      A               >SET CONDITIONS
   EE2A   C9            5000            RET
                        5001
                        §002   ; WE  COME  HERE  IF WE  HAVE  A  FULL  BUFFER   ANO  THERE’S   MORE
                        5003   ; DATA  TO  WRITE  AND  THERE  ARE  MORE  BLOCKS   TO  THE  FILE.
                        5004
   EE28                 S005   MORE FILE
   EE2B  003413         5006             INC      [IX+FCB_USED_  LENGTH]        ; INCREMENT    SECTORS   WRITTEN   TO
   EE2E  2003           5007            JR        NZ,MORE  FILE!
   EE30  003414         5008             INC      (IX*FCB_USED_LENGTHt1}
   EE33         ,       S009   MORE FILE1:
   EE33  DD7E17         5010            LD        A,[IX+FCB_DEVICE])    ;GET  THE  DEVICE   NUMBER
   EE36  2AFEOG   8 8=—s50111           LO        Hi, (BUF START)     ;GET  BUFFER   ADDRESS
   EE39  DDSE19         $012            ‘LO       E,(1X+FCB_BLOCK]     ;GET  BLOCK   NUMBER
   EE3C  DDSG61A        5013            LD        D,[1X+FCB_BLOCK+1)
   EE3F  DD4E 18        5014            LD        C,(1X*FCB_BLOCK+2)
   EE42  DD461C         $015            LO        6B(1X+FCB_BLOCK+3]             ,                                                                                        '
   EE45  CDFIEG         5016            CALL      WRITE BLOCK          ;WRITE  OUT   THE  FULL  BLOCK
                        5017
   EE48  C2EEBE         6018            uP       NZ,WRITE_ERRt     |  ;BRANCH   IF ERROR
                        5019
   EE4B                 5020   CLEAR_DIRTY_BIT:                      ,
   EE4B  DDCB 1686      5021            RES      MODE  _DIRTY_BIT..   .A+FCB_MODE)    ;CLEAR   THE  DIRTY  BIT
   EE4F  2AFEOS         5022            LO       HL,(BUF_START]       ;RESET  THE  BUFFER   POINTER
   EES2  0D7521         5023            LD        [IX+FCB_POINTER),L
   EESS  007422         5024            LD        [IX+FCB_POINTER+1).H
                        $025
   EES8  00361500       5026        .   £0        [IX+FCB_LAST_COUNT],0
   EESC  00361600       5027            LD        [IX*FCB_LAST_COUNT+1),0
                        5028                    |
   EEGO  003419         $029            INC       {IX¢FCB_BLOCK]     ;INC  THE  BLOCK   NUMBER
   EE63  2000           5030            UR       NZ,WRITE4           ;BRANCH   IF  NO  CARRY   OUT
   EE6S  DD341A         5031            INC       [IX+FCB_BLOCK+  1)
   EE6B  2008           $032            UR       NZ ,WRITE4      .
   EEGA  003416         5033            INC       [IX+FCB_BLOCK+2]
   EEGD  2003           5034            JR       NZ, WRITE4
   EEGF  00341C        5035             INC      ( IX+FCB8_BLOCK+3)
                       $036
   EE72                5037   WRITE4
   EE72  DD7E18      , $038             LD       A, [IX+FCB_MODE]    ;LOOK  AT  THE  MODE   BYTE
   EE7&  E607          5039             AND      MODE_MODE           ;GET  RIO  OF  EXTRA   BITS
   EE77  FEO3          $040             cP       MODE UPDATE         ;00  WE  HAVE  TO  PRE_READ   THE  NEXT  BLOCK?
   EE79  C2EDD1        5041             uP       NZ, WRITES          ;LOOP  TO  TOP  IF  NOT
                       $042
   EE7C                $043   WRITE_AGAIN:
   EE7C  DO7E17        5044             LD       A,{IX+FCB_DEVICE)      ;GET  THE  DEVICE   NUMBER
   EE7F  2AFEO8        5045             LD       HL,{BUF  START)     ;GET  BUFFER   ADDRESS
   EEB82 DDSE19        5046             LD       E,(IX+FCB   BLOCK]   ;GET  BLOCK   NUMBER
   EE8S  DDSGIA        5047             LD       D, (IX+FCB BLOCK+  i}
   EEas8 DD4E 1B       5048             LO       C.{1X+FCB   BLOCK+2]
   Eise  00461C        5049             LD       B,{IX*¢FCB BLOCK+3]
   Etsé  COFI7B        $050             CALL     READ BLOCK          ;PRE-READ   THE  NEXT   FILE  BLOCK
                       5051
  EE91   2028          §052             JR       NZ. WRITE ERR}      ;BRANCH   IF  ERROR
                       §053
                       5054
                       5055   |; ARRIVE  HERE  IF THE  DATA  BEING   WRITTEN   WILL  NOT  FILL   THE BUFFER
                       S056   :  EVERYTHING   IS VERY  EASY    --JyUST COPY   IT Ff       "  USER‘’S ADDRESS
                        5057   ; INTO  THE BUFFER    AND  GO AWAY.
                        5058
    EE93                5059   ROOM OK
    EES3  ED4BFEO4      5060            LD         BC, (BYTES TO GO)   ;GET  THE BYTE  COUNT
    EES7   DODG15       5061            LD         L,{IX+¢FCB_LAST COUNT  }
    EESA  DODGEIG       5062            LO         H,[IX+FCB_LAST_COUNT+1]
    EE9D  O09           5063            ADO        Hi ,BC
    EESE  007515        5064            LD         [1X+FCB_LAST COUNT],L
    EEA’  007416        5065            LO         (I1X+FCB_LAST_COUNT+1),H
    EEA4  DOSE21        5066            LD         E,([1X+FCB_POINTER)   ;GET  POINTER   INTO   BUFFER
    EEA?  D0DS622       5067            tb         D,[IX+FCB_POINTER+1]
    EEAA  2AFEO6        5068      .     LO         Hi,[USER _BU)     ;GET  POINTER   TO  USER’S   DATA
    EEAD  EDBO          5069            LDOIR                        ;MOVE  THE  DATA
                        $070
    EEAF  007321        5071            LD         (IX+FCB_POINTER]),E   ;UPDATE   THE POINTER                                                                      :
    EEB2  007222        §072            LD         [IX+FCB_ POINTER+1],0                                         .
    EEBS  DOCBISFE      §073            SET        MODEDIRTY_BIT,[IX+FCB_    MODE]   ;SET   THE  DIRTY   BIT
                        5074
    EEBS                5075  ROOM! OK:                                                    ;
   EEBS   AF            5076            XOR        A
    EEBA  1803          $077            JR         PAST_WRITE_ERR
    EEBC      |         S078  WRITE _ERR2:
    EEBC  3E09          5079            LD         A,BAD_FNUM_ERR
    EEBE                5080  WRITE _ERRI:
    EEBE  B7            $06|            OR         A
    EEBF                S082  PAST_WRITE  ERR:
    EEBF  ODE           $083            POP        Ix                ;sRESTORE  REGISTERS
    EEC1  E11           $064            POP        HL
    EEC2  Di      |     $085            POP        DE
    EECS  Ci            $066            POP       BC
    EEC4  CO            $087            RET
                        6068   *WRITEERR
                        S069   +        PoP        IX                ;RESTORE   REGISTERS
                        6080   +        POP       HL
                        6091   ¢        PoP       DE
                        5082   +        POP       BC
                        5093  +         OR        A                  >SET  CONDITIONS
                        $094  «+        RET
                        6095  *WRITE  ERR2
                        6096  «+        POP        Ix                ;sRESTORE  REGISTERS
                        6097  «+      — POP       HL
                        $098  +         PoP       DE
                        5099  *         POP       BC
                        $100  +         LO        A,BAD_FNUM_ERR     ;SHOW  AN  ERROR
                        5101  -         OR        A                  ;SET  CONDITIONS
                        $102  *         RET
                        §103   ;
                        5104   ,BSRSSRKESSESSSSSSSTSSSSESRSERSSETESEXCZTOST ASECTARSTSCSKECSKRERSERRAESESEESBSA
                        §105   ,BSSSRSRHRKEBBSTESESTCTSERSESRAHASSESTRECSSA  BASHSSC RSKRSESHSRSEABKRESBBTRZKRET
                        §106   ,BSSSCSCSHSHRSSEKSSHERSRESSCSTSSSESRESESRSSESSTOERTSSAE STRESSES SKRRBET SBEKKEE
                        $107   ;
                        5108
                           5110          ;GLB     __SET_DATE,  GET   DATE
                           $112
                           $113
                           $115  ;
                           5116  ; _SET_DATE   -- Set  the  current   date.
                           Sivi7 ;        |
                           5116  ; ENTRY PARAMETERS:   B  = day  (1..31)
                           $119  ;           |         C  = month  (1..12)
                           §120  ;                     DO = year  (83. .99)
                           $121  ;
                           $122  ; EXIT PARAMETERS:   none
                           $123  ;
          7                $125                                                                                            .                               Lo                :
    EECS                   $126   SET  DATE   |
    EECS  FS               §127          PUSH     AF                  ;SAVE  THE   CURRENT   A
                           5128
    EEC6  78               §129   -:     LO       A.B                 ;STORE   THE  DAY
    EECT  32FDE2           §130       |  LO       (EOS DAY),A
    EECA  79              §131           LD       A.C                 ;STORE   THE  MONTH
    EECB  32FDE1          §132           LD       [EOS MONTH),A
    EECE  7A              $133           LO       A,D                 ;STORE   THE  YEAR
    EECF  32FDEO          §134           LD       (EOS YEAR],A
                          $135
   EED2  F1          |    5136           POP      AF                  ;RESTORE   A
    EEDS C9               $137           RET
                         5140 ;
                         5141 ; _GET_DATE  -- Reads the  current date.
                         §142 ;
                         $143 ; ENTRY PARAMETERS: none
                         5144 ;
                         6145 ; EXIT PARAMETERS: no errors   --Z2= 1; A=O
                         $146 ;                                B = day
                         6147 ;                                C = month
                         6148 ;                                O = year
                         6149 ;
                         $150 ;                  error  (date never set) -- Z  =0; A = error code
                         6151;                                 B=   O
                         6152 ;                                cz   O
                         §153 ;                                02   O
                         6164 ;
                         6156
    EED4                 $157  GET DATE
    EED4 3AFDE2          $158         LO      A,{EOSDAY]
    EEDT 47              §159         LO      B.A              ;GET THE DAY
    EEDS SAFDE1          5160         LD      A,[EOSMONTH)
    EEDS 4F              §161         Lo      C,A              ;GET THE MONTH
    EEOC 3AFDEO          6162         LO      A.[EOSYEAR]
    EEDF 87              8163         LD      DA               ;GET THE YEAR
                         6164
   ~€&EO BO              $165         OR      8
    EEE  Bt              6166         OR      C                ;CHECK FOR ALL = O
    EEE2 2802            §167         JR      Z,GET_ERROR      ;BRANCH IF ERROR
    EEE4 AF              5168         XOR     A                ;SHOW NO ERROR
    EEES CO              6169         RET
                         6170
    EEEG                 $171 GET_ERROR
    EEEG 3EO4            8172         LD      A,NO_DATE_ERR    >SHOW AN ERROR OCURRED
    EEES B7              §173         OR      A                ;CLEAR Z FLAG
    EEES CO              $174         RET
                         5175 ;
                         $176 ,SESRATESSSSSHSTKSSRSSRESSERSHHTEESSH KRESSSSETHASSTSETASSESSBAEAERS
                         6177 «sesaseseeSSSRRESEESERERSESARSEESSSETRRTTARSATI SERHETSERSRATRERABES
                         8178 ;SSeeneeeseeseeeeceaseacenenasescaserensesroccesseacegeseenzesenees
                         5179
                         $180
                           §182   ;
                           §183   ;   Rev.   1   O7octSiSp    RPD   made  _ DELETE  FILE    check   for  protected    file
                           §1864  ;
                           §185
                           § 186           ;GLB      __FMGR_INIT,SCAN    FOR_FILE,STRCMP,MODE       CHECK
                           § 187           ;GL8      READ_BLOCK   WRITE  BLOCK  ,BASECMP,    WRITE   BLOCK
                           $188            ;GL8      __ MODE CHECK,   READ   BLOCK,   SCAN   FOR_FILE
                           $189            ;EXT      __RD_1  BLOCK,   WR   1 BLOCK,   REQUEST    STATUS
                           $190            ;EXT      _  QUERY FILE,   SET   FILE
                           §191            sEXT      QUERY BUFFER,FILENAME     CMPS
                           $192             EXT      FCB_HEAD_ADOR,FCB_DATA_ADDR
                           §193            sEXT      USER  _NAME ,BUFSTART
                           $194             EXT      RETRY  COUNT
                           §195            sEXT      FILE COUNT   ,MOD_FILE  COUNT
                           $196                                                                                                                                              ;
                           §197
                           S198   ;----- enon room nenee- wt tt     nn     ne  nr       ee     ne     eee eee  eee
                           §199   ;
                           $200   ;  __FMGR_INIT:   sets  up  everything   to  start  with.
                           $201   ;
                           6202   ;  ENTRY  PARAMETERS:   DE  contains  address    to place   FCB  buffers,
                           $203   ;                  and  HL contains   address    to place   FCS  headers.
                           $204   ;
                           $205   ;  EXIT  PARAMETERS:   none.
                           $206   ;
                           $208
    EEEA                   5208
    EEEA   EDS3FOFF        5210             LD       [FCB_DATA_ADDR),DE     ;SAVE   BUFFER   ADDRESS
    EEEE   22FDFD          $211             LO       {[FCB_HEAD_ADDR).HL    ;SAVE   HEADER   ADDRESS
                           8212
    EEFt   CS              $213             PUSH     BC                  ;SAVE  REGISTERS
    EEF2   DS              $214             PUSH     DE
    EEFS   ODES            §215             PUSH     Ix
                           $216
    EEFS  0603             §217             LO       8,NUM_FCBS          ;SET TO  #  FCBS
    EEFT   110023          $218             LO       DE ,FCB_LENGTH      ;SET FOR   AODITION
    EEFA   DD2AFOFD        $219             LO       IX,{FCB_HEAD   ADOR]   ;GET  AODR   OF  OTH  FCB
                           $220
    EEFE                  $221   INIT_LOOP
    EEFE  00361800        §222              Lo       [IX+FCB_  MODE], MODE UNUSED    ;SHOW   THE  FCB  IS  EMPTY
    EFO2  0D19            §223              ADD      IX ,DE             ; ADVANCE   POINTER   TO  NEXT  FCB
    EFO4   10F8           §224              OUNZ     INIT _LOOP         ;LOOP   FOR  ALL  FCBS
                          §225
    EFO6  DDE!            $226              POP      IX                 ;RESTORE    REGISTERS
    EFOS8 D1              5227              PoP      DE
    EFOS  Ci              5228              POP      BC
    EFOA  C9              $229              RET
                         $231 ;---rrrr  Srmeme mmmt  mmm  temem mmrnme tree neeennner            en-
                         $232 ;
                         $233 ; SCAN_FOR_FILE  -- Look  inthe directory for a  file name.
                         §234 ;                Reads each block of the directory   into a  buffer
                         $235 ;                (in the system‘’sFCB) and scans  through   for a
                         $236 ;                match with the caller’s string.
                         $237 ;
                         $238 ; ENTRY PARAMETERS:  address of name string  inHL;  device   # inA
                         $239 ;         ASSUMES  FILENAME CMP SET UP FOR FILE  COMPARES
                         $240 ;         O  - USE STRCMP ,  NOT O  -USE BASECMP   FOR  FILE  NAME COMPARISIONS
                         $241 ;
                         5242 ; EXIT PARAMETERS:  if match found  --Z =  1;A=   0; file’s   start
                         6243 ;                block tm BCDE; directory block  left  in buffer,
                         S244 ;                address of entry  left inFCB_POINTER.
                         $245 ;
                         6246 ;                   if mo match found -- Z = 0;  A = error   code;
                         6247 ;                BCDE = junk; other stuff = junk.
                         8248 ;
                         B24  srr                               rr  rr rrr        tn       reer  rene
                         $250
    EFOS                 $251 SCAN  _FORFILE:
    EFOS                 $252 SCAN_FOR_FILE
    EFOB   E€5           6253         PUSH     HL               ;SAVEREGISTERS
    EFOC  DDES           $254         PUSH     Ix
    EFOE   FOES          6265         PUSH     ly
                         $256
    EF1O   22FE10        5257         LD       (USER_NAME],HL  ;SAVE USER’S STRING  ADDRESS
                         5258
    EF13  DO2AFDOFD      $289         LO       IX,[FCB_HEAD_ADOR] ;GET ADDRESS  OF SYSTEM'S   FCB
                         $260
                         6261 ; First, set  up as much of the FCB as we can.
    EFI7  007717         $262         LD       [IX+FCB_DEVICE],A  ;SETTHE DEVICE  ADDRESS   PASSED TO  US
                         5263
    EF1A  DD361901       5264         LD       (IX+FCB_BLOCK),1  ;SETBLOCK TO  1
    EF1E  D0D361A00      §265         LD       {IX+FCB_BLOCK+1),0
    EF22  DD36 1800      $266         LD       (IX¢FCB_BLOCK+2],0
    EF26  0D361C0O       8267         LO       (IX+FCB_BLOCK+3],0
                         $268
    EF2A   EDSBFOFF      $269         tO       DE,{FCB_DATA_ADDR] ;SET BUFFER ADDRESS
    EF2E  007321         $270         LD       [IX+FCB_POINTER),E
    EF31  DO7222         $271         LD       [IX+FCB_POINTER+1),D
                         $272
    EF34                 $273 RO_TMEOUT:
    EF34   21FDD4        $274         LD       HL,FILECOUNT
    EF37   3600          $275         LD       {HL},0
                         §276
    EF39@ DD7E17         §277         LD       A,{IX+FCBDEVICE]  ;:GETTHE DEVICE  NUMBER
    EF3C   2AFDOFF       6278         LD       HL,[FCB_DATA_ADDR] ;GET BUFFER ADDRESS
    EF3F  DDSE19         §279         LD       E,{IX+FCBBLOCK)  ;GET BLOCK NUMBER
    EF42  DDS61A         $280         LD       D,[IX+FCBBLOCK+1]}
    EF45  DD4E18         5281         LD       C.{IX+FCBBLOCK+2]}
    EF48  DD461C         5282         LD       B,[IX+FCBBLOCK+3]
    EF48  COF 178        §283         CALL     READBLOCK       ;READ FIRST BLOCK  OF DIRECTORY
    EF4E   C2FO26        5264         JP       NZ,SCANERROR    ;BRANCH IF ERROR
                         5285
    EFS?                 5286 GETBUFF ADDR:
                         5287
             EFS1  £5              5288           PUSH  —s-HL                 ;GET  BUFFER  ADDRESS   INTO   IY TOO
             EFS2  FDE1            5289           pop      ly
                                   5290
             EF54  FO7EOC          5291           LD       A,[IY+VOL_DIRSIZE]     ;GET  THE DIRECTORY    SIZE
             EFS7  E67F            5292           AND      O7FH               ;ZERO  PERM  BIT
                                   5293  ;        INC      A                  ;ADD   1 ‘CAUSE WE  START   IN BLOCK    1
                                   5294  ;        DEC      A                  ;SUB   1 ‘CAUSE OF  PICKET   FENCE   PROBLEM
             EFS   007710          5295           LD       [IX+FCB_LAST_BLOCK),A      ;SET LAST BLOCK    IN FCB
             EFSC  DD361E00        5296           LO       [IX+FCB_LAST  BLOCK+1],0     ;(ALL MSBYTES   WILL   BE  0)
             EF6O  DD361FOO        6297           LO       [IX+FCB_LAST_BLOCK+2]}.0
             EF64  00362000        5298           LO       [IX+FCB_LAST_BLOCK+3],0
                                   5299           |
             EF68  COFO35          5300         " CALL     CHECK_IF_DIRECTORY               ;CHECK   IF DIRECTORY    EXIST
             EF68  C2F0O26         5301           uP       NZ,SCAN_ERROR
                                   5302                        |
             EFGE  DD7E21          8303           LO       A,(IX¢FCB_POINTER)     ;ADVANCE  POINTER   TO  NEXT  ENTRY
             EF71  CO1A            5304           ADO      A,OIR_ENT_LENGTH
             EF72  007721          5305           LO       [1X+FCB_POINTER),A
             EF76  DD7E22          5306           LD    ss A,[IX*FEB_POINTER+   1]
             EF79  CEOO            5307           ADC      We)
             EF7B  007722          5308           LD       (IX+FCB_POINTER+1).A
                                   5308
             EF7E  21F004          5310           LD       HL,FILE COUNT
             EF81  34              5311           INC      (He)
               |                   5312
             EF82  0626            5313           LO       B,ENT_PER_BLOCK-1     ;SET DIR  ENTRY  COUNT   FOR  FIRST   BLOCK
             EF84  1848            5314           JR    -—sSCAN2              ;JUMP  INTO  THE LOOP
                                   5315
             EF86                  5316  SCANI
             EF86  003419          5317           INC      [IX+FCB_BLOCK]     ;INC  THE  BLOCK NUMBER
                                   5318                                       ;WE CAN  ASSUME  THERE’S   NO  CARRY   OUT
                                   5319                .
                                   5320  ; SEE  IF THERE  IS MORE DIRECTORY:    I.E.  IS  FCB_BLOCK   > FCB_LAST_BLOCK?
                                   5321  ; IF  TRUE, GO TO  NO_ENT.
                                   5322
             EF89  DD7E20          $323           LD       A,[IX+FCB_LAST_BLOCK+3]
             EF8C  DOBEIC          5324           cP    sé CIX#FCB_BLOCK+3)
             EFSF  DAFO2C          $325           JP     sé, NOO_ENT         ;BRANCH  IF  NO MORE  DIRECTORY
             EF92  DOTEIF          5326           LO       A,({IX+FCB_LAST_ BLOCK+2)
             EF9S  DDBE1B          5327           cP       [IX+FCB_BLOCK+2)
             EF98  DAFO2C          $328           uP       C,NO_ENT          ;BRANCH  IF  NO MORE  DIRECTORY
             EF9B  DOTEIE          53290          LO       A,[IX+FCB_LAST_BLOCK+1]
             EFQE  DDBE1A          5330           cP       [IX+FCB_BLOCK+1]
             EFA’  DAFO2C          $331           JP       C,NO_ENT         ;BRANCH   IF  NO MORE  DIRECTORY
             EFA4  DD7E10          $332           LO       A,[IX*FCB_LAST_ BLOCK)
             EFA7  DOBE19          5333           cP       [IX+¢FCB_BLOCK)
             EFAA  DAFO2C          5334           uP       C,NO_ENT         ;BRANCH   IF  NO MORE  DIRECTORY
                                   5335
             EFAD                  5336  RD_TMEOUT!:
             EFAD  DD7E17          5337           LD       A,[IX+FCB_DEVICE)    ;GET  THE  DEVICE  NUMBER
             EFBO  2AFOFF          5338           LO       H.,([FCB_DATA_ADDR)   ;GET  BUFFER  ADDRESS
             EFB3  DDSE19          5339           LD       E,(I1X+FCB_BLOCK]   ;GET  BLOCK  NUMBER
             EFB6  DDS61A          5340           LD       O,[1X+FCB_BLOCK+1)
             EFB9  DD4E1B          5341           LO       C,{IX+FCB_BLOCK+2)
             EFBC  DD461C          5342           LD       8,(1X+FCB_BLOCK+3]
             EFBF  ChE”            5343           CALL     READBLOCK          ;READ  THE  NFXT 2L0CK
             EFC2  C               $344           uP       NZ,SCAN_ERROR    = ;BRANCH  IF
                        5345
    EFCS                5346 GETBUFF _ADDR1:
                     :  §347
                        $348
    EFCS EDSBFDFF       5349         LO        DE,(FCB_DATA_ADDR]   ;GET BUFFER ADDRESS
    EFC9 007321         $350         LO        {IX+FCBPOINTER],E    ;PUT IT INTO THE FCB
    EFCC 007222         §351         LO        (IX+FCB_POINTER+1).D
                        $352
    EFCF 0627           $353         LD        B,ENT_PER_BLOCK  ;SEi .NTRY  COUNT
                        $354
    EFD1                $355 SCAN2           :
    EFD1 21FDD4         $356         LO        Ht,FILECOUNT
    EFD4 34             $357         INC       (Ht)
                        5358
    EFDS DDSE21         $359         LO        E,[IX+FCB_POINTER)  ;GET  POINTER INTO DE
    EFD8 005622         5360         LO        D,[1X+FCB_POINTER+1)
                        5361
    EFOB 2E0C           5362         LD        L,OIR_ATTR          ; OFFSET  (FOR ATTR)  INTO DIR  ENTRY
    EFODO2600           5363         LO        H,O                 ; NOT  USED
    EFOF 19             5364         ADO       HL,DE               ; SET  UP HL TO POINT  TO IT
    EFEO CB46           $365         BIT       ATTR_HOLEBIT, (HL]  ; IS  IT THE HOLE?
    EFE2 2048           5366         JR        NZ.NO_ENT           ; YUP,  OON’T BOTHER SEARCHING   ANY  MORE
    EFE4 CBS6           $367         BIT       ATTR_DEL_BIT,(HL]   ; IS  THIS FILE DELETED?
    EFE6 2013           $368         JR        NZ,FILEDELETED      ; YUP,  DON’T EVEN BOTHER  CHECK   FILE  NAMES
                        5369
    EFES 2AFE10         5370         LD        HL,[USER_NAME}
                        5371
    EFEB 3AFDDS         8372         LO        A,[FILENAME _CMPS]  ;
    EFEE 87             6373         OR        A                  ; IS  IT ZERO?
    EFEF 2806           5374         UR        Z,FULL_FILENAME    ; YUP,  COMPARE THE FULL  FILE  NAME
    EFF1 COFOS4         5375         CALL      BASECMP            ; NOPE,  COMPARE JUST THE  BASE
    EFF4 18603         6376          JR        ERROR_CHECK
    FFG                 S377 FULL_FILENAM:
    EFFE COFOS3         6378         CALL      STRCMP           ; COMPARE  THE FULL FILE NAME  (BASE   PLUS  EXTENSION)
    EFF®                S379 ERROR_CHECK:
    EFFOS2815           8380         JR        2,SCAN3          BRANCH   IF YES
                        8381
    EFFB                $382 FILEDELETED:
    EFFB OD7E21         6383         LD        A.[IX+FCB_POINTER]  ;ADVANCE  POINTER TO NEXT  ENTRY
    EFFE C61A           5384         ADD       A,OIR_ENT_LENGTH
    FOOO 007721         5385         LO        [IX¢FCBPOINTER],A
    FOO3 DD7E22         5386         LD        A,[IX+FCB_POINTER+1)
    FOO6 CEOO           $387         ADC       A.O
    FOOS 007722         $368         LD        {IX+FCB_POINTER+1],A
                        6389
    FOOB 10C4           5390         DUNZ      SCAN2            ;LOOP  IF MORE ENTRIES TO  CHECK  IN  THIS  BLOCK
                        $391
    FOOD C3EF86         8392         JP        SCAN1            ;ELSE GET  NEXT BLOCK
                        $393
    F010                6394 SCAN3
    FO1O D5             §395         PUSH      DE               ; GET DIR  ENTRY PTR INTO  IY
    FO11 FDE1           5396         PoP       ly
                        5397
    FO13 FDSEOD         5396         LO        E,[1Y¥+DIR_STARBLOCK+tO]
    FO16 FOS60E         5399         LD        D,{1Y+DIRSTART BLOCK+1)
    FO19 FO4EOF         54090        LD        C,[1Y¥+DISTART BLOCK+2?
    FOIC FD4610         5403         LD        B.[1Y¥+#DSTART BLOCK?  3:
                         5402
    FOF  FOE1            5403          Pop       Ty                 ;RESTORE REGISTERS
    FO21 DDE1            5404          POP       IX
    FO23 Et              5405          PoP       HL
    FO24 AF              5406          XOR                          ;SHOW NO ERROR
    FO2S oe              5407          RET
                         $408
    FO26                 5409 SCAN_ERROR
    FO26 FDE1            5410          PoP       ly                 ;RESTORE REGISTERS
    FO28 DDE1            S411          pop
    FO2A Et              5412          PoP       HL
    FO28 ce              5413          RET
                         5414
    FO2C                 5415 NO_ENT
    FO2C FDE1            5416          POP       Iv                 sRESTORE REGISTERS
    FO2E DOE1            $417          PoP       IX
    FO30 E1              5418          POP       HL
    FO31 3E0S            5419          LD        A,NO_FILE_ERR
    F033 87              5420          oR        A
    F034 ce              $421          RET
                         5422
                         5423
                           5425
                           $426  SSSCSSHSESTSSEESSEHSSSHSHSSE   SHSHSE   SESH HESS  EHEHEHESEHEKEHRSEHK          HERERO
                           $427  SSSESSSSSESSSESSESSHSSSESHSSSESHESHEHHESEHTEESHEHEEHSETESEESSE    HESTHEEEREHESEHEHEHRESES
                           $428
                           $429         CHECK_IF_DIRECTORY       VERIFIES   THE  EXISTENCE    OF  A  DIRECTORY
                           $430                     ON  THE MEDIA    IN THE  DEVICE
                           $431
                           $432           INPUT:     Ivy  -   POINTS   TO  THE VOLUME    ENTRY   (FIRST   ENTRY   INTO  THE OITRECTORY)
                           $433
                           5434           OUTPUT :   CONDITION    FLAGS       |
                           5435                           2  - DIRECTORY    EXISTS
                           6436                          NZ  - NO  OIRECTORY
                           6437                                    A  = ERROR  CODE
                           $438
                           6439
                           5440                     ALL  REGISTERS    PRESERVED   EXCEPT   AF
                           5441
                           6442  SSCSSSSSHSSSSCSSSSSHSSSSSESSSSSEHESESSEHSKSSESESTSESSSESEHESCHEESE  RESESEHEHEKESESEEES
                           6443  SSOSSSSHESSSHSSSESSSSSSESESSSSSSSSSESCHSSSESSTSESHESEHHOSSESCHESESESE  SSESEHSSHEHHEESHEESH
                           6444
                           5445           ;GLB       CHECK_IF_DIRECTORY
                           6446           sEXT       DIRECTORY   CHECK
                           $447
    FO3S                   5448  CHECK_IF_DIRECTORY:
    FO3S  FOES             5449            PUSH      ly
    FO37  cs               6450            PUSH      BC
    FO38  Es               $451            PUSH      HL
                           $452
    FO39  21F3E7           6453            LO        HL ,DIRECTORY  CHECK          ;  4  UNIQUE   BYTES   PLACE   IN  VOLUME ENTRY
                           5454                                                       AT  CREATION    TIME   (BYTES   DEFINED IN  EOS  MKDIR)
                           6455
    FO3C  0604             5456            LO        8,4                              COMPARE    4 BYTES
    FO3E                   8457  NEXT_CHECK:
    FO3E  7E               5458            LD        A, (HL)                          GET  THE   FIRST   UNIQUE   BYTE
    FO3F  FOBEOD           6459            ce        [1Y¥+VOL_DIR_CHECK]              SAME  AS  ON   TAPE?
    FO42  2008             8460            JR        NZ,NOT_DIR                    ;  NOPE
                           6461
    FO44  23               6462            INC       Hi                               YUP,  CHECK   NEXT   BYTE
    FO45  FD23             5463            INC       ly
    FO47  10FS             5464            DJUNZ     NEXT_CHECK
                           $465
    FO49  AF               5466            XOR       A                                DIRECTORY    EXISTS
                           §467
    FO4A                   5468  GET_OUT_HERE:
    FO4A  E1               5469            Pop       HL
    FO48  Ci               $470            PoP       BC
    FO4C  FDE1             $471            POP       Ty
                           5472
    FO4E  c9               §473            RET
                           5474
    FO4F                   §475  NOT_DIR:
    FO4F  3E18             5476            LD        A.NO_DIR_ERR
    FOS1  16F7             5477            JR        GET OUT  HERE
                           5478
                                                                                     oe   @9%* &@# &@ #&@@   &#@ ©
                            |@                                                                      ~7-=====
                         $481  ;
                         5482  ; STRCMP   --compare  two  strings   (file names).
                         $463  ;    |
                         5484  ; ENTRY  PARAMETERS:  address   of name  string   in HL;  address    of
                         $485  ;                name  within   dir entry   in DE.   NOTE:   string
                         S486  ;                pointed   to  Dy HL must  be  terminated    with  ETX.
                         $487  ;                Maximum   Of  NAMELENGTH   characters    are  compared.
                         $4668 ;
                         $469  ; EXIT  PARAMETERS: Z  =  1; A  = O  1fmatch   or
                         5490  ;                Z2= 0;  A  *  error code   if no  match.
                         $49!  ;
                         $493
               <FO5S4>   8494  BASECMP:  EQU    $t1                 ;EXECUTES    SCF  (37H)  - COMPARE    ONLY  THE  BASE                                             .
                         $495                                      ;  OF  THE  FILE  NAME
    FOS3                 $496  STRCMP:                             ;  “AND   INSTRUCTION    CLEARS   CARRY   - COMPARE    BASE   &
    F033   E637          $497           AND     037H       |       ;      EXTENSION
    FOSS   ES            $498           PUSH    Hi                 ;PRESERVE   REG‘S
    FOOSE 0S             8499           PUSH    DE
    FOS7  CS             $500           PUSH    BC
    FOBS   FS            58501          PUSH    AF                 ; SAVE  CARRY   FLAGGING   EXECUTED    ABOVE
                         §$02
    FO59  O6O0C          $503           LD      B.NAME_ LENGTH     ;INIT  MAX  COUNT
   FOSS                  S504  NEXT_CHAR
    FOSB  7E             8508           LD      A,(HL)             ;GET  CHAR  FROM  STRING
    FOSC  FEOS           6806           cP      ETX                ;HAVE  WE  REACHED   END  OF  STRING?
    FOSE  2617           $807           JR      Z,EOS              ;BRANCH   IF YES
    FOGO   1A            §508           LD      A,(OE)             ;GET  CHAR  FROM  DIR  ENTRY
    FO61  BE             8508           cP      {HL}               ;COMPARE   TO STRING
    FO62  2007           5510           JR      NZ,MATCHLESS       ;BRANCH   IF DIFFERENT
    FO64  23             $811           INC     HL                 ;ELSE  INC.  POINTERS
    FO6S   13            $312           INC     DE                        ;
    FO66   10F3          6813           DUNZ    NEXT CHAR          ;LOOP  IF  MORE  CHARS  TO  LOOK   AT
    FO6S  Ci             $514           POP     ac                 ; POP  AF  INTO  BC
    FO6S   1812          5515           JR      MATCH              ;ALL  12 MATCH   IF WE  GET  HERE!
    FOG6E                S516  MATCHLESS
    FO6GS Fi             $517           POP     AF                 ; COMPARE   BASE  OR  BASESEXTENSION
    FO6C  3014           5616           JR      NCNO  MATCH        ; NEEDED   TO COMPARE   THE  WHOLE   FILE  NAME
                         5519                                      ; ONLY  COMPARE   THE  BASE
    FOGE  23             §820           INC     Hi                 ;POINT  TO  NEXT  CHAR  OF  NAME   STRING
    FOGF   13            $521           INC     DE                 ;  AND  DIR  ENTRY  NAME
    FO7O  7E             $522           LO      A,{Ht]
    FO71  FEOS           §$23           cP      ETX                ; IS  IT ETX?
    FO73  2000           $524           JR      NZ,NO_MATCH        ; NOPE,  DOES  NOT  MATCH
    FO7S   1601          5325           JR      ARQUNO POP
                         $526
    FO77                 $527  EOS
    FOTT  Ci             5528           POP     BC                 ; AF  INTO  8C TO  PRESERVE    AF
    FO78                 5529  AROUNDPOP:
    FO78   ia            §530           id      A,(DE}             ;LOOK  AT  CHAR  IN DIR  ENTRY
                         $531                                      ;0L8(8/29/83)    CHANGED   SPACE   TO  ETX.
    FO7S  FEO3           §532           cp      ETX                -END OF  FILE  NAME?
    FO7B  2005           $532           UR      NZ,NO_MATCH        [BRANCH  IF  NOT
    FO7D                 $534  MATCH
    FO7D  Ct             5535           PoP     BC                 RESTORE    REG‘S
    FO7F E1           5537         PoP      HL
    FOBO AF           §538         XOR      A                 ;SHOW THE MATCH
    FO81 C9           5539         RET
    FO62              5540 NO_MATCH
    FOB2 Ci           5541         PoP      BC                ;RESTORE REG’S
    FOB3 DI           8542        POP       DE
    FOB4 E1           5843         PoP      HL
    FOSS 3E08         5544         Lo       A,MATCH_ERR
    F067 87           5545         OR       A
    FOSS C9           5546         RET                        ;RETURN WITH NZ CONDITION
                       5548
                       5549
                       §550
                       5551
                       §552     THIS ROUTINE CHECKS TO  SEE  IF THE FILENAME (POINTED TO BY HL)
                       §553     IS ALREADY OPEN AND EXIST   IN THE FCB
                       §554
                       5555                 INPUT:   HL        POINTER TO FILENAME (ETX TERMINATED)
                       §556
                       §557                 OUTPUT:  CONDITION   FLAGS
                       5558                          NZ        NOT IN FCB (NOT OPENED)
                       5559                                    A = ERROR CODE
                       5560                                    HL = ORIGINAL POINTER TO FILENAME
                       §561                           z        IN FCB
                       §562                                    A = FILE NUMBER
                       §563                                    B = MODE               |
                       5564                                   HL = POINTER TO START OF FCB   *
                       §565
                       5566  SSSSSSSSSSSSSESESSSSESESSESSESSSSESHSESSESHEHSSEHSSHESSKSESHESHSSHSSHESESHESEEHESHEESTSESSHEHEE
                       5567
                       5568   GET_OUT             U_GET_OUT                    .
                       5569   NEXT_FCB CHANGED TO U_NEXT_FCB   TO PREVENT CONFLICT WITH
                       5570   IDENTICAL LABEL ELSEWHERE
                       §571
                       5572       ;GLB     __CHECK_FCB
                       §573       >EXT     FILE_NUMBR
                       5574
    FO8S               §575 __CHECK_FCB:
    FO8S DDES          5576        PUSH    IX
    FO8B DS            5577        PUSH    DE
                       5578 :      PUSH    BC
    FOBC               5579        PUSH    HL
                       §580
    FO8D 2AFOFD        §581        LO      Hi,(FCB_HEAD_ADDR]
    FO80 AF            §582        XOR     A                         ; ZERO OUT A
    FO91               §583 U_NEXT_FCB:
    FOS1 3c            5584        INC     A                         ; CONTAINS THE FILE NUMBER
    FOS2 32FD07        5585        LD      [FILE _NUMBR).A           ; (THE POSITION  ON THE  TAPE)
                       5586
    FO95 110023        5587        LD      DE,FCB_LENGTH             ; NUMBER OF BYTES IN EACH  FCB
    FOS8 19            §588        ADD     HL,DE                     ; POINT TO NEXT FCB ENTRY
                       5589
    FOS9 ES            §590        PUSH    HL
    FOSA DOE1          5591        PoP     IX                        ; IX POINTS TO START OF  FCB
                       §592
    FOSC DD7E18        5593        LD      A,[IX+FCB_MODE)           ; GET MODE
    FOSF E607          $594        AND     MODE_MODE
    FOAt FEOO          5595        cp      Oo                        ; IT IS UNUSED?
                       5896
    FOA3 2812          §597        JR      Z.€ND_FCB                 ; YUP, LOOK AT NEXT FCB
                       5598
    FOAS EG            5599        EX      DE.HL                     ; DE = POINTER TO FCB NAME  STRING
    FOAG6Et            5600        PoP     HL
    FOA7  he           560i        PUSH    HL                        > HL   POINTER TO FILENAME  TO  SEARCH   FOR
                       5602
    FOAS ns            560%        PUSH    DE                           i* - er3Rkroe$f ee  . ; * AfAAas
    FOAS 01000C         5605        LO       BCNAME LENGTH             - NO. OF CHARACTERS IN NAME
                        5606                                           - HE = FILE NAME STRING
    FOAC                5607 NEXT CHAR}:
    FOAC 1A             5608        LD       A,(DE)                    ; DE = FCB FILE NAME
    FOAD FEO3           $609        cP       ETX                       ; IS IT EFX?
                        5610
    FOAF 2813           S611        JR       Z,1TS_ETX1                ; YUP
                        $612
    FOB’ EDA            $613        CPI                                ; DO CHARS MATCH ([HL]}= A)?
                        $614
    FOB3 13             6615        INC      DE
    FOB4 28F6           6616     _  oR       2,NEXTCHARI               ; YUP,CHECK NEXT CHAR OF FILE NAME
                        8617
    FOBE6E1             $618        POP      HL                        ; pointer to FCB
    FO87                68619ENDFCB:                                                                                                               ,
    FOB? 3AFDO7         $620        LO       A,(FILE_NUMBR]}           ; ARE WE AT 2ND FILE(FCB)?
    FOBA FEO2           6621        cp       NUMFCBS-1                 ; NO. OF FCB’S - SYSTEM FCB
                        $622
    FOBC 2003           6623 —      JR       NZ,U_NEXT_FCB             ; NOPE, NOT YET,
                        $624
    FOBE                6625 NOMATCH!:
    FOBE £1             $626        POP      HL                        ; HL = ORIGINAL POINTER TO FILE NAME
                        $627
    FOBF 3£05          5628         LD       A,NO_FILE_ERR             ; NO MATCH FOUND
    FOC! 87             6629        OR       A
    FOC2 1811          8630         JR       GET_OUT_ERR
                        8631
    FOC4                6632 ITS_ETX1:
    FOC4 7E             6633        LD       A,{HL]                    ; GET ASCII CHAR
    FOCS FEOS3          5634        cep      ETX                       ; IS IT ETX?
    FOC] E1             6635        PoP      HL                        ;*pointerto  FCB
    FOCS 20F4           6636        JR       NZ,NO_MATCHi              ; NOPE
                        $637
                        6638 ;      PUSH     HL                        ; Copy pointer to FCB so can index to mode
                        68639;     POP       Ix
                        8640
    FOCA DOTE18         564{        LD       A,[1X+FCB_MODE )          ; GET MODE THIS FILE WAS ORIGINALLY
    FOCD E607           $642        ANO      MODEMODE                  ; OPENED FOR AND MASK OFF FLAG BITS
    FOCF 47             6643        LO       BA                        ; PASS IT BACK IN B
                        5644
    FODO AF             6645        XOR      A                        "; INDICATE Z CONDITION
    FOOD’3AFDD7         8646        LO       A.{FILE _NUMBR)           ; GET FILE NUMBER
                        6647
    FOD4                6648 U_GET_OUT:
    FOD4 Di             5649        POP      DE                        >*clean off pointer to name
                        6650 ;      POP      6C
    FOODS               $651 GETOUT ERR:
    FOOS D1             $652        PoP      DE
    FOO6 DDE1           $653        PoP      Ix
                        $654
    FOO8 C9             6655        RET
                        $656
                         5658
                         SE59 poms                                            rrrcccrsrcnrrrncss
                         S660 ;
                         5661 ; MODECHECK:  sees if an attribute byte matches a permission request.
                         S662 ;
                         S663 ; ENTRY PARAMETERS: IX- FCB POINTER
                         5664 ;                   HL- DIR ENTRY
                         5665 ; EXIT PARAMETERS:  2=1=0K
                         S666 ;                   Z=0=NO WAY
                         5667 ;                   A=TRASH
                         S668 ;                   IX AND HL PRESERVED
                         S669 ; 0LS(8/30/83)
                         BC7I0srr                                 rrr rrrrrrarrcrcrcrcrccsc nann
                         5671
                         5672 ; OK CHANGED TO U_OK TO PREVENT CONFLICT WITH IDENTICAL                                                                     ‘
                         5673 ;LABEL ELSEWHERE
                         5674
      FOODS              S675   MODECHECK:
      FOODS              S676 MODECHECK:
                         6677
      FOD9 FDES          5678         PUSH    IV                     ;SAVE REG IY
      FODS ES            5679         PUSH    HL                     ;SAVE DIR ENTRY
      FODC DO7E18        5660         Lo      A,[1X+FCB_MODE}        ;GET THE MODE THE USER PASSED IN
                         5681 «+
                         6682 *  RANGE CHECK THIS REQUEST
                         5683 *
      FODF E607          5684         AND     MODEMODE               ; AND OFF TEST BITS
      FOE1 FEOO          5685         cP      Oo                     ;MAKE SURE HE’S IN RANGE
      FOES 281F          5686         JR      Z,RANGE_NONO
      FOES FEOS          5687         cP      MODEMAX+1
      FOE7 3018          5688         JR      NC,RANGE_NONO
                         S689 +
      FOES 21F10A        5690         LD      HL,ATTRIB_TBL          ;INDEX INTO THE MASK TABLE
      FOEC 8S            5691         ADO     A,L                         |
      FOED 6F            5692         LD      L.A
      FOEE 3001          $693         JR      NC,ADJUST
      FOFO 24            $694         INC     H
      FOF1               $695 ADJUST
      FOF1 FDE1          5696         PoP     ly                     ;GET THE DIR ENTRY POINTER INTO  IY
      FOF3 FDES          5697         PUSH    IV
      FOFS FD7EOC        5698         LO      A,[IY+DIR_ATTR]        ;GRAB HIS ATTRIBUTE BYTE
      FOF8 AG            5699         ANO     {Ht}                   ;COMPARE IT TO THE USER‘’SREQUEST
      FOFS 2005          5700         JR      NZ,PROTECTFAULT
      FOFB               5701 U_OK
      FOFB £1            $702         PoP     HL
      FOFC FDE1          $703         PoP     ly
      FOFE AF            5704         xOR     A                      ;INDICATE ALL IS WELL
      FOFF C9            5705         RET
      F100               5706 PROTECTFAULT
      F100 3614          5707         LD      A.PRT_ERR
      F102 1802          5708         JR      PROTECT
      F 104              5709 RANGE _NONO
      F104 3E11          5710         LD      A,RANGEERR
      F106               5711 PROTECT
      FIO6 €1            §712         POP     Hi
      FiO7 FOF?          $713         PoP     1¥
      FiOS B             S714         OR      Be                      END    |  ‘tLTS NFG
    FIOA C9           5715         RET
             <FIOA>   65716ATTRIB_TBL  EQU      $-1
    F108 20           «+8717       OEFB      ATTR_READPROT
    F10C 40           5718         DEFB      ATTR_WRITE_PROT
    F100 80           8719         DEFB      ATTR_PERMANENT
    FIOE O02          6720         DEFB      ATTR_EXECUTE
                      6721
                      6722
                               5724
                               §725   <PRSSCSSSSS  SSS  HS SSEOSHSSE   SESE  ESSERE    EE SHEE  RESSES   SESESESE   HREREHEEE  EEE    EEE   EEEESS
                               5726   ,seseseceeoeseesesee            EQS  RENAME   FILE     9seesveeeessseresresesseereseseses
                               $727   ;
                               5728   ;    ON  ENTRY:      A   = DEVICE    NUMBER    (8=TAPE1)
                               5729   ;                  DE    = POINTER     TO  OLD  FILENAME
                               $730   ;                  HL    = POINTER     TO  NEW  FILENAME
                               5731   ;                               |
                               5732   ;    ON  EXIT:       Z2 =   1,  FILE   RENAMED,     A  = 0
                               $733   ;                    Z  =  O,   FILE   NOT   RENAMED,    A   = ERROR    CODE
                               5734   ;
                               $735
                               5736            ;GLB          __RENAME   FILE
                               5737
    F 10F                      5738    RENAME   FILE:                :
    FIOF    CS                 $739             PUSH         BC
    F110    FS                 5740             PUSH         AF                         ;  AF   = DEVICE     ID
    F1ti    05                 S741             PUSH         DE                         ;  DE   = POINTER     TO  OLD   FILENAME
    F112    ES                 5742             PUSH         HL                         ;  HL   = POINTER     TO  NEW   FILENAME
    F113    EB                 $743             EX           DE ,HL                     ;  FIRST   CHECK     IF  A  FILE   EXIST    W/NEW    FILE   NAME
    F114    21FDAO             5744             LD           HL ,QUERY  BUFFER
    Fit7    CDE618             $745             CALL            __QUERY   FILE
    FI1A    282C               5746             JR           Z,NOT_RENAMED            ;  YUP,    THE  NEW    FILE   NAME   ALREADY     EXISTS
    Flic    E1                 $747             PoP          HL
    F110    D1                 5748             PoP          DE
    FItE    Ft                 5749             POP          AF
    FIlF    FS                 5750             PUSH         AF
    F120    05                 $751             PUSH        DE
    F121    ES                 $752             PUSH        HL
                               $753
    F122    21FDAO             $754             LD          Ht  ,QUERY  BUFFER
    F125    COEG  1B           $755             CALL        __  QUERY  _FILE              >;NOW   CHECK    IF  OLD   FILE   EXISTS
    F128    201E               5756             JR          NZ,NOT_   RENAMED          ;   NOPE
    FiI2A   11FDAO             $757             LD          DE  ,QUERY_  BUFFER        ;   DE  =  DESTINATION
    F120    Et                 5758             POP         HL                         ;   HL  =  PTR   TO  NEW   FILENAME
    FI2E    ES                 5759             PUSH        HL
    F12F    01000C             $760             LO          BC,  12                    ;   NUMBER    OF  BYTES    TO  REPLACE
    F132    EDBO               5761             LOIR
    F134    E1                 3762             PoP         HL
    F135    01                 $763             POP         DE                         ;   DE  =  POINTER     TO  OLD   FILENAME
    F136    Fi                 $764             PoP         AF                         ;   A  = DEVICE     IO
    F137    FS                 5765             PUSH        AF
    F138   D5                  5766             PUSH        DE                         ;   RESTORE    STACK
    F139    ES                 5767             PUSH        HL
    FI3A    21FDAO             5768             LO          HL  ,QUERY  BUFFER
    F130   CDE651              5769             CALL           __SET   FILE            ;   CHANGE    FILENAME
    F140    2006               5770             JR          NZ,NOT_   RENAMED
    F142    AF                 5771             XOR         &                          ;   GOOD   RETURN
    F143    E1                 $772             POP         HL
    F144   D1                  5773             PoP         DE
    F145   Ct                  5774             POP         BC                         >;  REALLY    AF  BUT   NEED   TO   PRESERVE     FLAGS    FOR  RET
    F146   C1                  5775             PoP         BC
    F147   C9                  5776             RET
    F148                       S777  NOT  RENAMED:
                               5778         ;   0           A.RENAME    ERR            ;   ERROR   RETURN
    F148   87                  5779             OR          a
    FI49    €                  5780             POP         HL
    FI4A D1           5781         PoP      DE
    F148 Ci           5782         POP      BC                    ;  REALLY AF  BUT NEED  TO  PRESERVE  ERR MSG.
    F14C C1           §783         POP      BC
    F140 C9           $784         RET
                      8785
                          5787
                          5788
                          5789  “SESSSSSSSS SSSSTSESSSSSSSS SSHSSSSESSESSESSSHSSSSSSSSSESSSESHESHESHSESTSESETSEREBES
                          5790   SSSSSSESSSSSseSVssess EOSDELETE_FILE    SSSSSSESSHSESSHSSSSSSES Sees seeessays
                          $791
                          §792      ON ENTRY:    A = DEVICE NUMBER  (8=TAPE1)
                          $793                  HL = POINTER  TO FILENAME
                          $794
                          $795      ON EXIT:     Z =  1,FILE  DELETED, A = 0
                          5796                   Z=  QO,FILE  NOT DELETED, A = ERROR CODE
                          $797
                          5798
                          5799         ;GLB       __DELETE_FILE
                          5800
    F14E                  5801  __OELETE_FILE:
    F14E  05              $802          PUSH      DE
    F14F  E5              $803          PUSH      HL                    HL = POINTER TO  FILENAME
    F150  FS              $804          PUSH      AF                  . A  = DEVICE  ID
    F151  EB              5805          EX        DE,HL               ; DE = POINTER TO  FILENAME
    F155  CDE618          $807          CALL        __QUERY_FILE
    F158  2010            5808          UR        NZ,OTHER_ERR
    FISA  3AFDAC          $809          LD        A,[QUERYBUFFER+FCB  ATTR]   ;GET ATTRIBUTE  BYTE
    F150  CB7F            5810          BIT       7,4                 ;see if permanent  protected
    FISF  2013            5811          UR        NZ,NOT_DELETED
    F161  F604            5812          OR        ATTR_OELETED                  >SET “DELETED®   BIT
    F163  32FOAC          $813          LO        [QUERY_BUFFER+FCB_ATTR],A
    F166  F1              5814          Pop       AF                    ; OEVICE 10
    F167  01              $815          PoP       DE                    ; GET FILENAME POINTER
    F168  DS              5816          PUSH      DE
    F169  FS              $817          PUSH      AF
    F1GA  CDE651          $818          CALL        __SET_FILE
    F160  2006            $819          JR        NZ,OTHER_ERR
    FIGF  AF              $820          XOR       A                   ; GOOD RETURN
    F170  E1              $821          PoP       HL                    REALLY AF BUT PRESERVE  NEW   AF
    F171  Et              $822          PoP       HL
    F172  01              $823         -POP       DE
    F173  c9              $824          RET
    F174                  5825  NOT_DELETED:
    F174  3E10            5826          LO        A,DELETE_ERR          ERROR RETURN
    F176  87              $827          OR        A
    F177                  5828  OTHER_ERR:
    F177  E1              $829          POP       HL                    REALLY AF BUT PRESERVE  ERR   CONDITION
    F178  E1              $830          PoP       HL
    F179  01              $831          POP       DE
    FI7A  c9              5832          RET
                          §833
                          5834
                          SQZ7 Skeeeee SERS     KEKE   REET                                                        ERERES  EREEE
                          5838 =
                          5839 «
                          5840 =      READ_BLOCK:
                          5841 *                1)    READS  1  BLOCK  OFF  OF SPECIFIED    DEVICE   ,
                          5842 *                2)    REQUESTS   FOR  THE  STATUS
                          5843 *                3)    AND  SENDS  ANOTHER   READ  TO  THE  DEVICE
                          5844 *
                          5845 »      INPUT:    SAME   AS  FOR  _RD_1_ BLOCK
                          5846                  A          DEVICE   ID
                          5847 *                           LOW  NIBBLE  -  DEVICE  ADDRESS
                          5848 «                           HI NIBBLE    -  SECONDARY   DEVICE   ID
                          5849 «
                          5850 +                HL         DESTINATION    IN RAM
                          5851 «
                          5852 *                REGISTER    PAIR    BC DE
                          5853 *                           SECTOR   NUMBER  ON DEVICE
                          5854 «
                          5855 *
                          5856 *      OUTPUT:   CONDITION    FLAGS
                          5857 *                           Z:   NO  ERRORS
                          5858 «                          NZ:   ERROR  OCCURED
                          5859 *                                     A -  ERROR  CODE
                          5860 *
                          5861 x      ALL  REGISTERS    ARE  PRESERVED    EXCEPT  FOR  AF
                          5862 *
                          SBG4 Hee   SSH KHSH HERES    EE EEE   EEE  HEHE ERE EEE EERE EEE  EEE EE EEE EEE  EEE REEERE EE
                          5865
    F17B                  5866 __READ_BLOCK:
    F17B                  5867READ BLOCK:
    F17B C5               5868        PUSH  —   BC
    F17C OS               5869        PUSH      _—iODE
    F17D E5               5870        PUSH      ~—-HL
    F17E DDES             5871        PUSH      IX
    F180 FDES             5872        PUSH      IY
    F182 F5               5873        PUSH      AF
                          5874
    F183 3E02             5875        LD        A, ERROR_RETRY                ;  RETRY  COUNT   FOR  ERRORS
    F185 32FDD6           5876        LD        [RETRY_COUNT],A
    F188                  5877 READ_LOOP:
    F188 FI               5878        PoP       AF                             ; GET  DEVICE   ID BACK  IN  A
    Fig9 FS               5879        PUSH   —s AF
                          5880
    F18A CDFASE           5881        CALL     __RD_1_   BLOCK
                          5882
    F18D 280E             5883        JR        Z,NO_READ_ERRORS               ; READ  WENT  OK
                          5884
    F18F FEQB             5885        cP        TIMEOUT                        ; WAS  IT A  TIMEOUT?
                          5886
    F191 280A             5887        JR        Z,NO_READ_ERRORS                 ; YUP,
                |         5888
    F193 E5               5889        PUSH      HL
    F194 21FDD6           5890        LD        HL ,RETRY_COUNT
    Fi97 35               5891        DEC       [HL]                         ; DEC  THE  NO  OF  RETRY’S   LEFT
    F1i9BEt               9892        POP       HL
    F199  283F             5893           JR         2,READ_ERROR                   -NO  RETRY’S   LEFT
    F1i9B 18£B             5894           JR         READ LOOP                     ; TRY  AGAIN
                           5895
    F49D                   5896   NO_READ_ERRORS:
    F1i9D 0602             5897           LD         B,ERROR_RETRY                   ;NUMBER   OF  TIMES   TO   RETRY
                           5898
    F19F                   5899   RETRY_FOR_ERRORS:
    FIOF  F1               5900           PoP        AF                              ;RESTORE   DEVCIE   ID
    FiAO  FS               5901           PUSH       AF
                           5902
    FIA’  CDF473           §903           CALL       __REQUEST_STATUS                ;GET  STATUS
                           5904
    FiA4  2808             5905           JR         Z,READ_ COMMANDO   COMPLETED;            READ  ALL  DONE
                           5906
    FiAG  FESB             5907           cP         TIMEOUT                         ;WAS  IT  A TIMEOUT?
    FIA8  28F5             5908           JR         Z,RETRY_FOR_ERROR               ;NOT  A  REAL  ERROR,    DON’T   NEED    TO DEC   COUNTER
                           5909               |
    FIAA  10F3             5910           DUNZ       RETRY_FOR_ERROR                 ;IT’S  A  REAL  ERROR,     TRY  AGAIN
                           5911
    F1iAC 182C             5912           JR         READ_ERROR                      ;CAN’T  GET   STATUS    ,  GET  OUT
                           5913
    F1AE                   5914   READ_COMMAND_COMPLETE:
    FIAE  Fi               5915           PoP        AF                              ;RESTORE   DEVICE   ID
    FIAF  FS               5916           PUSH       AF
                           5917
    FiBO  CDF225           5918           CALL       GET_STATUS_FLAG                 ;GET  THE  STATUS   FOR    THE  PROPER
                           5919                                                      ; DEVICE   IN  THE  A   REGISTER
                           5920
    F1iB3 FEOO             §921           cP         0                              ; ANY  ERRORS   WITH  ORIVE?
                           5922
    FIBS  2023             §923           JR         NZ,READ_ERROR                  ; YUP
                           5924
    F1B7  3£02             5925           LD         A,ERROR_RETRY
    F1B9  32FDD6           5926           LD         {RETRY  _COUNT],A
                           5927
    FIBC  F1               5928           PoP        AF
    FiBD  FDE1             5929           PoP        ly
    FIBF  DDE              5930           PoP        IX
    FiCi  €1               5931           PoP        HL
    Fic2  D1               §932           POP        DE
    FiC3  Ci               5933           POP        BC
    FiC4  C5               5934           PUSH       BC
    F1C5                   5935   _2ND_READ:
    FICS  FS               5936           PUSH       AF
                           5937
    FiC6  CDFASE           5938           CALL       __RD_1_8LOCK                   ; SEND  ANOTHER    READ   COMMAND
    F1iC9 280C             5939           JR         Z2,NO_ERRORS
    FICB  ES               5940           PUSH        Hi
    FICC  21FOD6           5941           LD          HL ,RETRY_COUNT
    FICF  35               5942           DEC         [Hi]                         ; THE  NO OF  RETRY’S
    FIDO  E1               5943           PoP         Hi
    FID’  2803             5944           UR          Z,_2ND_  READ  ERROR         ; NO  RETRY’S  LEFT
    FIDG  Ft               5945           PoP         AF
                           5346
    F4Dg  «TRF             5947           JR         _2ND_READ                     : GO  TRY AGAIN
                           5aag
     F1D6 B7          5950         OR       A                       ; NZ CONDITION
     F1D7             5951  NO_ERRORS:
     F1D7 C1          5952         POP      BC
     FiD8 C1          5953         PoP      BC
                      5954
     F1D9 C9          5955         RET
                      5956
     FADA             5957  READ_ERROR:
     FIDA FDE1        5958         PoP      ly                  ;POP AF INTO IY TO PRESERVE FLAGS
     FDC  FDE1        5959         PoP      1Y
     FIDE ODE1        5960         Pop      IX
     FIEO E1          5961         PoP      HL
     FIE1 D1          5962         Pop      DE
     FiE2 C1          5963         PoP      BC
                      5964                             |
     FIE3 3616        5965         LD       A,DEVICE_DEPD_ERR        ; INDICATE ERROR, LET APPL.  HANDLE IT
                      5966
     F1IESC9          5967         RET
                      5968
                      5969
                        5971
                        5SQ7QDSHR SSSEAS SESE SESSAEKEEHEEHEREEAEAER  REESE       EEE REE EERE   EERETERESA EERE  ERREE
                        5FQ7QDSSS eSSeS  ESSERE       EREE AREEREAREREE  ERA  EEA EERE    ERR      REEEREEEEEE EEE EEE EEEE
                        5974
                        5975
                        5976         WRITE_BLOCK:
                        5977                   1)  WRITES  A BLOCK  OUT  TO  TAPE
                        5978                   2)  AND  CHECKS  STATUS  AFTER   WRITE  IS  COMPLETED
                        5979
                        5980         INPUT:    SAME AS  FOR  _ WR 1 BLOCK
                        5391
                        5982                   A        DEVICE  ID
                        5983                            LOW NIBBLE   - DEVICE   ADDRESS
                        5984                            HI NIBBLE    - SECONDARY    DEVICE  ID
                        5985
                        5986                   HL       SOURCE  ADDRESS  OF  BUFFER
                        5987
                        5988                   REGISTER  PAIR   BC DE
                        5989                            SECTOR  NUMBER  ON  DEVICE
                        539390
                        5991
                        5992         OUTPUT:   CONDITION  FLAGS
                        5993                            Z:  ‘NO ERRORS
                        5994                           NZ:  ERRORS  OCCURED
                        5995                                     A -  ERROR  CODE
                        5996
                        5997         ALL  REGISTERS   PRESERVED  EXCEPT  FOR  AF
                        5998  *
                        6001
                        6002
                        6003
    F1E6                6004  __WRITE_BLOCK:
    F1ES                6005  WRITE_BLOCK:
    FIE6 C5             6006         PUSH      BC
    F1E7 FDES           6007         PUSH      —siLY
    FIEQ FS             6008         PUSH  =   AF
                        6009
    FIEA 3€02           6010         LD        A,ERROR RETRY
    FEC  32FD06         6011         LD        [RETRY_COUNT],A
    F1EF                6012  TRY_WRITE_AGAIN:
    FIEF F4             6013         POP       AF
    FIFO FS             6014         PUSH   =  AF
                        6015
    FiF1 CDFAB2         6016         CALL      __WR_1 BLOCK
                        6017
    FiF4 280E           6018         UR        Z,NO_WRITE_ERRORS           ; NO  ERRORS
                        6019
    FIF6 FESB           6020         cP        TIMEOUT
                        6021
    F1FB 280A           6022         JR        Z.NO_WRITE_ERRORS             ;  ERROR  OCCURED    IN  TRANSMISSION
                        6023
    FIFA ES             6024         PUSH      HL
    FiFB 21FDD6         6025         LD        HL,RETRY_COUNT
    FIFE 3°             6026         DEC       |
    FIFF E,             6027         pop       HL
    F200 281C          6028         JR        Z.WRITEERROR
                       6029
    F202 18EB          6030         JR        TRY_WRITE AGAIN
                       6031
    F204               6032  NO_WRITEERRORS:
                       6033
    F204 0602          6034         LO        B,ERROR_RETRY              ; MAX NO OF RETRIES
                       6035
    F206               6036  RETRY_WRITE:
    F206 Fi            6037         PoP       AF                         ; RESTORE DEVICE ID
    F207 F5            6038         PUSH      AF
                       6039
    F208 CDF473        6040         CALL      __REQUEST_STATUS
                       6041
    F20B 2808          6042         JR        Z,WRITE_COMMAND_COMPLETE           ; STATUS BACK
                       6043
    F200 FE9SB         6044         cP        TIMEOUT                    ; CHECK FOR TIMEOUT
                       6045
    F2OF 28F5          6046         JR        Z,RETRY_WRITE              ; TIMEOUT, NOT A ‘REAL’  ERROR
                       6047
    F211 10F3          6048         DUJUNZ    RETRYWRITE                 ; REAL ERROR, TRY AGAIN
                       6049
    F213 1809          6050         JR        WRITE_ERROR                ; DONE RETRYING, IT’S AN  ERROR
                       6051
    F215               6052  WRITE_COMMAND_COMPLETE:
    F215 F1            6053         POP       AF                         ; RESTORE DEVICE ID
    F216 F5            6054         PUSH      AF
                       6055
    F217 CDF225        6056         CALL      GET_STATUS FLAG            ; GET STATUS FOR SPECIFIED  DEVICE
                       6057
    F21A FEOO          6058         CP        0                          ; WRITE OK?
    F21C 2802          6059         JR        Z,WRITEOK                  ; YUP
                     -—6060
    F21E               6061  WRITEERROR:
    F21E 3E16          6062         LD        A,DEVICEDEPD_ERR
                       6063
    F220               6064  WRITEOK:
    F220 Ci            6065         PoP       BC                     ;  REALLY AF , BUT PRESERVE  CURRENT  FLAGS
    F221 FDE1          6066         PoP       IY
    F223 Ci            6067         PoP       BC
                       6068
                       6069
    F224 C9            6070         RET
                      6071
                       6072
                          6074
    F225                  6075  GET_STATUS_FLAG:
                          6076
    F225  CB3F            6077          SRL       A                   ; GET SECONDARY  DEVICE  ID (HI NIBBLE)
    F227  CB3F            6078          SRL       A
    F229  CB3F            6079          SRL
    F22B  CB3F            6080          SRL       A
                          6081
    F22D  FEOO            6082          cP        oO                  ; WAS IT UNIT  0?
                          6083
    F22F  FO7E14          6084          LD        A,{I1¥+D_STATUS  FLAGS]     ; BY  THE WAY, GET  THE STATUS
                          6085
    F232  2004            6086          JR        NZ,UNIT1            ; NOPE, UNIT   1
                          6087
    F234  EGOF            6088          AND       OFH                 ; MASK OUT  STATUS OF UNIT  1
                          6089
    F236  1808            6090          JR        CHECK_STATUS
                          6091
    F238                  6032  UNIT1:
    F238  CB3F            6093          SRL
    F23A  CB3F            6094          SRL
    F23C  CB3F            6095          SRL
    F23E  CB3F            6096          SRL
                          6097
    F240                  6098  CHECK_STATUS:                           RETURN WITH  THE STATUS  NIBBLE IN  A
                          6099
    F240  c9              6100          RET
                          6101
                          G1IODKe eeee eae aKa               EKER    EERE    ETRE   EERREE  EKER EERE      ERE       RR  RR
                          C104 Hee   eeeee RE EERE    EEE  EERE     EEE   EEE    ERE REEREE    EEE REE  ER EKKO   REE   EERE RE EEE
                          6105 «
                          6106 *
                          6107 *        TRIM  FILE    RELEASES   THE  UNUSED    BLOCKS  IN  THE  SPECIFIED    FILE
                          6108 *
                          6109 *«  NOTE:    IF  FILE   BEING   TRIMMED   IS  THE   LAST FILE,   THE UNUSED    BLOCKS    ARE
                          6110 *            ALLOCATED     AS PART   OF  THE  REMAINING   AVAILABLE    BLOCKS    (RETURNED
                          6111 *            TO  THE   HOLE).
                          6112 *
                          6113 *        INPUT:     A         DEVICE    ID
                          6114 *                 DE          POINTER    TO  FILE   NAME STRING
                          6115 *
                          6116 *        OUTPUT:
                          6117 *                   CONDITION    FLAGS
                          6118 *                   Z:        NO   ERRORS
                          6119 *                 NZ:          ERRORS
                          6120 *                             A  -  ERROR  CODE
                          6121 *
                          F122 Seeee  eae KKK   EREREKE   EEE   EEE REKEREK  EERE    REET EEE   EEEEEKER  EERE  ERE  EE EERE RE KEEED
                          G1QD  Hee   SHEESH          EEE  HERES  EEE EERE   EEE  EREEERE  ETEKE RHEE  EERE  EE EE EEEREE  EEEKE DEHS
                          6124
                          6125 ©       ;GLB       __TRIM_FILE
                          6126              :
                          6127          EXT        FCB_BUFFER
                          6128         sEXT       NEW   HOLE  SIZE
                          6129         sEXT       HOLE  FILE   NAME
                          6130
    F241                  6131 __TRIM_FILE:
                          6132
    F241   E5             6133          PUSH       HL
    F242   DDES           6134          PUSH       IX
    F244   FDES           6135          PUSH       IY                      .
    F246   DS             6136          PUSH       DE
    F247   FS             6137          PUSH       AF
                          6138
    F248   21FDBA         6139          LD         HL,.FCB BUFFER
                          6140
    F24B   CDE61B8        6141          CALL      __QUERY_FILE                     ; FIND  FILE  IN DIRECTORY
                          6142
    F24E   C2F31A    |    6143          JP         NZ,ERROR                        ; HAD TROUBLE   FINDING    IT
                          6144
    F251   OD21FOBA       6145          LO         IX,FCB_BUFFER                   ; POINT  TO  THE BUFFER
                          6146
    F255   DOSE13         6147          LD         E,[IX+FCB   USED  LENGTH]
    F258   005614         6148          LD         D,[IX+FCB_USED_LENGTH+1]           ;GET  THE  NO OF  USED    BLOCKS
                          6149
    F25B   DD6E11         6150          LO         L,({IX+FCB_  MAX_LENGTH]
    F25E   DD6612         6151          LD         H,[IX+FCB   MAX   _LENGTH#+1]      >GET  THE  NO ALLOCATED
                          6152
    F261   B7             6153          OR         A
    F262   ED52           6154          SBC        HL ,OE                          - FIND  OUT  HOW MANY   EMPTY
                          6155
    F264   7C             6156          LD         A,H
    F265   B5             6157          OR         L
                          6156
    F266   CAF311         6159          JP         Z,.NQ_7RIM                       -ArltYSen
                                   6160
       F269    22FEIA              6161              LD            [NEW     _HOLE   SIZE),HL                 >  SAVE    THE     NUMBER     OF   EMPTY     BLOCKS
       F26C    007311             6162               LD            [IX+FCB_MAX_LENGTH],E                     ;  ALLOCATED         = USED,        NOW
       F26F    007212              6163              LD            [IX+FCB       MAX_LENGTH+1],D
                                  6164
       F272    3AFDD4             6165               LO            A, {FILE      COUNT}                      >  FILE    ENTRY      POSITION       IN   OIRECTORY
       F275    0627               6166               LD            B,ENT     PER    BLOCK
       F277                       6167     TRY_AGAIN:
       F277    90                 6168               SUB           B                                         >; IS   IT   THE    LAST    ENTRY      IN   THIS    BLOCK
       F278    2824               6169               JR            Z,LAST_ENTRY                              ;  YUP
       F27A    30FB               6170               JR            NC,TRY_      AGAIN                        ;  NOPE,    MUST      BE   IN  NEXT     BLOCK
                                  6171
       F27C                       6172     NOT_LAST_ENTRY:
       F27C    DDO2AFOFD          6173               LD            IX,   {FCB_HEAD_ADDR]                     ;  GET   START      OF   FCB’S
       F280    DD5E21             6174               LD            E,[IX+FCB_POINTER]}                       ;  GET   ADDRESS       OF   THE    MODIFIED       FCB
       F283    DD5622             6175               LO            D0, (I1X+FCB_POINTER+1]
       F286    D5                 6176               PUSH          DE
                                  6177
       F287    O1001A             6178               LD            BC,DIR_ENT_LENGTH                 ;  OFFSET     TO   NEXT     DIR   ENTRY’S       ATTR    BYTE                                                                               |
       F28A    C5                 6179               PUSH          BC                                                                                                                                                                           |
                                  6180
       F28B    21FDBA             6181               LO            HL,FCB      BUFFER
       F28E    EDBO               6182               LOIR
                                  6183
       F290    D1                 6184               POP           DE
       F291    E1                 6185               PoP           HL
                                  6186
       F292    19                 6187               ADD           HL  ,DE                                   ;  POINT    TO    ATTR    BYTE
                                  6188
       F293    E5                 6189               PUSH          HL
       F294    FDE1               6190               POP           LY
                                  6191
       F296    FOCBOC46           6192               BIT           ATTR_HOLE       BIT,[IY+DIR_ATTR]                        ;   IS  IT   A  HOLE?
       F29GA   285E               6193               JR            Z,NOT    HOLE                            ;   NOPE
                                  6194
       F29C    1483C              6195               JR            ITS_HOLE
                                  6196
                                  6197
       F29E                       6198     LAST_ENTRY:
       F29E    3AFDD4             6199               LD            A, {FILE     COUNT)
       F2A1    32FDD5             6200               LO            [MOD_FILE_COUNT],.A                      ;   SAVE    IT
                                  6201
       F2A4    Fi                 6202               POP           AF
       F2A5    D1                 6203               POP           DE
                                  6204
       FIA6    D5                 6205               PUSH          DE
       FORT    F5                 6206               PUSH          AF
                                  §207
       F2AB    2i1FDBA            6208               LOD           HL.FCB     BUFFER
                                  6209
       F2AB    CDE65S1            6210               CALL          __SET_   FYLé                            >   PUT   CHANGEO       DIRECTOR:        AWAY
                                  6211
       F2AE    206A               62i2               JR            NZ,  ERRGR
                                  6213
       F2BO    Fi                 A244               POP           AF
       F2B1    D°                 B245               POP           rf
    F2B2 11F428          6217          LO         DE,HOLE_ FILE NAME            ; NAME OF HOLE
                         6218
    F2B5 DS              6219          PUSH       DE
    F286 FS              6220          PUSH       AF                             ;SAVE DEVICE   ID
                         6221
    F2B7 21FDOBA         6222          LD         HL,FCB BUFFER
                         6223
    F2BA CDE61B          6224          CALL       __QUERY FILE
    F2BD OD2AFDFD        6225          LO         IX, {FCB_HEAD_ADOR)
    F2C1 DD6E21          6226          LO         L,(IX+FCB_ POINTER]            ;GET ADDRESS   OF  HOLE   IN DIR  BLOCK
    F2C4 DD6622          6227          LD         H,[IX+FCB_POINTER+1]
                         6228
    F2C7 ES              6229          PUSH       HL
    F2C8 FOE!            6230          PoP        ly
                         6231
    F2CA FDCBOC46        6232          BIT        ATTR_HOLE  BIT,  [IY+DIR_ATTR)       ;WAS  IT  A  HOLE
    F2CE 284A            6233          JR         Z,ERROR
                         6234
    F2D0 21FDD4          6235          LD         HL,FILE  COUNT
    F2D3 3AFDDS          6236          LD         A,{MOD_FILE_ COUNT)
                         6237
    F2D6 3C              6238          INC        A
                         6239
    F207 BE              6240          cp         {HL]
    F208 2037            6241          JR         NZ,.NO_TRIM
                         6242
                         6243
    F2DA                 6244  ITS_HOLE:
    F2DA FDG6E11         6245          LO         L.[1Y+DIR  MAX  LENGTH)       ; GET CURRENT   HOLE  SIZE
    F2DD FD6612          6246          LO         H,{1Y+OIR  MAX  LENGTH+1]
                         6247
    F2EO EDSBFEIA        6248          LD         DE, {NEW _HOLESIZE]           ; BLOCKS TO  BE  RETURNED    TO HOLE
    F2E4 19              6249          ADD        HL ,DE                        ; NEW HOLE  SIZE
                         6250
    F2E5 FD7511          6251          LD         [1¥+DIR_MAX_LENGTH],L
    F2E8 FD7412          6252          LO         [I¥+DIR_MAX_LENGTH+1),H
                         6253
    F2EB FD6EOD          6254          LD         L,{1Y¥+DIR_START  BLOCK]
    F2EE FD660E          6255          LD         H,[IY+DIR_ START  BLOCK+1)
                         6256
    F2F1 B7              6257          OR         A
    F2F2 EDS2            6258          SBC        HL,DE
                         6259
    F2F4 FO7500          6260          LO         {I1Y¥+DIRSTART  BLOCK],L
    F2F7 FO740E          6261          LD         {l¥+OIR START   BLOCK+1],H
                         6262
    F2FA                 6263  NOT_HOLE:
                         6264
    F2FA DD7E17          6265          LO         A,([IX+FCBDEVICE]            ; DEVICE NUMBER
    F2FD 2AFOFF          6266          LD         HL,[FCB_DATA_ADODR]}         ; GET ADDR OF  MY  BUFFER
    F300 DD5E19          6267          LD         E,[IX+FCB BLOCK}             ; GET BLOCK  ADDRESS   IN  BCDE
    F303 DDS61A          6268          LO         O,{1X+FCB BLOCK+1]
    F306 DD4E1B          6269          LD         C,{1X+FCB BLOCK+2]
    F309 DD461C          6270          LD         B,[1X+FCB_ BLOCK+3]
                         6271
    F30C CDFI1E6         6272          CALL       WRITEBLOCK                    > RE-WRITE  THE  DIRECTORY    BLOCK
    F30F 2009            6273          JR         NZ,ERROR
                      6274
    F311              6275 NO_TRIM:
    F311 D1           6276        pop     DE                 ; REALLY WAS  AF
    F312 01           6277        pop     DE
    F313 FDE1         6278        pop     ly
    F315 ODE1         6279        PoP     IX
    F317 €1           6280        PoP     HL
                      6281
    F318 AF           6282        XOR     A
                      6283
    F319 C9           6284        RET
                      6285
    F31A              6286 ERROR:
    F31A B7           6287        oR  °»~=—soA
    F31B Dt           6288        Pop     DE        ;  REALLY AF
    F31C D1           6289        pop     DE
    F31D FDE1         6290        pop     IY
    F31F DDE!         6291        pop     IX
    F321 Et           6292        pop     HL
                      6293
    F322 C9           6294        RET
                      6295
                      6296
                       G29QBKHERKERKESEEEREREREAEEEEEEREE    EH REKEEEARARESKEKEEEKEKREEREERERERE   EERE
                       6299 *
                       6300 *      __INIT_TP_DIR   INITIALIZES   THE TAPE DIRECTORY
                       6301 *
                       6302 *      INPUT:    A       DEVICE  ID
                       6303 *                        LOW NIBBLE   - DEVICE ADDRESS
                       6304 *                        HI NIBBLE    — SECONDARY DEVICE  ID
                       6305 *
                       6306 *                C       NUMBER  OF  SECTORS IN DIRECTORY
                       6307 *                OE      NUMBER  OF  SECTORS ON DEVICE
                       6308 *
                       6309 *                HL      POINTER  TO  ASCII ETX TERMINATED  STRING  |
                       6310 *                        ( VOLUME   ID) (SHOULD BE BLANK-PADDED    IF
                       63i1 *                        LESS THAN   12 CHARACTERS)
                       6312 ¢      OUTPUT:
                       6313 *                CONDITION FLAGS
                       6314 *                2       NO ERROR
                       6315 *               NZ       ERROR
                       6316 *                        A = ERROR  CODE
                       6317 *
                       G631BSHeeKKHKSHEHHSKEKRAEHRESESEEHERRERA        EEEEEE  EEE EERE   RES ER EEEEKER
                       6319
                       6320       ;GLB       __INIT_TAPE_DIR
                       6321       ;GLB       HOLE FILENAME
                       6322       ;GLB       DIRECTORY_CHECK
                       6323
                       6324       ;EXT       SECTOR_NO
                       6325       3EXT       DEVICEID
                       6326       sEXT       FCB_DATA_ADOR
                       6327       sEXT       SECTORS_TO_INIT
                       6328       sEXT       WRITEBLOCK
                       6329
    F323               6330 __INIT_TAPE_DIR:
   |                   6331
    F323  FDES         6332        PUSH      IY
    F325  C5           6333        PUSH      BC
    F326  DS           6334        PUSH      DE
    F327  £5           6335        PUSH      HL
           |           6336
    F328  32FD72       6337        LD        (DEVICE_ID),A             ; SAVE THE  DEVICE ID
                       6338
    F32B  79           6339        LO        A,C
    F32C  32F086       6340        LD        [SECTORS TO_INIT],A       ; NO OF SECTORS  TO  INITIALIZE
                       6341
    F32F  E5           6342        PUSH      HL
                       6343
    F330  CDF3AF       6344        CALL      ZEROOUT BUFFER            ; ZERO OUT  THE 1K BUFFER
                       6345
    F333  21F3DA       6346        LD        HL,INITIAL DIRECTORY       ; POINTER  TO INITIAL  SETUP
    F336  EDSBFOFF     6347        LD        DE.[FCB_DATA_ADDR)        ; ADDRESS OF  1K BUFFER
    F33A  010068       6348        LD        BC,DIR_ENT_LENGTH*3+VOL_DES  LENGTH    ; # BYTES  TO  MOVE  INTO  BUFFER
    F330  EDBO         6349        LDOIR
                       6350
    F33F  E1           6351        POP       HL                        ; GET ADDR  OF ETX TERMINATED    ASCII  STRING
                       6352
    F340  EDSEFDFF     6353        LD        DE,{FCB BATAADDR]         - GET ADDRESS  ©F  “kKBUFFER
    F344  O50C         6354        LD        B,i2                      ; MAX OF  72 BYTES IN  STRING
                 |               6355
       F346                      6356    LOAD_DIR:
       F346    7E                6357             LO           A,  [HL]                            ; GET   ASCII    CHAR  OF  VOULME     ID
       F347    FEO3              6358             CP           ETX                                -:  IS  IF  ETX?
                                 6359
       F349    2808              6360             JR           Z,1TS_AN_ETX                        ;  YUP
                                 6361
       F34B    12                6362             LD           [DE},A                              > NOPE,PUT      IN  THE  1K  BUFFER
                                 6363
       F34C    23       |        6364             INC         HL
       F34D    13                6365             INC          DE
                                 6366
       F34E    10F6              6367             DJNZ         LOAD_DIR
                                 6368
       F350    3E03              6369             LD             A,ETX
       F352    18                6370             DEC            DE
                                 6371
       F353                      6372    ITS_AN_ETX:
       F353    12                6373             LO           [OE],A                              ; ETX   TERMINATED     DIRECTORY      NAME
       F354    FO2ZAFOFF         6374             LD           1Y,{FCB_DATA_ADDR)                  ; POINTER     TO   1K BUFFER
                                 6375                 .
       F358    3AFD86            6376             LD           A,  [SECTORS    TO_INIT])           ; GET   THE   NO  OF  SECTORS    TO   INTIALIZE
       F358    FE8O              6377             OR          O80H                                 ; SET   HI  BIT
       F35D    FD770C            6378             LO           (I1Y+VOL_OIRSIZE],A                 > SAVE   IN   FIRST   BYTE   OF  BUFFER
                                 6379
       F360    E1                6380             POP         HL
       F361    D1                638 1            POP         DE
       F362    Ci                6382             POP         BC
                                 6383
       F363    CS                6384             PUSH        BC
       F364    D5                6385             PUSH        DE
       F365    E5        |       6386             PUSH        HL
                                 6387
       F366    FD7311            6388             LD           [IY+VOL_SIZE+0],€
       F369    FDO7212           6389             LO           [I¥+VOL_SIZE+1)},D
                                 6390
       F36C    D5                6391             PUSH        DE                                   ; GET   TO  FIRST    DIR  ENTRY
       F36D    11004E            6392             LD          DE,   VOL_DES_   LENGTH+DIR_ENT_LENGTH*2               :  POINT   TO  FIRST    FILE   ENTRY
       F370    FD19              6393             ADD         IY  ,DE
       F372    Dt                6394             POP         DE
                                 6395
       F373    FDO71F7           6396             LD          [1¥Y+DIR_MAX_LENGTH-DIR_ENT_LENGTH],C                  -  BLOCKS   ALLOCATED      FOR   DIRECTORY
       F376    FO71F9            6397             LD          {TY¥Y+OIR_USED_LENGTH-OIR_ENT_LENGTH],C                   ; MAKE   USED    BLOCKS    AS   ALRGE    AS  POSSIBLE
                                 6398                                                                                         .
       F379    OC                6399             INC         <<                                   ; FIRST    “FILE”    STARTS   AFTER
       F37A    FD710D            6400             LO          [1¥Y+DIR_START_BLOCK],C             >   LAST   SECTOR     OF DIR
                                 6401
       F37D    O600              6402             LO          8,0                                 ;  WANT   BC   =  # SECTORS    USED
                                 6403                                                              - (#  DIR   SECT   +  1 TO   COVER
                                 6404                                                             ;   SECT   O)
                                 6405
       F37F    EB                6406             EX          DE  , HL                             >;HL  =  #  SECTORS    ON  DEVICE
       F380    B7                6407             OR          A                                   -  CLEAR   CARRY
       F381    ED42              6408             SBC         HL  ,BC                              >;HL  =  #  SECTORS    LEFT   FOR   FILES    77777
                                 6409
       F383    FI    14          6410             LD          [I¥+OIR_MAX_LENGTH+O],L
       F386    Fu yy  2          6411             LD          {I  Y+DIR_MAX_LENGTH+1)],H
                        6412
    F389 3E01           6413          LD       A,1                         ; FIRST SECTOR
    F38B 32FD87         6414          LD       [SECTOR_NO],A
                        6415
    F38E CDF3C5         6416          CALL    WRITE_1 BLOCK                ; WRITE BLOCK TO TAPE
                        6417
    F391 2016           6418          SR       NZ,WE_GOT_ERRORS            ; CAME BACK WITH ERROR
                        6419
    F393 3AFD86         6420          #.LD     A,{SECTORS TO_INIT]         ; GET NO OF SECTORS TO  INITIALIZE
                        6421                                   |
    F396 47             6422          LO.      B.A
    F397 OS             6423          DEC      B                           : ONE LESS BECAUSE ONE  WAS JUST INITIALIZED
                        6424
    F398 280E           6425          UR.      Z,NO_SECTORS TO_INIT        ; WAS ONLY ONE TO INIT
                        6426               |
    F39A CDF3AF         6427          CALL                                 ; CLEAR 1K BUFFER
                        6428
    F39D                6429   SECT_INIT_LOOP:
    F39D 21FD87         6430          LD       HL,SECTOR_NO                ; SECTOR NO.
    F3AO 34             6431          INC      (HL)                        ; NEXT SECTOR
                        6432
    F3A1 CDF3C5         6433          CALL             BLOCK               ; WRITE BLOCK OF ZEROS  OUT
    F3A4 2003           6434          JR       NZ,WE_GOT_ERRORS            ; GOT A ERROR IN WRITE
                        6435
    F3A6 10F5           6436          DUNZ
                        6437
    F3A8                6438   NO SECTORS TO_INIT:
          |             6439
    F3A8 AF             6440          XOR      A                           ; ZERO CONDITION
                        6441        |
    F3A9                6442   WE_GOT_ERRORS:
                |       6443
    F3A9 E1             6444          Pop      HL
    F3AA D1             6445          PoP      DE
    F3AB C1             6446.         pop      BC
    F3AC FDE1           6447    |     pop      ly
                        6448
    F3AE C9             6449          RET
                        6450
                       6451
                            6453
    F3AF                    6454    ZERO OUT BUFFER:
                            6455
    F3AF   C5               6456           PUSH       BC
    F3BO   05               6457           PUSH       DE
    F381   €5               6458           PUSH       HL
                            6459
    F3B2   2AFDFF           6460           LO         HL,{FCB_DATA_ADOR}               ; POINTER TO   1K BUFFER
    F3BS   EDSBFOFF         6461           LD         DE, ([FCB_DATA_ADDR}
    F3B9   13               6462           INC        DE
    FIBA   O103FF           6463           LD         BC, 1023
                            6464
    F3BD   3600             6465           LD         {HL]},0                          ; ZERO IT OUT
                            6466
   F3BF    EDBO             6467           LDIR
                            6468
    F3C1   E1               6469           POP        HL
    F3C2   D1               6470           POP        DE
    F3C3   Ci.              6471           POP        BC
                            6472
    F3C4   C9               6473           RET
                            6474
                            6475
    F3C5S                   6476    WRITE 1 BLOCK:
    F3C5   C5               6477           PUSH       BC
                            6478
    F3C6   2AFDFF           6479           LO         HL,[FCB_DATA_   ADDR)           ;  ADDRESS OF  1K  BUFFER
    F3C9   3AFD87           6480           LD         A, [SECTOR_NO}                  ;  GET SECTOR  NUMBER
    F3CC   SF               6481           LD         E,A                  .
    F3CD   1600             6482           LD         0,0
    F3CF   010000           6483           LO         BC,O
                    |       6484
    F3D2   3AFD72           6485           LD         A,{DEVICE   ID)
                            6486
    F305   CDF1E6           6487           CALL       WRITE  BLOCK                    ;  WRITE IT OUT
                            6488
    F3D8   C1               6489           PoP        BC
                            6490
    F3D9   C9               6491           RET
                            6492
                            6493
    F3DA                    6494    INITIAL_DIRECTORY:
    F3DA   2020202020       6495           DEFB       ,
    F3E6   80               6496           DEFB       100000008
    F3E7                    6497   DIRECTORY CHECK:
    F3IE7  SSAAOOFF         6498           DEFB       O55H, OAAH  ,OOOH, OF FH
    F3EB   0000             6499           DEFB       0,0
    F3ED   O000             6500           DEFB       0,0
    F3EF   O0O00            6501           DEFB       0,0
    F3F1   O00000           6502           DEFB       0,0,0
                            6503
    F3F4   424F4F5403       6504           DEFB       ‘BOOT’  ,ETX,’
    F400   8%               6505           DEFB       ATTR PERMANENT     92  ATTR_  SYS.
    F401 OO0000000     6506        DEFB    0,0,0,0
    F405 0001          6507        DEFW     1
    F407 OOO01         6508        DEFW     1
    F409 0000          6509        DEFW    0
    F40B O00000        6510        DEFB    0,0,0
                       6511
    F40E 4449524543    6512        DEFB     ‘DIRECTORY’,ETX,’  ”
    F41A CB            6513        DEFB     ATTR_PERMANENT.OR.ATTR_WRITE_PROT.OR.ATTR SYSTEM
    F41B 01000000      6514        DEFB     1,0,0,0
    F41F 0080          6515        DEFW     128
    F421 0001          6516        DEFW     1
    F423 0400          6517        DEFW     1024
    F425 000000        6518        DEFB     0,0,0
                       6519
    F428               6520 HOLE_FILENAME:
    F428 424C4F434B8   6521        DEFB     “BLOCKS LEFT’,ETX
    F434 O1            6522        DEFB     ATTR_HOLE
   .F435 OO0000000     6523        DEFB    0,0,0,0
    F439 0000          6524        DEFB    0,0
    F43B 0000          6525        DEFB     0,0
    F43D 0000          6526        DEFB    0,0
    F43F 570711        6527        DEFB     57H,0O7H11H
                 |     6528
             <O068>    6529 INIT_INFOSIZE   EQU $-INITIAL_DIRECTORY
                       6530 ;
                       6531 ;ESRSSSSRSSSASSSS SHSSSHTSsSSSSSsssssHHsessessesssssesssssesssssessss=e
                       6532 ,SSSRTSSSSSESTSS SSSTSSSseSPSsSessss  sessssssrsscsssesessssssrsstssssee
                       6533 ,SSSSSSSSSESSSsSsstseeoSsSseSeSeseseeseeSssesseseseSeSaseeseSseseseqsaqeqar2aaeeereeezezeqneeezeeqa5eeee5
                       6534 ;
                       6535
                                6537    NAME    “REV  1  -  RPD*
                                6538   *
                                6539   *    RETURN    ERROR     CODES    UNTIL   THESE   ROUTINES      ARE   WRITTEN
                                6540   *
                                6541   *     10/12/83      VSB
                                6542   «     10/14/83      RPD    changed     _E0S   4   to  _CV_A
                                6543   «                                .
                                6544
       :                        6545            :GLB         __POSIT     FILE,    €0S   1,   _€0S   2,  _€0S_3,_CV_A
      F442                      6546   _POSIT_FILE:
      F442                      6547   __E0S_1:
      F442         |            6548    EOS   2:
      F442                      6549   __E0S_3:
     F442                       6550   __CV_A:
      F442   3E17               6551              LO        A,PROG    NON_EXIST       ;  SIGNIFIY     PROGRAM      DOES    NOT  EXIST
      F444   B7                 6552              OR        A                         ;  NZ  CONDITION                   .
      F445   C9                 6553              RET
              |                 6554   ;
                               -6555   gSSS SS  SSS STSESTSSSTSSSSSSS       SASS SSS SSS SS SsSSsssssssssssssessssssssesss
                                6556   SESSSSTSSSASSSSSS      ST SPSS  SSS  SSsss sss sss  ssssesssrssssresssesessssesssssss
                                6557   gS SSSSSSTSSTESTCESSSESSTISTSCSTESSLSSSSISISSSSSSSSSSSSSSSESSSSSSSESES                 SESS   SE
                                6558   ;
                                6559
                       6561   ;REVO     (V/D   8/24/83)
                       6562
                       6563
                       G5HG4  SHSMeeSSS  SERHEHREEEKEEEE   REHEARSE         RESETESE SHEER  EKER    KERR        EHEEREEEE   EEESE
                       6565   * THIS ROUTINE    WILL FIND   THE   DCB  FOR   THE DEVICE  DESIRED
                       6566   *
                       6567   *      INPUT:     A ==>  POINTS    TO THE   DEVICE  IDO
                       6568   +      OUTPUT:
                       6569   *                 CONDITION   FLAG:
                       6570   *                           Z  : NO  ERRORS
                       6571   *                                TY  ==>  POINTS   TO THE  START  OF  THE  DEVICE    DCB
                       6572   *                         NZ   : ERROR   OCCURED
                       6573   *                                IY  ==>  IS   DESTROYED
                       6574   *
                       6575    eeeeeeene    AEREK EKER    HEE EEEEAEKEEEEARAEAEKERRERREREEEER        EEK    EKRETERE ES
                       6576
                       6577
                       6578    .    ;GLB        __GET_DCB_ADDR
                      -6579          GLOBAL     __FIND_DCB
                       6580         ;EXT        CURRENT PCB
                       6581
    F446               6582   _ GET_DCB_ADDR:
    F446               6583   _FIND _OCB:
    F446  C5           6584          PUSH       BC
    F447  O05          6585   _      PUSH       DE
                       6586
   F448   4F           6587          LD         CA                             ; SAVE THE  DEVICE   ID
    F449  FD2AFD70     6588          LD         ITY[CURRENT_PCB]               ; GET THE  START   ADDRESS  OF   PCB
    F44D  FD4603       6589          LD         B,{1¥+P_NUM_DCBS]              ; GET THE  NUMBER   OF OCB‘S
    F450  AF           6590          XOR        A
    F451  B8           6591          cP         B                              ; ARE THERE  ZERO   DCBS?
    F452  2819         6592          JR         Z,0CB_NO_FIND                  ; YES
                       6593                                                    ; NO
    F454  110004       6594          LD         DE,P_SIZE                      ; GET THE  SIZE  OF  THE  PCB
    F457  FD19         6595          ADD        Ty,DE                          ; ADD TO  IY TO  GET  TO  THE  START    OF  THE  OCB
    F459  110015       6596          LD         DE,D_SIZE                    ; GET THE  DCB SIZE
    F45C  79           6597          LD         A,C                            ; RELOAD  THE DEVICE   ID
    F45D  E6OF         6598          AND        OFH                            ; AND OF  THE HIGH   BITS  TO  GET   ONLY
                       6599                                                    ; THE DEVICE   ID
                       6600
    F45F               6601   DCB_LOOP:
    F45F  FOBE10       6602          CP         [1¥+D_DEV_ADDR}              ; IS THIS  THE CORRECT   DEVICE    DCB?
    F462  2806         6603          JR         Z,FOUND_IT                     ; YES
                       6604                                                    ; NO
    F464  FDIS         6605          ADD        IY,DE                          ; GET TO  THE  NEXT  DCB  AND  CHECK     I¥
    F466  10F7      *  6606          DUNZ       DCB_LOOP                       ; GO CHECK  THEM   ALL UNTIL   ONE   IS   FOUND
                       6607
    F468  1803         6608          JR         DCB_NO_FIND                  :
                       6609
                       6610
    F46A               6611   FOUND_IT:
    F46A  79           6612          LOD        A,C                            - RESTORE  A TO   ITS ORIGINAL    STATE
    F46B  1803         6613          JR         FINISHED
                       6614
    F46D               6615   DCB_NOFIND:
    F46D  3E01         65616         LD         A,DCB_NOT_FOUND
    F46F  B7           6617          OR         A
                      6618
    F470              6619 FINISHED:
    F470 Df           6620        PoP     DE
    F471 Ci           6621        PoP     BC
                      6622
    F472 CS           6623        RET
                      6624
                      6625
                         6627                                                             .
                         GCE2QBHHH KAHHERRERA                    EEE TERETE EEE   EERE  REE                                EEEEE
                         6629  * THIS ROUTINE   WILL  INITIATE  A STATUS REQUEST COMMAND,  AND WILL   RETURN
                         6630  * THE RESULT  OF .THE  COMMAND.
                         6631  *      INPUT:    A==      DEVICE  ID
                         6632  *      OUTPUT:   CONDITION  BITS
                         6633  «                Z:       NO ERRORS
                         6634  »                         IY CONTAINS  START ADDRESS OF DCB
                         6635  +                NZ:      ERROR  OCCURED
                         6636  +                         A ==>  ERROR CODE
                         6637  *                         IY IS  DESTROYED (MAY BE ADDRESS  OF DCB
                         6638  «+                        UNDER  CERTAIN ERROR CONDITIONS)
                         6639  +
                         6640  *SFRSSeSsSee SSeS SseSesesseseSseSeeeeesSeeseeeeeseeseSSSeee seseaeeeee eeeeeeeee  eee¢
                         6641
                         6642        ;GLB       __REQUEST_STATUS
                         6643
                         6644
    F473                 6645  _REQUEST_STATUS:
    F473 COF446          6646         CALL      __FIND_DCB          ; GET THE CORRECT DEVICE  DCB
                         6647
    F476 200F            6648         UR        NZ,END_R_S
                         6649
    F478 FD360001        6650         LD        [1¥+D_COM_STAT],0CB_STATUS      ; SEND THE  COMMAND   TO REQUEST
                         6651                                     ; A STATUS
                         6652
    F47C                 6653  REQUESTLOOP:
    F47C FOCBOO7TE       6654         BIT       CMND_COMPLETE_BIT,[1Y+D  COM STAT]       ; HAS THE   COMMAND COMPLETED?
    F480 28FA            6655         JR        Z,REQUEST_LOOP            ; NO LOOP TILL IT  DOES
                         6656
    F482 FD7E0O          6657         LD        A,(1Y+D_COM STAT]       ; CHECK THE STATUS
    F485 FE8O            6658         cP        CMND_FIN STATUS           ; DID IT FINISH  WITH  NO  ERRORS?
                         6659                                             ; IF ZERO EVERYTHING   IS  OK
                         6660                                             ; IF NZ THERE WAS  AN  ERROR
                         6661
    F487    |            6662  END_RS:
    F487 C9              6663         RET
                         6664
                         6665
                         6667
                         6664       ;GLB     __RD_DEV_DEP_STAT
                         6669
    F488                 6670 __RD_DEV_DEP_STAT:
    F488 FDES            6671        PUSH     —sidT'Y              ; SAVE THIS REGISTER
    F48A CDF446          6672        CALL   __FIND   OCB           ; GET THE CORRECT DEVICE DCB
                         6673
    F48D 2004            6674        UR      NZ,END   RDO   S
                         6675
    F48F AF              6676        XOR     A                         ; NO ERROR
                         6677
    F490 FD7E14          6678        LD      A,(IY+D   STATUS FLAGS]   ; READ DEVICE-DEPENDENT  STATUS  FLAGS
                         6679
    F493                 6680 END_R_DD S:
    F493 FDE1            6681        POP      LY                         ; RESTORE THE REGISTER
    F495 C9              6682        RET
                         6683
                        6686  * THIS   ROUTINE  WILL  CHECK   AND  SEE IF THE  DEVICE  DCB IS  CURRENTLY  ACTIVE.
                        6687  * IF IT   IS THEN  A  NZ CONDITION    WILL BE SENT  BACK  TO THE  CALLING  PROGRAM
                        6688  *        INPUT:   IY  ===>  POINTS   TO START OF  DEVICE  DCB
                        6689  *       OUTPUT:   CONDITION   FLAGS
                        6690  *                 Z  :      DCB  IS  INACTIVE, IN  OTHERWORDS   IT IS AVAILABLE
                        6691  *                             ===>   IS PRESERVED
                        6692  *                 NZ:       DCB  IS  ACTIVE
                        6693  *                           A ===     ERROR CODE
                        6694  *
                        GEQ5  EHH    HERRERA        EERE       EEE EEEEEREHEHEHE  TERETE HEHE  HEEEEEEEE KERER  ESHERREE   ES
                        6696
                        6697  ; OK CHANGED    TO G OK  TO  PREVENT   CONFLICT  WITH  IDENTICAL
                        6698  ; LABEL   ELSEWHERE
                        6699
                        6700         ;GLB       CHK_IF_INACTIVE
                        6701
    F496                6702  CHK_IF_INACTIVE:
    F496 C5             6703           PUSH  —  BC
                        6704                   |
    F497 4F             6705           LD       C.A                         ;  PRESERVE  A
    F498 FD7E00         6706           LO       A,{1Y+D_COM   STAT]         ;  IS THE  DCB AVAILABLE?
    F49B FEOO           6707           cP       DCB_IDLE                    ;
    F49D 2806           6708           UR       2,G_OK                      ;  YES IT  IS INACTIVE
                        6709                                                ;  NO IT  IS NOT
    F49F FDCBOO7E       6710           BIT      CMND_COMPLETE_BIT,[IY+D_COM     STAT]          ; HAS THE  COMMAND   BEEN
                        6711                                                ;  PROCESSED
    F4A3 2804           6712           UR       Z,DEVICE_BUSY               ;  NO, THE  DEVICE  IS STILL  BUSY
                        6713                                                ;  YES, THE  DCB  IS AVAILABLE
    F4AS                6714  G_OK:
    F4A5 AF             6715           XOR      A                           ;  INSURE  ZERO CONDITION
    F4A6 79             6716           LD       A.C                         ;  RESTORE  A
    F4A7 1803           6717           UR       DONE                        ;
                        6718
    F4A9                6719  DEVICE_BUSY:
    F4A9 3C             6720           INC      A                           ;  INSURE  A NON_ZERO  CONDITION    FOR FLAG
    F4AA 3E02           6721           LD       A,DCB_BUSY                  ;  SEND BACK  THE  ERROR CODE
                        6722
    F4AC                6723  DONE:
    F4AC C1             6724           PoP      BC
    F4a0 C9             6725           RET
                        6726
                        6727
                        6729
                        6730 KESKTSHKHKSSKKSSSKHSAKKKK         KEKSSESESKESHSHKESEKEEKSKSKSKKERSEKKRSEKEHKSEKKEEEKREEEREE
                        6731 i
                        6732 .       CHK_FOR_IDLE  CHECKS  IF  THE REQUESTED DEVICE  IS  IDLE
                        6733 as      SENDING  BACK AN ERROR   CODE
                        6734 $
                        6735 *       INPUT:   IY      POINTER   TO THE DCB,
                        6736 5
                        6737 e       OUTPUT:  CONDITION  FLAGS
                        6738 a                        DEVICE   NOT IDOLE
                        6739 €               NZ       DEVICE   IDLE
                        6740 we
                        6741 2SRSESSSSSEESSSSKSHKSSSKS SKSKHKEKHHKHEKESEKHKSEHEEKRSEKSSESHESESSHSEAESHKKEEEKEESSC
                        6742
                        6743
                        6744        :GLB      CHK_IF_IDLE
                        6745
    F4AE                6746 CHK_IF_IDLE:
                        6747
    F4AE FD7E0O         6748         LD       A,[1Y+D_COM_STAT]         ; GET  STATUS BYTE
                        6749
    F461 B87            6750         OR                                   IS  IT IDLE(ZERO)?
    F482 2004           6751         JR       NZ,NOT_IDLE               ; NOPE
                        6752
    F4B4 3EO3           6753         LD       A,DCB_IDLE_ERR              ERROR  CODE FOR  DEVICE  IDOLE
                        6754
    F4BG 87             6755         OR                                 ; CREATE  NZ CONDITION
                        6756
    F4B7 cg             6757         RET
                        6758
    F468                6759 NOT_IDLE:
    F4B8 AF             6760         XOR                                  CLEAR  ZERO FLAG
                        6761
    F4B9 c9           ' 6762         RET
                        6763
                        6764
                        6765
                        6766                       ase@@
                        6767
                        6768
                          6770   ;REV O            (V/D  8-24-83)
                          6771
                          6772   SHASEREKKRKSKEKEEREEAEERAAE  REE      REE EEA          ERE       EEE REESE     REREKRERE REE
                          6773   * THIS ROUTINE   WILL READ  A  CHARACTER  FROM THE KEYBOARD
                          6774   E
                          6775   *      INPUT:    NOTHING
                          6776   %      OUTPUT:   CONDITION  FLAGS
                          6777   s                Z:       NO  ERROR S
                          6778   b                           z=2s>   CONTAINS THE KEY READ
                          6779   s                NZ:      ERROR   OCCURED
                          6780   s                                   ERROR CODE
                          6781   *
                          6782   s
                          6783   sPRESSES       SEKEKEKRKES EHKRAKCEKHESEEKEEKTHEEKEKRKESEREKKRSHEESKSHEESEHKEHEREESESE
                          6784
                          6785          GLOBAL    __RD_KBD       .
                          6786         sEXT       KEYBOARD_BUFFER
                          6787         sEXT       __RD_CH_DEV
                          6788
    F4BA                  6789   __RD_KBD:
    F4BA  C5              6790          PUSH      BC
    F488  DS              6791          PUSH      DE
                          6792
    F4BC                  6793   RD_KBD_LOOP:
                          6794
    F4BC  CDF4  DO        6795          CALL        START_RD_KBD
                          6796
    F4BF   2007           6797          JR        NZ,ERROR_OCCURED
                          6798
    F4C1   4F             6799          LD        C,A                          PRESERVE THE  DEVICE   ID
                          6800
    F4C2                  6801   WAITING:
    F4C2   79             6802          LD        A,C                          RESTOR THE  DEVICE   ID
                          6803                                                 BC IS SAVED  IN  ALL  CALLED MODULES
    F4C3  CDOF4 EO        6804          CALL        END_RD_KBD
                          6805
    F4C6   3OFA           6806          JR        NC,WAITING                   THE OPERATION   HAS  NOT COMPLETED   YET
                          6807                                                 AT THIS POINT   WE EITHER  HAVE  THE
                          6808                                                 KEY OR AN ERROR   CODE  IN A
    F4C8                  6809   ERROR_OCCURED:
    F4c8  Of              6810          Pop       DE
    F4CS  Ci              6811          PoP       BC
                          6812
    F4CA  C9              6813          RET
                          6814
                       6816  SHESESSHHEKEKESSEKRKERSKKREKRSKKEKRKCKREKEKKRKKEKREKEKREKEREKRKEKEEKEREKREREEERKREA
                       6817  * THIS ROUTINE WILL  REQUEST  A STATUS  ON THE KEYBOARD
                       6818  .      INPUT:  NOTHING
                       6819  :      OUTPUT: CONDITION  FLAG
                       6820  ’              Z:       NO ERRORS
                       6821  ‘              NZ:      ERROR  OCCURED
                       6822  *                       A ===>    ERROR CODE
                       6823  e
                       6824  SKFSSSESeKAKHKKSKSKSSKKSEESSHSKSSSHKESESKEKCSEESSsSSseEsSeseseseesseeseeeveasese
                       6825
                       6826         GLOBAL __REQ  KBD STAT
                       6827
                       6828        EXT      __REQUEST_STATUS
                       6829
    F4CB               6830  __REQ_KBD_STAT:
    F4CB 3E01          6831         LD      A,KEYBOARD_ID   .          ; WANT STATUS ON  THE KEYBOARD
    F4CD C3F473        6832         UP      __REQUEST_STATUS
                       6833
                       F895 SeeeeeK REHEAT                         EEEREEE              EEK            EEEK
                       6836 * THIS ROUTINE  WILL START A  READ DATA COMMNAD ON THE KEYBOARD
                       6837 *      INPUT:   NOTHING
                       6838 *      OUTPUT:  CONDITION FLAGS
                       6839 *               Z  :    NO ERROR
                       6840 *               NZ:     ERROR  OCCURED
                       6841 *                         ===    ERROR CODE
                       GFB42SHERHHERSKA        EEREERE      EEE EREEEEEEETEEEEREEKEE  EERE EEREREEEEE  REESE
                       6843
                       6844       ;GLB      __START_RD_KBD
                       6845
                       6846       ;EXT      __START_RD_CH_DEV
                       6847
    F4D0               6848 _ START_RDKBD:
    F4D0 C5            6849        PUSH     BC                          .
    F401 05            6850        PUSH     DE
                       6851
    F4D2               6852 STRT_RD_KBD_LOOP:
    F402 3EO!1         6853        LD       A,KEYBOARD_ID                    ;
    F404 11FD75        6854        LD       DE ,KEYBOARD_BUFFER              ; DESTINATION OF WHERE TO  PLACE  KEY
    F407 010001        6855        LD       BC,1                             ; GET 1 CHARACTER
    F4DA COFB86        6856        CALL    __START_RD_CH_DEV                 ; GO INITIATE THE COMMAND
                       6857    |
    F400 D1            6858        POP      DE
    F4DE Ci            6859        POP      BC
                       6860
    F4DF C9            6861        RET
                       6862
                                            6864
                                            6866    *  THIS     ROUTINE      WILL    CHECK      THE   RESULT       OF   A COMMAND      THAT   WAS   SENT.      IF  THE
                                           6867     *  RESULT       IS  A  NAK    THEN    THE    ROUTINE       WILL     ISSUE    A NEW   READ    COMMAND.
                                           6868     *           INPUT:       NOTHING
                                           6869     *           OUTPUT:      CONDITION        FLAG
                                           6870     *                        ¢   ;        COMMAND       HAS    FINISHED
                                          6871      ¢                        NC:          COMMAND       HAS    NOT    BEEN   FINISHED
                                           6872     *                        a:           NO    ERROR    OCCURED
                                           6873     *                        NZ:          ERROR     OCCURED
                                           6874     *                                     A   ===>      ERROR      CODE
                                           GA75H    SHeSee    SSeS   eS SASS   SSS  HEHEHE    AEEE   SESE    EEE   EERE   HEE  ESHEETS           HEE  EEE EEE   EERE   RE REED
                                           6876
                                           6877               GLB     .      __END_RD_KBD
                                           6878               SEXT           ~_END_RD_CH_DEV
                                           6879                         ,                           ,
              F4EO                     _   6880     __END_RD_KBD:
              F4EO     3E01                6881                 LD           A,  KEYBOARD_ID                          ;  SEND   THIS    PARM   TO   _EN   RD   CH  DEV
              F4E2     CDFBAS              6882                 CALL         __END_RO_CH_DEV                          ;  CHECK    THE   RESULT
                                           6883
              F4E5     3014                6884                 JR           NC  ,ROUTINE_DONE                        ;  CARRY    FLAG   IS   CLEARED,     CMND    IS   NOT   COMPLETE
                                           6885                                                                       ;  THE   COMMAND     IS  COMPLETE
              F4E7     280C                6886                 JR           2,  HAVE_THE_KEY                         ;  ROUTINE     COMPLETED      WITH  NO    ERRORS,
                                           6887                                  |                                    ;  CARRY    FLAG   IS   SET,   ZERO    CONDITION
                                           6888                                                                       ;  THERE    WAS   AN  ERROR
              F4E9     FEBC                6883                cP            KBD_NAK                                  ;  WAS   THE   ERROR    A NAK?
              F4EB     2005                6890                 JR           NZ,NO_NAK                                ;  NO,   GO  SET   C  FLAG    TO  SHOW    COMMAND     COMPLETED
                                           6891                                                                        >;YES,   TRY   THE   COMMAND     AGAIN
              F4ED     COF4D0              6892                CALL          __START_RD_KBD
              F4FO     2808                6893                 JR           Z,  SHOW  COMPLETE                       ;
                                           6894                                                                       ;  THERE    WAS   AN  ERROR    IN   THE   COMMAND     RETRY
                                           6895                                                                       ;  SET   THE   CARRY    FLAG   TO   SHOW   THAT    THE
                                           6896                                                                       ;  OPERATION      COMPLETED.        THE   FLAG
                                           6897                                                                       ;  CONDITION      WILL   BE   NON-ZERO     TO
                                           6898                                                                       ;  INDICATE     AN   ERROR   OCCURED.        A  CONTAINS
                                           6899                                                                       ;  THE   ERROR    CODE
              F4F2                         6900     NO_NAK:
              F4F2     37                  6901                SCF
              F4F3     1806           ~    6902                JR            ROUTINE    DONE
                                           6903
              F4F5                         6904     HAVE_THE_    KEY:
              F4F5     3AFD75              6905                LD            A,  [KEYBOARD     BUFFER}                ;  PUT   THE   KEY   IN  THE   KEYBOARD      BUFFER
              F4F8     1801                6906                JR            ROUTINE    DONE                          :
                                           6907
              F4FA                         6908     SHOW  COMPLETE:
              F4FA     B7                  6909                OR            A                                        ;  CLEAR    CARRY    FLAG   BECAUSE     THE   RETRY     WAS   STARTED
                                           6910                                                                       ;  WITH   NO   PROBLEMS,      THE   COMMAND     IS   NOT   COMPLETE
              F4FB                         6911     ROUTINE    DONE:
              F4FB     C9                  6912                RET
                                           6913     ;
                                           6914     sESSSSSe     esses   ssesssesssrs        esses     Sess     sssesssssssrsssesessesesssSsrsse
                                           6915     ,sseceweesseesessstssenrsesesssssestrreeesessssssrssesssrssssseszess
                                           6916     ,SS SSSR     SS  Sees  e eset   SSS es esses    SSS  ST ST  SSS   rare  esSeesse  esas  sesssssrsrssse
                        6920
                        6921  ;REV 1          (v/D   8-24-83)
                        C922  SHH EKHHEHEHE     EREREEEEE                                             KS
                        6923  * PRINT_CHAR ALLOWS THE CALLER  TO PRINT   ONE CHARACTER
                        6924  +      INPUT:    ===> CHARACTER  TO  BE PRINTED
                        6925  *      OUTPUT: CONDITION FLAGS
                        6926  *              Z:      NO ERROR
                        6927  *              NZ:     ERROR OCCURED
                        6928  *                        ===>  ERROR  CODE
                        6929  *
                        GF9IO SHeeeeeeMSKRKHSSHAKHERESESHEEE   EKTEER EER  HERRERA         EREERE
                        6931
                        6932        ;GLOBAL  _PR_CH
                        6933        ;EXT     PRINT_BUFFER
                        6934        ;EAT     CHK_IF_INACTIVE
                        6935
    F4FC                6936  __PR_CH:
    F4FC  C5            6937         PUSH    BC
    F4FD  D5            6938         PUSH    DE
    F4FE  E5            6939         PUSH    HL
    F4FF  FOES          6940         PUSH    LY
                        6941
    F501  32FD76        6942         LD      [PRINT _BUFFER],A
    F504  3E03          6943         LD      A,ETX                     ;  TERMINATE STRIN W/ETX
    F506  32F077        6944         LO      (PRINT_BUFFER+1],A        ;
    F509  21FD76        6945         LD      HL,PRINTBUFFER            ;  ADDRESS OF PRINT BUFFER
                        6946
    FSOC  CDF515        6947         CALL    __PR_BUFF
                        6948
    FSOF  FOE!          6949         POP     IY
    F511  Ef            6950         POP     HL
    F512  D1            6951         POP     DE
    F513  C1            6952         POP     BC
                        6953
    F514  C9            6954         RET
                        6955
                        O57  See      ERE  ERE       EEE REE  REE EEE EEE     ERE EERE REEEEE   EEETERETE    ER EEE EEERE REE
                        6958 *  PRINT_BUFFER    ALLOWS   THE  CALLER   TO  PRINT   AN  ASCII  ETX-TERMINATED     STRING
                        6959 *        INPUT:    HL  ==>   ADDRESS    OF ETX-TERMINATED      STRING
                        6960 *        OUTPUT:   CONDITION    FLAGS
                        6961 *                  Z:        NO  ERROR
                        6962 *                  NZ:       ERROR   OCCURED
                        6963 *                               ===>    ERROR   CODE
                        6964 *
                        6965 SESSRESRESESSESSKEKSKAREKHEAARSEKES     CERES       ESSERERECESSES   SER EKEREK  ESSERE  KEES SE
                        6966
                        6967           GLOBAL   _PR_BUFF
                        6968
                        6969         ;EXT       __FIND_DCB,__WR_CH_DEV
                        6970
    F515                6971 _  PR_BUFF.
    F515 CS             6972          PUSH      BC
    F516 D5             6973          PUSH      DE
    F517 ES             6974          PUSH      HL
    F518 FDES           6975          PUSH      IY
                        6976    |
    FS1A                6977 PR_BUFF2:
    FS1A 3E02           6978          LD        A,PRINTER_ID                    ; WANT  THE  PRINTERS   DCB
    F51C CDF446         6979          CALL      __FIND_DCB                      ; GET  THE  DEVICE’S  OCB
      |          |      6980
    FS1F 2037           6981          JR        NZ,END_PRINT_ROUTINE            ; THERE  WAS  A PROBLEM   FINDING    THE  DCB
                        6982
    F521 COF496         6983          CALL      CHK_IF_INACTIVE
    F524 2032.          6984          UR        NZ,PRTR_DCB_ACTIVE
                        6985
    F526                6986 CHECK_FOR_ETX:
    F526 010000         6987          LO        BC ,O                           ; CHARACTER   COUNT
    F529 5D             6988          LD        Sk                              ; SAVE  THE  STRING
    F52A 54             6989          LD        0,H                             ; DE=HL=  PTR  TO UNPRINTED     STRING
                        6990
    F528                6991 GET_NEXT_ASCII:
    F52B 3E03           6992          LD        A,ETX                      :    :
    F520 BE             6993          cP        [HL]                            ; IS  IT AN  ETX?
    FS2E 2818           6994          JR        Z,ITS_ETX                       ; VES
                        6995
                        6996                                                    ; NO
    F530 23             6997          INC       HL                              - POINT  TO  NEXT CHARACTER
    F531 OC             6998          INC       Cc                              ; INC  COUNT
    F532 79             63999         LD        A,C                             ; HAVE  WE  LOOKED AT   16 BYTES?
    F533 FE10           7000          cP        16                              ‘
    F535 20F4           7001          JR        NZ,GET_NEXT_ASCII                 VES
                        7002 ;:                                                   DE  = PTR  TO UNPRINTED    STRNG,   DE=PTR   TO UNPRNTED+    16
    F537 EB             7003          EX        DE ,HL                          - HL  = PTR  TO UNPRINTED    STRNG,   DE=PTR   TO UNPRNTED+    16
                        7004
    F538                7005 WRITE  _COMMAND_ AGAIN:
                        7006
    F538 3EO2           7007          LD        A,PRINTER_ID                       .
    F53A CDFB75         7008          CALL      __WR_CH_DEV
                        7009
    F53D 2806           7010          JR        Z,WRITE  DONE                   - WRITE  COMPLETED  WITH   NO   ERRORS
                        7ON1
    F53F F              7012          CP        PR NAK                          oe    TT A  NAK?
    F541 7   '          7013          JR        N7,PRINT_CMND_FAILED            ;     \,AN  ERRGR
                          7014
    F543  18F3            7015         JR        WRITE_COMMAND_AGAIN          ; SEND ANOTHER  WRITE  COMMAND
                          7016
    F545                  7017  WRITE_DONE:
    F545  EB              7018         EX        DE, HL                       ; DE = PTR  TO UNPRINTED   STRNG,   HL=PTR TO  UNPRNTED+16
    F546  18DE            7019         UR        CHECK_FOR_ETX                ; GO CHECK  THE NEXT  CHARACTER
                          7020
                          7021
    F548                  7022  ITS_ETX:
    F548  EB              7023         EX        DE, HL
    F549  AF              7024         XOR       A                            ; ZERO OUT  A
    F54A  B9              7025         cP        c                            ; WAS THE  FIRST CHARACTER   CHECKED
                          7026                                                ; AN ETX?
    F54B  2808            7027         JR        Z,END_PRINT_ROUTINE          ; YUP, DON’T  BOTHER  PRINTING   IT
                          7028
    F54D                  7029  SEND_ANOTHER_WRITE:              .
    F54D  3£02            7030         LO        A,PRINTER_ID                 ; WILL WRITE  TO THE  PRINTER
    FS4F  CDFB75          7031         CALL      __WR_CH_DEV                  ; WRITE CHARACTERS
                          7032
    F552  2804            7033         JR        Z,COMMAND_FINISHED_     SUCCESSFULLY   ; ALL DONE
                          7034
    F554  FE86            7035         cP        PR_NAK                       ; DO WE HAVE  A NAK?
    F556  28F5            7036         JR        Z,SEND_ANOTHER    WRITE      ; YUP
                          7037
                          7038                                                ; NOPE, MUST  BE AN  ERROR
                          7039                                                                  :
      .                   7040
    F558               _  7041  COMMAND_FINISHED   SUCCESSFULLY:
    F558                  7042  PRINT_CMND_FAILED:
    F558                  7043  PRNT_CMND_FAILED:
    F558                  7044  PRTR_DCB_ACTIVE:
    F558                  7045  END_PRINT_ROUTINE:
    F558  FDE!            7046         pop       IY
    FSSA  E1              7047         PoP       HL
    FS55B 01              7048         pop       DE
    FSSC  C1              7049         pop       BC                           ; ON ERROR,  ZERO  FLAG SET  AND  A
                          7050                                                ; CONTAINS  THE ERROR  CODE
    F55D  C9              7051         RET
                          7052
                          TOH4 SHSKSREASSHEHE  REKEERHEEEEEE EAE TEEETHERS  SESEEAE   ERE  EKER  EERE EEE RS
                          7055 *                            .
                          7056 *                  SETS UP PRINT_BUFFER   AND THE  HL  REGISTER AND
                          7057 * CALLS _START_PR_BUFF
                          7058 *      INPUT:   A = ASCII CHARACTER
                          7059 *      OUTPUT:   CONDITIONFLAGS
                          7060 *                 Zz:   NO ERROR
                          7061 *                NZ:    ERROR OCCURED
                          7062 *                       A = ERROR  CODE
                          7063 *
                          7065
                          7066       ;GLB      __SETUP_PR_BUFF
                          7067
    FSSE        |         7068 _ SETUP_PR_BUFF:
    FSS5E  32FO76         7069        LD       (PRINT_BUFFER],A
    F561  3E03            7070        LD.      A,ETX
    F563   32FD77     ~   7O71        LD       {PRINT_BUFFER+1],A
       |                  7072
    F566   21FO76         7073   .    Lo       HL,PRINT_BUFFER
                          7074
    FS69   CDOFS80        7075        CALL     __START_PR_BUFF
                  |       7076                          |
    FS6C   CO             7077        RET
                          7078
                          7079
                         7080
                       7083 *
                       7084 * _START_PR_CH   SETS UP PRINT _BUFFER ANO  THE  HL  REGISTER AND
                       7085 * CALLS _START_PR_BUFF
                       7086 *      INPUT:   A = ASCII CHARACTER
                       7087 *      OUTPUT:   CONDITION FLAGS
                       7088 *                 2:    NO ERROR
                       7089 *                N2:    ERROR OCCURED
                       7090 «                       A = ERROR CODE
                       7091 *
                       7093
                       7094       ;GLB      __START_PR_CH
                       7095
    F56D               7096 __START_PR_CH:
    FS56D32FD76        7097        LO       (PRINT_BUFFER),A
    F570 3E03          7098        LD       A,ETX
    F572 32FD77        7099        LD       [PRINT_BUFFER+1},A
                       7100
    F575 21FO76        7101        LD       HL,PRINTBUFFER
                       7102
    F578 COF580        7103        CALL     __START_PR_BUFF
                       7104
    F57B C9            7105        RET
                       7106
                       7107
                       7108
                           7110  EKSKEEKKESKRESKESKEKKSEEKEKKSSEKKRKEKKKEKKEKKEKEKESESCREREKEARKESEKEERKEEKERRKEKEEKKEEEKEKEKES
                           7194  e
                           7112  .       __END_PR_CH        CALLS    _END  PR_BUFF     TO  CHECK   THE  DCB STATUS BYTE AND
                           7113  ‘       RETURNS    THE   RESULT    TO  THE  CALLER
                           7114  a
                           7115  .       INPUT:     NONE
                           7116  8
                           7117  .       OUTPUT:    CONDITION     FLAGS
                           7118  “                  C:         COMMAND     COMPLETED
                           7119  °                NC:          COMMAND     NOT  COMPLETED
                           7120  ©                  z:         NO   ERRORS   OCCURED
                           7121  2                NZ:          ERRORS
                           7122  °                             A  =  ERROR   CODE
                           7123  .             |
                           7124  ‘       ALL        REGISTERS     ARE   PRESERVED
                           7125  .                                       |
                           7126  SRPSSSESESKSESSSSSHESSSESHSEKSKSSSSKESSESSSEHASHKSHKSESSSSESEHSSSESKSESEHKSSESESEKSEHSKEESHKSESEEESSESEEEESE
                           7127
                           7128         :GLB        __END_PR_CH
     FS7C                  7129  __END_PR_CH:
     FS7C  CDOFSB8         7130          CALL       __E€ND_PR_BUFF
                           7131
     FS7F  C9              7132          RET
                           7133
                           7134
                                   713G   SEERA               EEE   EKER          EERE  EEE      EEE  ERE  EERE  EERE   EERE    ERE   REET    KER EERE      EE
                                   7137   *  __START_PR_BUFF        ALLOWS     THE   CALLER     TO  PRINT     AN  ASCII   ETX-TERMINATED         STRING
                                   7138   *        INPUT:       HL  ==>     ADDRESS     OF   ETX-TERMINATED         STRING
                                   7139   ©        OUTPUT:      CONDITION      FLAGS
                                   7140   *                     Zz:         NO  ERROR
                                   7141   *                     NZ:         ERROR    OCCURED
                                   7142   *                                 A  ===>     ERROR    CODE
                                   7143
                                   7144   SSSTACSSSSHRASSESSEKEKSSARESSSHSHSHEKEKREKRHEHSESEKEKEKRSKTKREKEESTSHKHESKARSESEESHKESEKRESEKEHRHE          KEK  ERES
                                   7145
                                   7146           ;GLB          __START_PR_BUFF
                                   7147
                                   7148    |      sEXT          __START_WR_CH_DEV
                                   7149
        F580                       7150   __START_PR_BUFF:
        F580   CS                  7151            PUSH     _—  BC
        F581   D5                  7152            PUSH         _—sODE
        F582   E5                  7153            PUSH    =    HL
        F583   FDES                7154            PUSH         iY
                                   7155
        F585   3602                7156            LO           A,PRINTER_ID                        ;   WANT   THE   PRINTERS     DCB
        F587   CDF 446             7157            CALL         __FIND_DCB                          ;   GET   THE   DEVICE'S    DCB
                                   7158
        F58A   2026                                JR           NZ,NO_DCB_FOUND1                    ;   THERE    WAS  A  PROBLEM     FINDING     THE    OCB
                                   7160
        FS58C  CDF496              7161            CALL         CHK_IF_INACTIVE
        FS8F   20C7                7162            UR           NZ,PRTR_DCB_     ACTIVE!                                                                                          ;
                                   7163
        F591   010000              7164            LD           BC,O                                ;   CHARACTER     COUNT
        F594   5D                  7165            LD           E.L          -                      ;   SAVE   THE   STRING
        F595   54                  7166            LD           D.H                                 ;   DE=HL=    PTR   TO  UNPRINTED      STRING
                                   7167
        F596                       7168   GET_NEXT_ASCII2:
        F596   3E03                7169            LD           A,ETX
        F598   BE                  7170            cP           (HL)                                ;   IS  IT   AN  ETX?
        F599   280F                7171            JR           Z,1TS_ETX2                            :  YES
                                   7172
                                   7173                                                             ;   NO
        F59B   23    ~~            7174            INC          HL                                  ;   POINT    TO  NEXT   CHARACTER
        F59C   OC                  7175            INC          c                                   ;   INC   COUNT
        F59D   79                  7176            LD           A,C                                 ;   HAVE   WE   LOOKED    AT  16  BYTES?
        FS9E   FE10                7177            cp           16
        FS5AO  20F4                7178            UR           NZ,GET_NEXT_ASCI12                  >   YES
                                   7179   ;                                                             DE  =  PTR   TO  UNPRINTED      STRNG,    DE=PTR      TO   UNPRNTEDt    16
        FSA2   EB                  7180            EX           DE ,HL                              ,   HL  =  PTR   TO  UNPRINTED      STRNG,    DE=PTR      TO   UNPRNTED¢+   16
        F5A3   3E02                7181            LD           A,PRINTER_ID
        F5A5   CDFBC2              7182            CALL         §__START_WR_CH_DEV
                                   7183
        F5A8   1808                7184            JR           WRITE   _CMND_SENT
                                   7185
        FSAA                       7186   ITS_ETX2:
        FSAA   EB                  7187            EX           DE ,HL
        F5AB   AF                  7188            XOR          A                                   ;   ZERO   OUT   A
        F5AC   B9                  7189            cP           c                                   ;   WAS   THE   FIRST   CHARACTER      CHECKED
                                   7190                                                             :   AN  ETX?
                                   7191
        F5AD   3EO2                7192            LD           A,PRINTER_ID                        ;   WILL   WRITE    TO  THE   PRINTER
    FSAF C4FBC2         7193        CALL     NZ,__START_WR_CHDEV             ; NOPE,  WRITE  CHARACTER
                        7194                                           ; IS PASSED  BACK TO  CALLER
    F5B2                7195 NO_DCB_FOUND!:
    FS5B2               7196 WRITE_CMND_SENT:
                        7197
    FSB2 FDE1           7198        pop      IY
    FSB4 E1             7199        pop      HL
    FSBS D1             7200        Pop      DE
    FSB6 C1             7201        PoP      BC
                        7202
    F587 C9             7203        RET
                        7204
                        7205
                            7207
                            7209  *
                            7210  *        __END_PR_BUFF       CHECKS    THE   DCB    COMM/STATUS     BYTE  AND  RETURNS     THE  RESULT
                            7211  ¢        OF  THE   CHECK
                            7212  *
                            7213  *        INPUT:     NONE
                            7214  *
                            7215           OUTPUT:    CONOITION      FLAGS
                            7216  ¢                   C:          COMMAND    COMPLETED
                            7217  *                  NC:          COMMAND    NOT    COMPLETED
                            7218  *                   2:          NO  ERRORS    OCCURED
                            7219  ¢                  NZ:          ERRORS
                            7220                                  A  =  ERROR   CODE
                            7221  ®
                            7222  *        ALL        REGISTERS      ARE.  PRESERVED
                            7223  *
                            T2244 SHSHESSSSSESEHRESHE    HEHEHE   EHREHEHEHEK    EERE    HEHEHE  EEE  EEKE HEE  ESTEE SESE   ESHER ERE EEESS
                            7225
                            7226          ;GLB        __END_PR_BUFF
                            7227          sEXT        __END_WR_CH_DEV
                            7228
     F588                   7229  __END_PR_BUFF:
                            7230
     F588  FDES             7231           PUSH       LY
                            7232
     F5BA  3E02             7233           LO         A,PRINTER_ID
     FSBC  CDF446           7234           CALL       __FIND_  OCB
     FSBF  CDFBE1           7235           CALL       __END_WR_CH_DEV                     ;  CHECK  STATUS   BYTE
                            7236
     F5C2  3008             7237           JR         NC ,CMNO_NOT_PROCESSED              ;  COMMAND   NOT  COMPLETED
                            7238
     F5C4  2809             7239           JR         Z,FINISHED     WO_ERROR             ;  COMMAND   COMPLETED,    NO   ERROR
                            7240
     F5C6  FEBE6            7241           cP         PR_NAK                              ;  WAS  IT  A NAK?
                            7242
     F5C8  2005             7243           JR         NZ,NOT_PR_NAK                       ;  NOPE,  MUST  BE  AN   ERROR
                            7244
     F5CA  FO360003         7245           LD         (1¥+D_COM    STAT],0CB       WR     ;  SEND  ANOTHER   WRITE   COMMAND
                            7246
     FS5CE B7               7247           OR         A                                   ;  CLEAR  CARRY   TO  INDICATE     COMMAND
                            7248                                                          ;  HAS  NOT  BEEN  FINISHED
                            7249
     F5CF                   7250  NOT_PR_NAK:
     FSCF                   7251  CMND_NOT  PROCESSED:
     FSCF                   7252  FINISHED  WO  ERROR:
                            7253
     FSCF  FDE1             7254           PoP        ly
                            7255
     F501  C9               7256           RET
                            7257
                                    7283
                                    7284 ;REV  O             (v/D     8-24-83)
                                    7285
                                    7286         GLOBAL    _REQ  _TAPE_STAT
                                    7287
                                    7288        SEXT       __REQUEST_STATUS
                                    7289
                                    T2QGOSeeee eee  HEHEHE   EES EEE  HEHE HEHEHE   HEHEHE  EEE  TEESE    EEREREEREHESS
                                    7291 *  THIS ROUTINE   REQUESTS   THE  STATUS   ON THE  TAPE  DRIVE
                                    7292 *       INPUT:    NONE
                                    7293 *       OUTPUT:
                                    7294 *         |       CONDITION   FLAGS
                                    7295 *                           Zz:       NO  ERROR
                                    7296 *                           NZ:       ERROR  OCCURED
                                    7297 *                                     A  ===> ERROR  CODE
                                    7298
                 F507               7299 __REQ_TAPE_STAT:
                 FSD7 3E08          7300         LO        A,TAPE_ID
                 FSD9 C3F473        7301         JP        __REQUEST_STATUS
                                    7302 ;
                                    7303 ;st esseseesereweesssssesssssesssssssssssssssssssrssesssssssssssszse=
                                    7304 ;,sesssssreasees  esseseseeesses   reseresesrsessrsssssesersesssssssssssssse
                                    7306  Ses Seeseeese ser esas  ssesesesssssssrssrsersssesessssseesesssssrsss=
                        7308   NAME    “Rev 18  -  RPD*
                        7309  ;
                        7310  ;                Rev  History
                        7311  ;                Rev     Date         Name       Change
                        7312  ;                18   30sept400p      RPD        extracted RAM  areas   and put   into EOS COMN
                        7313  ;                17)  21Sept83_ 1440  JKL        take out stuff  that   EQS does  not  need,  put  CR   back  to normal
                        7314  ;                                                take out flashing  cursor
                        7315  ;                16   19Sept83_1730   JKL        CR now does  a clear   to EOL  and  LF
                        7316  ;                15   18Sept83_1800   JKL        CR now does  a CLEAR   to EOL
                        7317  ;                14   15Sept83_1600   JKL        added routine  to flash   cursor   .
                        7318  ;                13      1SSepts3     JKL        XOR cursor with  char   that  is under,   take  out    print  screen
                        7319  ;                12      14Septs3     JKL        include print  screen
                        7320  ;                11      14Sept83     JKL        return cursor  position   in DE
                        7321  ;                10      O6Septs3     JKL        added routine  to return   cursor   position   in window
                        7322  ;                 9      osSepts3     JKL        fix for SHIFT  LOCK  back  space,   to  be removed    later
                        7323  ;                 8      O4Septs3     JKL        added delete  char and   shift  left
                        7324  ;                 7      O4Septs3     JKL        added insert  blank,   made LINEBUFFER_    33  chars   long
                        7325  ;                 6      O3Septs3     JKL        INIT will set  cursor   pos
                        7326  ;                 5      O3Septs3     JKL        Added return  cursor   pos routine
                        7327  ;                 4      01Septs3     JKL        Fixes and speedups,    Major rewrite
                        7328  ;                 3      27Aug83      RPD        new case implementation    (jump   table)
                        7329  ;                 2      27Aug83      RPD        added scrol!
                        7330  ;                  1     26Aug83      RPD        moved to EOS,  contains   window   and  XY logic
                        7331  ;                 Oo     26Aug83      RPD        copied from old  EOS,   uses WRITE   and  READ  VRAM
                        7332;       2          ef   27© 2 FF     -  se   see
                        7333
                        7334  ;
                        7335  ;External  Routines
                        7336  ;
                        7337                  ;EXT      WRITE _VRAM        ;0S-7
                        7338                  ;EXT      READ_VRAM          ;0S-7
                        7339  ;
                        7340  ;External  data structures  used
                        7341  ;
                        7342                  3EXT      OLOCHAR_
                        7343                  ;EXT      X_MIN
                        7344                  ;EXT      X_MAX
                        7345                  ;EXT      Y_MIN
                        7346                   EXT      Y_MAX
                        7347                   EXT      LINEBUFFER_
                        7348                  ;EXT      NUM_LINES
                        7349                  >EXT      NUM_COLUMNS
                        7350                  >EXT      UPPER_LEFT
                        7351                  >EXT      PTRN_NAME_TBL
                        7352                  ;EXT      CURSOR
                        7353
                      7355 ;:
                      7356 ;Local Equates
                      7357 ;
             <OOOA>   7358 LF                EQU       OAH
             <OOOC>   7359 FF                EQU       OCH
             <0008>   7360 BS                EQU       O8H
             <OOOD>   7361 CR                EQU       OOH
             <0O016>  7362 CLR_TO_EOL        EQU       16H
             <0018>   7363 CLR_TO_EOS        EQU       18H
             <OO01C>  7364 GOTO_XY_CHAR      EQU       1CH
             <0080>   7365 HOME              EQU       80H
             <OOAO>   7366 UP                EQU       OAOH
             <OOA1>   7367 RIGHT             EQU       OA1H
             <OOA2>   7368 DOWN              EQU       OA2H
             <OOA3>   7369 LEFT              EQU       OA3H
             <OOSF>   7370 CURSOR_CHAR       EQU       _                 ;Char  to emit as cursor
             <0020>   7371 BLANKING CHAR               .s                ;Char  used when scrolling    to  fill screen
             <FEAG>   7372 CURSOR_X          EQU       CURSOR+1
                      7373
                          7375 ;
                          7376 ;__CONS_INIT
                          7377 ;
                          7378 ;      Sets  up  the window sizes for  the CONSOLE_OUT  routine
                          7379 ;
                          7380 ;Input Parameters:
                          7381 ;  8B- number   of columns in the window  - 1, 0..31
                          7382 ;  C - number   of lines in the window  - 1, 0..23
                          7383 ;  D - Absolute   (0 based) X coord of  upper left corner  of. window,  0O..31
                          7384 ;  E - Absolute   (0 based) Y coord of  upper left corner  of  window,  0O..23
                          7385 ; HL - Pattern   Name Table (PNT) starting  address
                          7386 ;
                          7387 :NOTE- User  must  initialize the vVOP
                          7388 ;
                          7389                  ;GLB     __CONS_INIT
    FSDC                  7390 __CONS_INIT:
    FSDC 04               7391                   INC     B                ;Adjustfor   old calling   convention
    FSDD OC               7392                   INC     Cc
    FSDE ED43FE9SF        7393                   LD      [NUM_LINES],BC   ;Set num  lines, cols  in  window
    FSE2 EDS3FEA1         7394                   LD      [UPPERLEFT),DE   ;Set upper  left corner   of window
    FSE6 EDS3FEAS         7395                   LD      [CURSOR],DE
    FSEA 22FEA3           7396                   LD      [PTRN_NAME_TBL],HL  ;Save  address  of Pattern  name    table
                      _   7397
    FSED 7A   |           7398                   LD     'A,D              ;Calc min/max  coords  of  window
    FSEE 32FE7A           7399                   LD      [X_MIN],A
    FSF1 80               7400                   ADD     A.B
    FSF2 3D               7401                   DEC     A
    FSF3 32FE7B           7402                   LD      [X_MAX],A
    FSF6 78               7403                   LD      A,E
    FSF7 32FE7C           7404                   LD      {Y_MIN],A
    FSFA 81               7405                   ADD     A.C
    FSFB 3D          -    7406                   DEC     A
    FSFC 32FE7D           7407                   LD      [Y_MAX],A
                          7408
    FSFF 3E&20            7409                   LO      A,BLANKINGCHAR
    F601 32FE79           7410                   LD      [OLDCHAR_),A
    F604 3ESF             7414                   LD      A,CURSOR_CHAR
    F606 CDOF7DA          7412      |            CALL    PUT_CHAR_ON_SCREEN
                          7413
    F6O9 C9               7414                   RET
                          7416    ;
                          7417    ; __CONS_ OUT      -   This   entry  point   will   check   special    chars   such  as
                          7418    ;                     Carriage     Return   and  performs     their   normal   functions
                          7419    ;                     all   other,   printable,     chars   are   put  onto  the   screen
                          7420    ;
                          7421    ; _ CONS OISP      -   This   entry  point   will   put  all   chars   onto  the   screen
                          7422    ;                     no   matter   what,   no  checking     is done   for  control    chars
                          7423    ;
                         7424     |
                        . 7425    ;Input  Parameters:
                          7426    ;   A  - character     to  emit
                          7427    ;
                          7428    ;  optionally
                          7429    ;   E  - Y  location    to  goto   (must  be   in  window)
                          7430    ;   O  - X  location    to  goto   (must  be   in  window)
                          7431   =;
                        7432      ;
                          74393   ;   Saves   all   registers
                          7434  ;
                          7435                       ;GLB        __CONS_ OUT
                          7436                       ;GLB        __CONS_DISP
    FGEOA                 7437    _CONS  OUT:
    FEOA   FS             7438                        PUSH     AF
    F6EOB  C5             7439                        PUSH       BC
   ~F6EOC  E5             7440                        PUSH       HL
    F6OD   DDES           7441                        PUSH       IX
    FEOF   FDES        .  7442                        PUSH       LY                °
    F611   05.            7443                        PUSH       DE                   ;This   may   contain   the  X-Y   coord    of  goto xy
                          7444               .
    F612   21F80E         7445                        LO         HL,SPECIAL_  CHARS
    F615   01000C         7446                        LD         BC,NUM_SPCL_CHARS
    F618   EDB1           7447                        CPIR
    FE1A   2013           7448                        JR         NZ,NOT_ SPECIAL
                          7449
    FE1C   21FB1A         7450                        LD         HL,SPCL_VECTOR_TBL
    F61F   O9             7451                        ADD        HL,BC
    F620   09            7452                         ADD        HL,BC
                         7453
    F621   47            7454                         LD         B.A                  ;Save   char   in B
                          7455
    F622   7E             7456                        LD         A,{HL}
    F623   23            7457                         INC        HL
    F624   66            7458                         LD         H,[HL]
    F625   6F            7459                         LD         L.A
    F626   E9            7460                         JP         {HL J                -Vector    to  special   char   handler
    F627              7462 __CONS_DISP:
    F627 FS           7463                     PUSH      AF
    F628 C5           7464                     PUSH      BC
    F629 E5           7465                     PUSH      HL
    F62A DDES         7466                     PUSH      IX
    FG62CFOES         7467                     PUSH      LY
    F62E DS           7468                     PUSH      DE
    F62F              7469 NOT_SPECIAL:
    F62F CDF7DA       7470                     CALL      PUT_CHAR_ON_SCREEN   ;Display char where cursor    is at
    F632 2AFEAS       7471                     LO        HL,[CURSOR }
    F635 24    |      7472                     INC       H                 ;Move cursor to right (+1)
    F636 3AFE7B       7473                     LD        A,[X_MAX]         ;  but check for going out  of
    F639 BC           7474                     cP        H                 ;    the window
    F6E3A3014         7475               ,     JR        NC,SAVE_CURSOR    ;If taken then stayed in window
    F6E3CSAFE7A       7476                     LD        A,(X_MIN]         ;Went out of window so set  X
    F63F 67           7477                     LD        H,A   .           ;   to left edge
    F640 2C           7478                     INC       L                 ; and move down one line
    F641 3AFE7D       7479                     LO        A,[Y_MAX]         ;   but check to see if still
    F644 BD           7480                     cP        L                 :      in the window
    F645 3009         7481                     JR        NC,SAVE_CURSOR
    F647 20           7482                     DEC       L                 ; Put back into window
    F648 ES           7483                     PUSH      HL
    F649 COF7ED       7484                     CALL      GET_CHAR_UNDER_CURSOR
   F64C  CDOF794      7485                     CALL      SCROLL_UP
    F64F E1           7486                     PoP       HL
                      7487                              |
    F650 22FEAS       7488 SAVE CURSOR:        LO        [CURSOR),HL
    F653.CDF7FO       7489 NEWCURSOR:          CALL      GET_CHAR_UNDER
    F656              7490 PUT_CURSOR_ON:
    F656 3ESF         7491                     LD        A,CURSOR_CHAR
    F658 CDF7DA       7492                     CALL      PUT_CHAR_ON_SCREEN
                      7493
    F65B 01           7494 EXIT:               PoP       DE
    F6SC FDE1         7495                     POP       IY
    F6SE ODE!         7496                     PoP       IX
    F660 E1           7497                     PoP       HL
    F661 C1           7498                     PoP       BC
    F662 Fi           7499                     POP       AF
    F663 C9           7500                     RET
                       7502 ;
                       7503 ;Special Character Handlers
                       7504 ;
                       7505 ;
                       7506 ; RETURN_WITH_ERASE -  moves cursor to  right edge of  window on current    line
                       7507 ;           after clearing to end of line
                       7508 ;
                       7509 ;RETURN_WITH_ERAS:
                       7510 ;                CALL    ERASETHIS LINE
    F664 CDF707        7511 RETURN:         CALL    PUT_OLD_ON_SCREEN                 ;Display  char   cursor  was hiding
    F667 SAFET7A       7512                 LD      A,[X_MIN]
    FE6A 32FEA6        7513                 LO      {CURSOR_X],A
    F66D 2AFEAS        7514                 LD      HL,[CURSOR}
    F670 C3F6ES5S3     7515                 JP      NEW_CURSOR
                        7517 ;
                        7518 ; MOVEUP   -  Moves  the cursor up  if not at top of window
                        7519 ;
    F673                7520 MOVE_UP:
    F673 2AFEAS         7521                  LD      HL,[CURSOR]
    F676 3AFETC         7522                  LD      A,{Y_MIN]
    F679 BD             7523                  cP      L
    FGE7A280F           7524                  JR      Z,EXIT           ;Forget request
    F67C 2D             7525                  DEC     L                ;Move up
                        7526
    F67D CDF707         7527 RESTOREOLD:      CALL    PUT_OLD_ONSCREEN   ;Display char cursor    was  hiding
    F680 C3FE6E50       7528                  JP      SAVE_CURSOR      ;Display cursor  in new   spot
                       7530 ;
                       7531 ; MOVE_ODOWN  -   Moves  the cursor  down if will stay in window, except
                       7532 ;                 if used  by linefeed  when the screen is scrolled
                       7533 ;
    F683               7534 MOVE_DOWN:
                       7535
    F683 2AFEAS        7536                   LO       HL,{CURSOR}
    F686 3AFE7D        7537                   LD       A,[Y_MAX]        -See if at bottom of window
   F689  BD            7538                   cP       L
    F6E8A2304          7539                   JR       Z,SCROLL_POSIBLE
    FE8C 2C            7540                   INC      L                ;Move down
    F68D C3F67D        7541                   JP       RESTOREOLD
                       7542 ;
    F690 3EOA          7543 SCROLL_POSIBLE:   LO       A,LF             ;See if linefeed, and if it  is
    F692 B88           7544                   CP       B                ;   then scroll up, else leave
    F693 20C6 .        7545                   JR       NZEXIT           ;     cursor and screen as  is
    F695 CDF794        7546                   CALL     SCROLL_UP
    F698 2AFEAS        7547                   LO       HL,[CURSOR]
    F69B C3F653        7548                   JP       NEWCURSOR
                        7550 ;
                        7551 ; MOVE_RIGHT  -   Moves the cursor to  the right, and if at window’s
                        7552 ;                 edge will move down  a line to the left edge, unless
                        7553 ;                 at the lower right corner  of the window in which case
                        7554 ;                 nothing ts down
                        7555 ;:
    F6ESE               7556 MOVERIGHT:
    F6E9S2AFEAS         7557                  LO      HL,{CURSOR]
    FGA! 3AFE7B         7558                  LD     A, [X_MAX]
    FG6A4BC             7559                  cP      H
    F6AS 2804           7560                  JR      Z,TRY_MOVEDOWN
    FEAT 24             7561                  INC     H                ;Move to right
    F6A8 C3F67D         7562                  JP      RESTOREOLD
                        7563 ;                    .
    F6AB 3AFE7D         7564 TRY_MOVEDOWN:    LO      A.LY_MAX]
    F6AE BD             7565                  CP      L
    FGAF 28AA           7566                  JR      Z,EXIT           ;At bottom of window so abort
    F6B1 2C             7567                  INC     L
    F6B2 SAFETA         7568                  LO      A,(X_MIN]
    F685 67             7569                  LD      HA
    F686 C3F670         7570                  JP      RESTOREOLD
                        7872 ;
                        7573 ; MOVELEFT   -   Moves the cursor to the left and if at left edge of
                        7874 ;                window will move up a line an to right edge if not
                        7575 ;                at upper left corner of window
                        7576 ;
    F6B9 2AFEAS         7577 MOVELEFT:        LD      HL,[CURSOR}
    F6BC 3AFETA         7578                  LD      A,{X_MIN]}
    F6EBFBC             7579                  cP      H
    FECO 2804           7580                  JR      Z,TRY_SCROLL_UP
    F6EC225             7581               —  DEC     H               ;Move to left
    F6C3 C3F67D         7582                  JP      RESTOREOLD
                        75863;
    F6EC63AFETC         7584 TRY_SCROLL_UP:   LD      A,[Y_MIN)
    F6CS B80            7585                  cP      L
    FECA 2868F          7586                  JR      Z,EXIT          ;Abort if at upper left corner
    F6ECC2D             7587                  DEC     L
    F6CD 3AFE7B         7588                  LD      A,[X_MAX]
    F6DO 67             7589                  Lo      H,A
    F6D1 C3F670         7890                  JP      RESTOREOLD
                      7592 ;
                      7593 ; MOVE HOME  -   Moves cursor to the upper left corner  of the window
                      7594 ;
                      7595 ;
                      7596 ; FORM_FEED  -   Clears the screen and puts the cursor  at the upper left
                      7597 ;                corner of the window
    F6D4              7598 FORMFEED:
    F6D4 3AFES9F      7599                  LD      A,(NUMLINES]
    F6D7 47           7600                  LO      BA
    FGEDS2AFEAI       7601                  LD      HL,[UPPER_LEFT]
                      7602
    F608 CDF74C       7603                  CALL    BLANKSCREEN
                      7604
    FEDE 3E20         7605                  LD      A,BLANKINGCHAR
    F6EEO32FE79       7606                  LD      [OLDCHAR_}.A
                      7607
    FG6E3CDF7D7       7608 MOVEHOME:        CALL    PUT OLDON SCREEN   ;Needed only  for MOVE_HOME  not FORM_FEED
    FGEG 2AFEA1       7609                  Lo      HL,[UPPER_LEFT)
    FG6ESC3F650       7610                  JP      SAVE_CURSOR
                         7612 |;
                         7613 ; ERASETO  EOL    -  From cursor position fills rest of line
                         7614 ;                    with BLANKINGCHAR,  to end of window only
                         7615 ;                    Will blank char under cursor always.
                         7616 ;
    FGEC                 7617 ERASETO EOL:
    FGEC  CDF766         7618                   CALL    ERASETHIS LINE
    F6EF  C3F656         7619                   uP      PUT_CURSOR_ON
                        7621 ;
                        7622 ; ERASE_TO_EOS   -  Wil)  erase the  screen (window) from the current
                        7623 ;                   cursor  postion  to the end of the window. The
                        7624 ;                   cussor  position  is also blanked.
                        7625 ;
                        7626 ;
    FGF2                7627 ERASETO EOS:
    F6F2  COF766        7628                  CALL     ERASETHIS  LINE    ;Erase to end of current  line
    FGFS  2AFEAS        7629                  LD       HL,[CURSOR}
    FGFB  2C            7630                  INC      L                ;Move down
    FGFS  3AFET7C       7631                  LD       A.{Y¥_MIN]
    FGFC  4F            7632                  LD       C,A
    FGFD  3AFEOF        7633                  LD       A,[NUMLINES]
    F700  81            7634                  AOD      A,C
    F701  95            7635                  SUB      L                ;Number of lines left to blank
    F702  CAF656        7636                  JP       Z,PUT_CURSOR_ON
    F705  47            7637                  to       B.A
    F706  3AFETA        7638                  LO       A,(X_MIN)
    F709  67            7639                  LD       HA
    F7OA  CDF74C        7640                  CALL     BLANKSCREEN
    F70D  C3F656        7641                  JP       PUT_CURSOR_ON
                      7643 ;
                      71644; GOTO xy  -   Puts cursor to desired  X-Y coord  if  in  window
                      7645 ;
                      7646 :Input Parameters:
                      7647 ;  D - X location
                      7648 ;  E€- ¥ location
                      7649
    F710              7650 GOTOXY:
    F710 SAFETA       7651                  LO      A,([X_MIN}
    F713 BA           7652                  cp      D
    F714 2803         7653                  JR      Z,CHK_X_WITH_MAX
    F716 02F6S8       7654                  JP      NC EXIT
    F719 3AFE7B       7655 CHK_X_WITH_MAX:  LD      A(X MAX]
    FT71IBA           7656                  cP      0
    F710 2803         7657                  JR      2,CHK_Y_COORD
    F71F DAF658       7658                  JP      C,EXIT
    F722 SAFETC       7659 CHK_YCOORD:      LO      A.({Y_MIN)
    F725 88           7660                  cP      E
    F726 2803         7661                  JR      2,CHK_Y_WITH MAX
    F728 D2F6S8       7662                  JP      NC EXIT
    F728 3AFETO       7663 CHK_Y_WITH_MAX:  LO      A.[Y_MAX]
    F72E 88           7664                  cp      E
    F72F 2803         7665                  JR      Z,SET_CURSOR
    F731 DAF6S8       7666                  JP      C,EXIT
    F734 Es           7667 SET_CURSOR:      EX      DE,Hi
    F73S C3F67D       7668                  JP      RESTOREOLD
                      7670 ;
                      7671 :Internal Subroutines
                      7672 ;
                      7673 ;
                      7674 ; Subroutine
                      7675 ; BLANK_PORTION  -  Fills LINEBUFFER_ with number of chars  in  8
                      7676 ;                from where HL points
                      7677 ;
                      7678 ; Input Parameters:
                      7679 5   Hi - Potnter into LINEBUFFER_
                      7680 ;   8  - Number of the BLANKINGCHAR’s  to stuff in
                      7681 ;
                      7682 ;   A is destroyed
                      7683 ;
    F738              7684 BLANKPORTION:
    F736 E€5          76865                PUSH    HL
    F739 CS           7686                 PUSH    BC
    F734 1807         7687                 JR      BLANKREST
                       7689 ;
                       7690 ; Subroutine
                       7691 ; BLANKS       -  Fills  LINEBUFFER_ with  32 BLANKING CHAR‘s
                       7692 ;
                       7693 ;  A is destroyed
                       7694 ;
    F73C               7695 BLANKS:
    F73C ES            7696                  PUSH     HL
    F73D C5            7697                  PUSH     BC
    F73E 21FE7E        7698                  LO       HL,LINEBUFFER_
    F741 0620          7699                  LD       B32
    F743 3E&20         7700 BLANK_REST:      LD       A,BLANKINGCHAR
    F745 77            7701 BLANK_FILL:      LD       {HL}),A
    F746 23            7702                  INC      HL
    F747 10FC          7703                  DUNZ     BLANKFILL
    F749 C1            7704                  POP      BC
    FI4A E1            7705                  POP      HL
    F748 CO            7706                  RET
                          7708 ;
                          7709 ; Subroutine
                          7710 ; BLANK_SCREEN  -  Will   blank a  given  number of lines  on the  screen
                          7711 |
                          7712 ; Input Parameters:
                          7713 ;   8  - Number of  lines  to blank
                          7714 ;   HL - Absolute X-Y   coords of  start  position of tst  line  to blank
                          7715 ;
                          7716 ;   Destroys C, A, DE
                          7717 ;   User must reset  cursor
                          7718 ;
    F74C                  7719 BLANK_SCREEN:
    F74C  CDF73C          7720                 CALL      BLANKS            :Fill buffer  with BLANKING  CHAR
    F74F  3AFEAO          7721                 LD        A,[NUM_COLUMNS  }
    F752  4F              7722                 LD        C,A
                          7723
    F753  CS              7724 BLNK_SCRN_LOOP: PUSH      BC
    F754  €5              7725                 PUSH      HL                ;Save K-Y coord  of  tine
    F755  CDF7FC          7726                 CALL      CONVERTXY
    F758  0600            7727                 LD        8,OOH             ;C has number  of bytes  to  read
    F75A  21FE7E          7728                 LD        HL,LINEBUFFER_
    F75D  CDFDIA          7729                 CALL      WRITEVRAM
    F760  E1              7730                 POP       HL
    F761  2C              7731                 INC       L                 ;To next line  below
    F762  C1              7732                 POP       BC
    F763  10€E            7733                 DJUNZ     BLNK_SCRN_LOOP
    F765  CS              7734                 RET
                          7736 ;
                          7737 ; Subroutine
                          7738 ; ERASETHIS   LINE    -   This  routine   will erase  the   current  line
                          7739 ;                         from  the  cursor  position   to  the  right edge
                          7740 ;                         of  the window,   the char  under    the cursor   is
                          7741=;                         also  blanked.
                          7742 ;
                          7743 :Input Parameters:
                          7744 ;   None
                          7745 ;
                          7746 ;  Destroys   al!  registers
                          7747 ;  Sets OLDCHAR_    to BLANKING  CHAR
                          7748 ;
    F766                  7749 ERASE_THIS_ LINE:
    F766  CDOFT779        7750                    CALL     READ _FROM_CURSOR_TO_  EOL
    F769  ES              7751                    PUSH     HL           :
    F76A  CS              7752                    PUSH     BC
    F768  41              7783                    LO       B,C
    F76C  CDF738          7754                    CALL     BLANK  PORTION
    FIGF  Ci              7755                    POP      BC
    F770  E1          _   7786                 -  POP      HL
     .                    7787
    F771  3E20            7788                    LD        A,BLANKING  CHAR
    ‘F773 32FE79          7789                    LD        {OLDCHAR_}.A
                          7760
    F776  C3FDIA          7761                    JP       WRITE  _VRAM       write    line   with blanks,    return  thru  WRITE  _VRAM
                        7763 ;
                        7764 ;Subroutine
                        7765 ;READ_FROM_CURSORTO  EOL   -  reads the  line on screen from the
                        7766 ;                             cursor position  to the right edge  of  the
                        7767 ;                             screen
                        7768 ;
                        7769 ;Input Parameters:
                        7770 ;  None
                        7771 ;
                        7772 ;Returns:
                        7773 ;   BC - number of chars  read
                        7774 ;   HL - address of LINEBUFFER_
                        7775 ;   DE - VRAM address of  place cursor  is
                        7776 ;
    F779                7777 READ_FROMCURSOR _TOEOL:
    F779 2AFEAS         7778                 LO       HL,{CURSOR}
    F77C 3AFE7B         7779                 Lo       A.(X_MAX]
    F77F 3C             7780                 INC      A                ;Calc # chars to read
    F780 94             7781                 SUB      H
    F781 4F             7782                 Lo       CA
    F782 CDFT7FC        7783                 CALL     CONVERTXY
    F785 21FETE         7784                 LD       HL.LINEBUFFER_
    F788 0600           7785                 Lo       8,OOH
    F78A CS             7786                 PUSH     BC
    F78B ES             7787                 PUSH     HL
    F76C DS   :         7788                 PUSH     DE        |
    €78D CDFD1ID        7789                 CALL     READ_VRAM
    F790 D1             7790                 POP      DE
    F791.E1             7794                 POP      HL
    F792Ci              7792                 PoP      BC
    F793C9              7793                 RET
                        7795  ;
                        7796  ;Subroutine
                        7797  ; SCROLL_UP    -   Scrolls   the entire   window  up 1 line and  puts  a  line
                        7798  ;                  Of BLANKING  CHAR‘s    on the  last line
                        7799  ;
                        7800  ;   Caller   must  restore   cursor  to screen
                        7801  ;
    F794                7802  SCROLL_UP:
    F794 CDF7D7         7803                     CALL      PUT_OLD ON_SCREEN
    F797 2AFEAI         7804                     LO        HL,[UPPER _LEFT)
    F79A E5             7805                     PUSH      HL
    F798 CDFT7FC        7806                     CALL      CONVERTXY
    F79E E1             7807                     POP       HL
    F79F SAFESF         7808                     LO        A,(NUM LINES]
    FIA2 47             7809     |               LD        B.A
    F7A3 05     .       7810                     DEC       B
                        7811                   |
    F7A4 CS             7812  SCROLL_LOOP:       PUSH      BC                 ;Save number of  remaining    lines
    F7AS DS             7813                     PUSH      DE                 ;Save next write  location
    F7A6 2C             7814                     INC       L                  ;Poitntto next  line  below
    F7A7 ES             7815                  .  PUSH      HL
    F7A8 CDFT7FC        7816                     CALL      CONVERT_XY
    F7AB DS             7817                     PUSH      DE                 ;Save address  of this   read
    F7AC 3AFEAO         7818                     LO        A,[NUM COLUMNS ]
    FI7AF4F             7819                     LO        C,A
    F7BO 0600           7820                     LD        BOOH
    F7B2 CS             7821                     PUSH      BC                 ;Save number of  chars   in  line
    F7B3 21FE7E         7822                     LD        HL,LINEBUFFER_
    F786 COFDID         7823                     CALL      READ_VRAM
    F789 C1             7824                     PoP       BC                 -Get number of  bytes   that  were  read
    F7BA D1             7825                     POP       DE                 -Get address of  last   read
    F788 E1             7826                     PoP       HL                 ;Get X-Y coords
    F7BC E3             7827                     EX        {SP},HL            ;Swap prev read  address   with   X-Y  coords
    F7BO EB             7828                     EX        DE,HL              ;Swap last read  with   previous   address
    F7BE ES             7829                     PUSH      HL                 ;  and save previous
    FIBF 21FET7E        7830                     LD        HL,LINEBUFFER_
    F7C2 CDOFDIA        7831                     CALL      WRITE_VRAM         ;Write line one  line   up
    F7CS O1             7832                     PoP       DE                 ;Get address of  next   write
    F7C6 E1             7833                     PoP       HL                 ;Get starting  X-Y of   last  read
    F7C7 Ci             7834                     PoP       BC
    F7C8 1tODA          7835                     DJNZ      SCROLLtooP
                        7836
    F7CA CDF73C         7837                     CALL      BLANKS
    F7ICD21FET7E        7838                     LD        HL,LINEBUFFER_
    F7D0 3AFEAO         7839                     LD        A,(NUMCOLUMNS  ]
    F7D3 4F             7840                     LD        C,A                ;B is O from DUJUNZ
    F7D4 C3FDIA         7841                     JP        WRITEVRAM          ;Return thru WRITE VRAM
                         7843 ;
                         7844 ; Subroutines
                         7845 ; PUT_OLD  ON  SCREEN      - This  entry   point  puts the   char that the
                         7846 ;                            cursor   was  on back  onto  the  screen
                         7847 ;
                         7848 ; PUT_CHAR_ON   SCREEN    _  This  entry   point  will put   the char in A
                         7849 ;                            onto  the  screen  where  the   cursor currently    is
                         7850 ;
                         7851 ;
     F7D7                7852 PUT_OLD_ON_SCREEN:
     F7D7 3AFE79         7853                    LD         A,[OLDCHAR_}
                         7654
     FIDA                7855 PUT_CHAR_ON_ SCREEN:
     FIDA ES             7856                    PUSH       HL
     F7DB 2AFEAS         7857                    LD         HL,[CURSOR   }      ;Get location   to put  char
     FIDE COFTFC         7658                    CALL       CONVERT  XY         :Convert   to a VRAM address
     F7E1 21FE7E         7859                    LO         HL.LINEBUFFER_
     F7E4 77             7860                    LO         {Hi]},A
     F7ES 010001         7861                    LO         BC,OOO1H
     FIES COFDIA         7862                    CALL       WRITE  VRAM
     F7EB E1             7863                    POP        HL
     F7EC C9             7864                    RET
                        7866 ;
                        7867 ; Subroutine
                        7868 ; GET_CHAR_UNDER_CURSOR  -  This entry loads HL from CURSOR before
                        7869 ;                           falling into GET_CHAR_UNDER
                        7870 ;
                        7871 ; GET_CHAR_UNDER  -  Reads the char where the cursor will go
                        7872 ;                    and saves it in the variable OLDCHAR_
                        7873 ;
                        7874 ;Input Parameters:
                        7875 ;  WL - Cursor position
                        7876 ;
                        7877 ; Destroys - Hi, BC, DE, A
                        7878 ;
    F7ED                7879 GET_CHAR_UNDERCURSOR:
    F7ED 2AFEAS         7880                 LO      HL.[CURSOR}
                        7881
    F7FO                7882 GET_CHAR_UNDER:
    F7FO CDFT7FC        7883                 CALL    CONVERTXY
    F7F3 010001         7884                 LD      BC,OOO1H
    F7FG621FE79         7885                 LD      HL,OLOCHAR
    F7F9 C3FD1ID        7886                 JP      READVRAM        ;Return thru READ_VRAM
                      7888
                      7889;  Subroutine
                      7890
                      7891;  CONVERTXY   - Converts X-Y coordinates on the screen to a
                      7892                 VRAM address for that char position
                      7893                 Calculates (( Y * 32) + X ) + base of pattern name   table
                      7894                 to yield the absolute address in VRAM of the char
                      7895
                      7896  Input Parameters:
                      7897    H - X coord
                      7898    tl- ¥ coord
                      7899
                      7900 ;Returns:
                      7901 ;  OE - VRAM address
                      7902 :  HL - Address of Pattern Name Table (side effect)                                      .
                      7903 ;: No Others are altered                                                                                                   ‘
                      7904 ;
    FTEC              7905 CONVERTXY:
    F7FC SC           7906                 LD      E,H             ;Save X coord
    F7FD 2600         7907                 LD      H,OOH
    FT7FF29         - 7908                 ADD     HL,HE            -CalcY coord * 32
    F800 29           7309                 ADD     HL,HE
    F8O1 29           7910                 ADD     HL,HL
    F802 29           7911                 ADO     HL,HL
    F803 29           7912                 ADD     HL,HE
    F804 1600         7913                 LD      D,OOH
    FBO6 19           7914                 ADD     Hi,DE            ;Addin X coord
    F807 EDSBFEAS     7915                 LD      DE,(PTRN_NAME_TBL})
    F8OB 19           7916                 ADD     HL,DE
    FBOC EB           7917                 EX      DE,HL
    FBOD C9           7918                 RET
                      7920 ;
                      7921 ; This is a table of chars that perform some function rather
                      7922 ; than being printed out to the screen as is.  There is a
                      7923 ; jump table that is asscociated with this table, but NOTE that
                      7924 ; it has its entrys in reverse order of this table.  It would
                      7925 ; be best to add to the end of this table and to the beginning
                      7926 ; of the jump table.
                      7927 ;
    FOE               7928 SPECIAL_CHARS:
    F8OE 08           7929                 DEFB    BS
    FBOF OD           7930                 DEFB    CR
    F810 OA           7931                 OEFBsLLF
    F811 OC           7932                 DEFB  ssFF
    F812 80           7933                 DEFB    HOME
    F813 16           7934                 DEFB
    F814 18           7935                 DEFB    CLRTO EOS
    F815 1C           7936                 DEFB  § GOTO_XY_CHAR
    F816 AO           7937                 DEFB    sup
    FR17 A2           7938                 DEFB  § DOWN
    F818 A3           7939                 DEFB =  LEFT
    FR19 Al           7940                 DEFB    RIGHT
                      7941
             <OOOC>   7942 NUM_SPCL_CHARS  €EQU    $-SPECIAL_CHARS
                      7943
                         7945 ;
                         7946 :NOTE  -  This  table is  in the reverse   order of the chars so
                         7947 ;         any  additions  to the end  of  the chars goes at the top
                         7948 ;         of this  table
                         7949 ;
    FOIA                 7950 SPCL_VECTOR_TBL:
    FOIA FESE            7951                    DEFW     MOVERIGHT
    F81ICFEBS            7952                    DEFW     MOVELEFT
    FEIE FEB3            79583                   DEFW     MOVEDOWN
    F820 F673            7954                    DEFW     MOVEUP
    F822 F710            7955                    DEFW     GOTOXY
    F824 FEF2            7956                    DEFW     ERASETO_EOS
    F826 FGEEC           7957                    DEFW     ERASETO  EOL
    FB28 FEES            7958                    DEFW     MOVEHOME
    FR2A FED4            7959     -              DEFW     FORMFEED
    FB2C F683            7960                    DEFW     MOVEDOWN
    FE2E F664            7961                    DEFW     RETURN
    F830 F6BS            7962                    DEFW     MOVELEFT
                         7363
                         7964 ;
                         7965 ;    CODE  FROM  HERE TO  END OF CONS OUT   WAS INSERTED AFTER THE
                         7966 ;    REV.  O6  ROM WAS BURNED  AND  HAS  BEEN COMMENTED OUT TO MAINTAIN
                         7967 ;    COMPATIBILITY   WITH  THAT ROM.
                         7968 ;
                         7969 ;                  END
                         7970 ;   SKIP
                         7971 3;
                         7972 ;;  RETURN_CURSOR    -   Will return   the current cursor position
                         7973 ;;                       to the caller.    It is in absolute screen
                         7974 ;;                     - coordinates   (0 based).
                         7978 3;
                         7976  ;:;:InputParameters:
                       . 7977 ;;   None
                         7978  ;;
                        7979   ;;Returns:
                         7980  :;  ODO- X coord  of cursor,  absolute   based on upper left of screen   not window
                         7981  ;:; E  - Y¥coord  of cursor
                         7982  ;::
                         7983  ;                 ;GLB      RETURN_CURSOR
                         7984  ;RETURN_CURSOR:
                         7985  ;                  LOD      DE [CURSOR  }
                         7986  ;                  RET
                         7987  ;  SKIP
                         7988  :;
                         7989  ;; RETURN  RELATIVE  CURSOR   - Returns   the current cursor position   relative
                         7990  ;;                               to the  window.  0,0 wil! be returned   for the
                         7991  ;;                              upper    leftcorner of the window.
                         7992  :;
                         7993  ;;Input  Parameters:
                         7994  ;;  NONE
                         7995  ;;
                         7996  ;;Returns:
                         7997  ;;   D   -  xX cursor position   relative  to window
                         7998  ;;   E—E -   Y¥cussor position   relative  to window
                         7999  ;;
                         8000  ;;   Destroys   A
                       8002  ;
                       8003  ;               ;GLB     RETURN_RELATIVECURSOR
                       8004  ;
                       8005  ;RETURN_RELATIVECURSOR:
                       8006  ;                LD      DE,{CURSOR}     ;get  absolute  position
                       8007  ;                LD      a,(X_MIN]
                       8008  ;                NEG
                       8009  ;                ADO     A.O
                       8010  ;                LD      D,A
                       BO11  ;                LD      a.{YMIN]
                       8012  ;                NEG
                       8013  ;                ADD     A.E
                       8014  ;                LO      EA
                       8015S ;                RET
                       8016  ;;
                       BO1I7 5;Ses ewweweweseseer sees SSHSSTSSTSessesesssessssesessesersssssssse
                       BOIG  5Ssesseewwezesatressessss erasessssssssssessssssssssrssesssssserssse
                       BO1I9 5 essesewaneweesesesessseessesrssessesrrsssssssssssssssssssrssssssse
                       8020  ;;
                       8021
                         8023  NAME “Rev O7 - rfj~*
                         8024
                         8025 DeEOS START  MACRO                 ;Header Rev. 4
                         8026                 .GOTO Ede EOS  START
                         8027
                         8028  Project:      EOS, 83-101
                         8029
                         8030  jekts                                 j&kos
                         8031  pemets                                pSkos
                         8032  pSkts   EOSSTART              DLS     pSkOs
                         8033  pokts                                 jokos
                         8034  ;,6ki1S                               ;&kOS
                         8035
                         8036        Rev History
                         8037        Rev.  Date          Name        Change
                         8038         T    24oct1951     rf j        Changed value for REV_NUM to 06
                         8039         6    13oct1045a    RPD         added init of REV_NUM
                         8040         5    toct100Sa     RPD         took out memory bank switch logic for GOTO wP
                         8041         4    25septi000a   RPD         reworked for new boot from tape logic
                         8042         3    24septiiiOa   RPD         moved clear ram logic
                         8043         2    23septi2S55p  RPD         moved FCB’s and added cal!isA_u0S routines
                         8044         1    O3SEP1445     OLS         MORE CODE
                         8045         Oo   O2SEP0630     OLS         CODE
                         8046
                         8047 Ede_EOS_START  MEND
                      8049 SSHEHESSHEHSSEHSSSHEHESKEHEEKEESSEESHEHAESESEHSESEHHEKEEEREEEEEEHEEEE
                      8050                                                                 %
                      8051    MODULE NAME;                                                 *
                      8052                                                                 *
                      8053      EOS START                                                  *
                      8054                                                                 ®
                      8055    INPUTS:                                                      S
                      8056                                                                 *
                      8057      NONE                                                        *
                      8058                                                                  *
                      8059    FUNCTION(S):                                                  +
                      8060        . SET STACK.                                              e
                      8061          TO BANK SELECT OS7 AND 24K RAN.                         +
                      8062        . CALL INIT_EOS TO ALLOW THE 1) THE Z280/6801SYNCH_UP,    *
                      8063          POLL FOR NET DEVICES AND ESTABLISH DCB’S.               *
                      8064        . CHECK FOR THE PRESENCE OF A TAPE. IF PRESENT THEN       +
                      8065          LOAD IN A COLDSTART_LOADER  AND EXECUTE FROM THERE.     *
                      8066          IF NO TAPE, THEN BRING UP THE ROM RESIDENT WORD        %
                      8067          PROCESSOR BY JUMPING TO OS7.                           *
                      8068                                                                  ¢
                      8069    OUTPUTS:                                                     .
                      8070                                                                 s
                      8071       DEVICE ADDR REG   B                                       +
                      8072                                                                 s
                      8073    CALLS:                                                       &
                      8074                                                                 *
                      8075      EOSINIT                                                    &
                      8076      EOSQUERY DEVICE                                            *
                      8077      EOSREAD BLOCK                                              *
                      6078                                                                 e
                      8079    CALLED BY:                                                   *
                      8060                                                                 ®
                      8081      INVOKED BY EOSBOOT                                         e
                      8082                                                                 ¢
                      8083    NOTES:                                                       s
                      8084                                                                 ©
                      8085      NONE.                                                      cd
                      8086                                                                 s
                      80867SHSSHSSSSSESSSESESSSSESESSESSSESSEKSEKSESSSSSHSSESESHSESEEHEKEEESEHE
                              oe  @8 @ & HHHHOeHeeneeeeee#ee#eneneee#tee#ee#reere#e#ete        ee@
                      8090 ;
                      8091 ; external routines used
                      8092 ;
                      8093               7EXT     __FIND_DCB
                      8094               sEXT     _REQUEST STATUS
                      8095               sEXT     __HARD_INIT
                      8096               ;EXT     __RD_1_BLOCK
                      8097               sEXT    —__FMGR_INIT
                      8098               :EXT     _GOTOwP
                      8039               sEXT     FILLVRAM
                      8100               ;EXT     JURN_OFF_SOUND
                      8101               sEXT     SWITCHMEM
                      8102               7EXT     PORTCOLLECTION
                      8103 ;
                      8104 ; external data structures used
                      8105 ;
                      8106               sEXT     REVNUM
                    - 8107                EXT     CLEAR RAMSTART
                      8108   |           ,EXT     CLEAR_RAM_SIZE
                      8109                EXT     EOSSTACK
                      8110               sEXT     DEFAULTBT _DEV
                      8112               ;EXT     MEM_CNFGO3
                      8113 ;
                      8114 ; local equates
                      8115 ;
             <QO00S>  68116EOSREV         EQU     00SH         ;current  EOS revision number
                      8117                                     ;---NOTE---    this is actually  rev.
                      8118                                     :06  but to match the production  ROM
                      8119                                     swhich  was labeled rev. 05  we fudge
                      8120                                     ;just  a bit (two bits actually)
                      6121
             <C800>   8122 COLDSTART_ADDR  EQU    OC8OOH
             <0004>   8123 OSK4           EQU     4
             <0005>   8124 DSK5           EQU     5
             <0001>   8125 ONE_SLOCK      EQU     1
             <O000>   8126 BLOCKZERO      EQU     0
                      6127
                               8129                     ;GLB      __EOS START
         F832                  8130    EOS  START:
         F832  31FESS8         8131                      LD       SP,EOS STACK                    ;  SET THE  STACK
                               8132
         F835  010147          8133                      LD       BC,CLEAR_RAM_SIZE               ;  Clear  EOS ram
         Fe38  11F061          8134                      LD       DE .CLEAR_RAM_START+1
         F838  21FD60          8135                     LD        HL,CLEAR  RAM START
         FQ3E  AF              8136                     XOR       A
         FE3F  77              8137                     LO        {HL],A
         F840  EDBO            8138                     LDOIR
                               8139
         F842  3E0S            8140                     LD        A,EOS REV                       ;  init  REV_NUM
         F844  32FD60          8141                     LD        [REV_NUM],A
                               8142
         F847  COFDI1          8143                     CALL      PORTCOLLECTION                  ;  collect  the  port  addresses    from OS7
                               8144
         F84A  CDOFDS3         8145                     CALL      TURN_OFF_ SOUND                 ; KILt   SOUNDS
                               8146
         FB4D  3E00            6147                     LD        A.O                             ; CLEAR   VRAM
         F84F  210000          8148                     LD        HL,O
         F852  114000          8149                   . tO        DE,16*1024
         F855  CDFD26          8150                     CALL      FILLVRAM
                               8151
         FESS  3AFCIS          8152                     LD        A,[MEM CNFGO1])                 ;get  the  data  for configuration     1 (64K  RAM)
         F8SB  CDFD14          8153                     CALL      SWITCH_MEM                      ;select   this configuration
                               8154  ;
                               8155  ;   EOSINIT   WILL   PERFORM  THE 6801/280    SYNCH  _UP,    PERFORM   A ROLL CALL
                               8156  ;   POLL  ON THE  NET,   AND ESTABLISH  THE   DCB’‘S
                               8157  ;
         FESE  CDOFSFE6        8158                     CALL      __HARD_INIT
                               8159  ;
                               8160  ;   setup  the FCB’‘s
                               8161  ;
         F861  110400          8162                     LD        DE,THREE 1KBLKS                 ; START   ADDRESS  OF  THREE   1tK BLOCKS
         FB64  210390          8163                     LD        HL,FCBS                         ; START   AODRESS  OF  3  FCB  BLOCKS
         F867  COEEEA          8164                     CALL                                      ; TELL  THE  FILE  MANAGER
                        8166  ;
                        8167  ;    CHECK FOR  BOOT   LOADER IN ANY MASS   STORAGE   DEVICE
                        8168  ;
    F86GA3E€08          8169                  LO        A,TAPE_ID                   ;set the  default boot  device  to tape
    F86C 32FD6F         8170                  LD        (DEFAULTBT_DEV).A
                        8171
    F86F 3E04           8172                  LD        A,DSK4                      ;check  for DISK 4 device  active
    F871 COF473         8173                  CALL      __REQUESTSTATUS
    F874 2010           8174                  JR        NZ,CHK_D5
                        8175
    F876 3E04           8176                  LD        A,DOSK4
    F878 COF446         8177                  CALL      __FIND_DCB
    F878 FOTE14         8178                  LO        A,({I¥#DSTATUS FLAGS}
    FE7E EGOF           8179                  AND       OFH
    FB8O FEO3           8180                  cP        3
    F882 3E04        -  8161                  LD        A,OSK4
    F884 3842           8182                  JR        C,DEV1OK
          :             8183
    F886 3EOS           8184  CHK_DS:         LD        A,DSKS                      ;check  for DISK 5 device  active
    F888 CDF473         8185                  CALL      __REQUESTSTATUS                                            ;
    F88B 2010           8186                  JR        NZ,CHKTAPE
                        8187
    F88D 3E05           8188                  LD        A,OSKS
    FESF COF446         8189                  CALL      __FINO_DCB
    F892 FOTE14         8190                  LO        A,(I¥+D_STATUS FLAGS]
    F895 EGOF           8191                  AND       OFH
    F897 FEOS3          8192                  cP        3
    F899 3E05S          8193                  LD        A,OSKS
    F898 3828           8194          |       JR        C,DEV1_OK
    F89D                8195  CHK_TAPE:
    F89D 3E08           8196                  LD        A,TAPE_ID                   ;check  if TAPE device  active
    FE9F COF473         8197     |            CALL      __REQUEST_STATUS
    F@A2 201E           8198                  JR        NZ,CALL_WP
                        8199
    FBA4 3E08           8200                  LD        A,TAPE_ID
    FRAG COF446         8201                  CALL      __FIND_OCB
    FEAS FD7E14         8202                  LD        A,{I¥+D_STATUS  FLAGS]
    FBAC FS             8203                  PUSH      AF
    FBAD EGOF           8204                  AND       OFH
    FBAF FEO3           8205                  cP        3
    FBB1 3812           8206                  JR        C ,DEVO_OK
                        6207
    F6B3 F1             8208                  PoP       AF
    FBB4 CB3F           8209                  SRL       a
    F8B6 CB3F           8210                  SRL       A
    FBBS CB3F           8211                  SRL       A
    FBBA CB3F           8212                  SRL       a
    F8BC FEO3           8213                  cP        3
    FBBE 3E18           8214                  LD        A,TAPE_ID+10H
    F8CO 3806           8215                  UR        C,DEVOK
    FEC2               8217 CALL_WP:                                           ;Gevices disk 4,  5 and tape are not  active
                       8218 ;                LO      A,[MEMCNFGO3}             ;get the data for  configuration 3  (8K 0S7  and   56K  RAM)
                       8219 ;                CALL    SWITCHMEM                 :select this configuration
    FE8C2C3FCE7        8220                  JP      _GOTO_WP                  ;default to ALPHA
    Facs               8221 DEVOOK:
    FSCS Fi            8222                  POP     AF
    FEC6 3EO8          8223                  LD      A,TAPE_ID
    F8Cs               8224 DEV1OK:
    FEC8 32FO6F        8225                  LO      [DEFAULTBT _DEV),A
    F8CcB              8226 READ_AGAIN:
    F8CB 21C800        8227                  LD      Hi,COLDSTART  ADDR
    F8CE 010000        8228                  LD      BC,O
    FBD1 3AFOGF        8229                  LO      A,(DEFAULTBT  DEV]
    F8D4 110000        8230                  LD      DE,BLOCK_ZERO
    F8D7 COFASE        8231                  CALL    __RD_1_BLOCK
    F8DA CAFSEF        8232                  JP      Z,GO_TO_TAPECODE
    F800 4F            8233                  LO      CA
    FEDE 3AFDG6F       8234                  LD      A,{DEFAULT_BT_DEV}
    FRE1 E6GOF         8235                  AND     OFH
    FEE3 FEOB          8236                  cP      TAPE_ID
    FEES 20€4          6237  |               JR      NZ,READAGAIN
    F8E7 79            8238                  LD      A.C
    FEES FES8B         8239                  cP      TIMEOUT
    FREA 28D0F         6240                  JR      Z,READ_AGAIN
    FBEC C3F8C2        6241                  JP      CALL_WP
    FSEF               8242 GO_TO_TAPECODE:
                       8243
    FSEF 3AFOGF        8244                  LD      A,(DEFAULTBT  DEV]
    FBF2 47            8245                  LO      B.A
    FEF3 C3C800        8246                  JP      COLD_START_ADDOR
                       8247 ;
                       8248 SESS  STS SSSSTSS SSSssssSssrsrssessssssssrsssssssssesessesrseserssszs
                       8249 ,SSP SSSHSSSSSSSSSS  SSTSSSSSSSSSSSSSS SSSSSS SSSSSSSTseSsrssssssssssss==
                       8250 SSSSSASRSSSSSSSSSSSSSSSST SSSSSSSSTSSSSS SSS SSSSSSSSSSSSSTSSSS SSsesae
                       8251 ;
                       8252
                                  8254    ;
                                  8255    ;         Rev    History
                                  8256    ;         Rev.      Date               Name           Change
                                  8257    ;           3       Soctii35a          RPD            WP  equate     changed     to   100H
                                  8258    ;           2   .   2oct155p           RPD            added     initialization       of   reserved      byte    at  OFFFFH        to  O
                                  8260    ;           oO      aug/sept           VB             original
                                  8261    ;
                                  8262
                                  8263    ;  ENTRY:              __HARD_INIT
                                  8264    ;  NEEDS:              NOTHING
                                  8265    ;  RETURNS:            DEFAULT     PCB   ADDRESS     SET  UP   FOR   USE   ([CURRENT     PCB]     =  PCB)
                                  8266    ;                      HARD   RESET    APPLIED     TO   NETWORK
                                  8267    ;                      NETWORK     MASTER    NODE    IN  SYNC   WITH    280
                                  8268    ;                       1 OCB   ALLOTTED      FOR  EACH   DEVICE     ANSWERING      A  STATUS     REQUEST
                                  8269    ;                       CORRECTLY
                                  8270    ;                      MASTER    NODE    SCANNING     EACH   OF   THESE    DCB’S    FOR   WORK    TO  DO
                                  8271
                                  8272             ;GLB          __HARD_INIT
                                  8273
                                  8274             >EXT          CURRENT   PCB
                                  8275             sEXT          PCB
                                  8276
     _FBFE                        8277    _HARD_INIT                             ‘
      FEFE    CS                  8278              PUSH         BC                                  ; SAVE    BC
      F8F7    DS                  8279              PUSH         DE                                 :          DE
      FEFS    ES.                 8260              PUSH         HL                                 :          HL
      FSFOS   FOES                8281              PUSH         ly                                 ;          LY
                                  8282
      F8FB    21FECO              8283              LD           HL ,.PCB                           ;  INIT    OUR   IDEA   OF   CURRENT    PCB
      FSFE    22FD70              8284              LD           {CURRENT    PCB]   .HL             :
                                  8285
      F901   COF94B               8286              CALL         __HARD_RESET_NET                   ;  HARD    RESET    NETWORK
                                  8287
      F904    CDFSSF              8288              CALL         __DLY_AFT_HRD_RES                  ;  GOOD    DELAY    AFTER    HARD
                                  8289                                                              ;   NET    RESET
                                  8290
      F907    21FECO              8291              LD           HL ,PCB                            ;  ZERO    OUT   PCB/DCB’‘S
      FOOA    11FEC1              8292              LD           DE ,PCBti                          ;
                                  8293    ;         LD           BC,P_SIZE+(15*D       SIZE)-1      ;
      F90D    01013F              8294              LD           BC ,P_SIZE+(15*D      SIZE)        ; this   byte    count    will   zero    out   PCB,    OCB’s      and    the    reserved        byte
      F910    3600                8295              LD           {Hi},0                             ;
      F912    EDBO          _     8296              LOIR                                            ;
                                  8297
      F914                        8298    REPEAT   SYNC1:
      F914    CDF970              8299              CALL         __SYNC
      F917    20FB                8300              JR           NZ,REPEAT_SYNCt
                                  8301
      F919    CDF9SCB             8302              CALL         __SCAN_ACTIVE                         FIND   ALL    THE  ACTIVE     DEVICES     ON   THE   NET
                                  8303
      F91C    FDE1                8304              POP          ly                                 ;  RESTORE     IY
      FOIE    E1                  8305              POP          HL                                 ;              HL
      FOIF    D1                  8306              PoP          DE                                 :              DE
      F920    Ci                  8307              PoP          BC                                 ;              BC
                                  8308
      F921    C9                  8309              RET
                                  8310
           i            \                                                                                 \                      {                      \             4                          4            q
                        8312
                        8313 ; ENTRY:         __SOFT_INIT
                        8314 ; NEEDS:         HL = PCB ADDRESS  SET UP FOR USE
                        8315 ; RETURNS:       {CURRENTPCB]  = HL
                        8316 ;                HARD RESET APPLIED  TO NETWORK
                        8317 ;                NETWORK MASTER NODE  IN SYNC WITH Z80         |
                        8318 ;                1 DCB ALLOTTED FOR  EACH DEVICE ANSWERING A STATUS REQUEST
                        8319 ;                 CORRECTLY
                        8320 ;                MASTER NODE SCANNING  EACH OF THESE DOCB’SFOR WORK TO  DO
                        8321
                        8322        :GLB      __SOFT_INIT
                        8323
    F922                8324 SOFT_INIT
    F922  C5            8325         PUSH     BC                       - SAVE BC
    F923  DS            8326         PUSH     DE                       ;      DE
    F924  E5            8327         PUSH     HL                       :      HL
    F925  FDES          8328         PUSH     ly                       ;      ly
                        8329
    F927  22FD70        8330         LO       {CURRENTPCB] ,HL         ; ESTABLISH CURRENTPCB  ADDR
                        8331
    F92A  CDF94B        8332         CALL     __HARD_RESET_NET         ; HARD RESET NETWORK
   |                    8333
    F92D  COF9SF        8334         CALL     __DLY_AFT_HRD_RES
                        8335
    F930  2AFD70        8336         LD       HL,[CURRENTPCB]          : ZERO OUT PCB/OCB’‘S
    F933  5D            8337         LD       E,L
    F934  54            8338         LD       D.H
    F935  13            8339         INC      DE
    F936  01013E        8340         LO       BC,P_SIZE+(15*DSIZE)-1   ;
    F939  3600          8341         LD       {Ht}.0                   :
    F938  EDBO          8342         LDIR                              .
                        8343
    F93D                6344 REPEAT _SYNC2:
    F93D  COF970        8345         CALL     __SYNC
    F940  20FB          8346         JR       NZ.REPEAT SYNC2
                        8347
    F942  COF9CB        8348         CALL     __SCAN_ACTIVE              FIND ALL THE ACTIVE DEVICES  ON  THE  NET
                        8349                                                                  |
    F945  FDE1          8350         PoP      ly                       ; RESTORE IY
    F947  E1            8351         Pop      HL                       .         HL
    F948  D1            8352         Pop      DE                       :         DE
    FO49  Ct            8353         PoP      BC                       :         BC
                        8354
    F94A  CO            8355         RET
                        8356
                       8358
                       8359  :;ENTRY:       __HARDRESET_NET
                       8360  ; NEEDS:       NOTHING
                       8361  ; RETURNS:     HARD RESET APPLIED    TO NETWORK
                       8362
             <QO000>   8363  NETDELAY COUNT  EQU     oO
                       8364
                       8365        ;GLB     __HARD_RESET_NET
                       8366
    F94B               8367   HARD RESET NET:
                       8368        sEXT     NETRESET PORT
    F948 3AFC28        8369         LO      A,(NERESET PORT]
    FO4E 4F            8370         LO      C,A
    FO4F 3EOF          8371         LD      A,OFH                       ; RESET NETWORK
    F951 EDT79         8372         OUT     {C].A
                       8373
    F953 3E00          8374         LO      A,NETDELAY COUNT            ; DELAY (*«**¢+PROBABLY   TOO  LONG)
                       8375
    F955               8376  NET_RESDELAY:
    F958 OO            8377         NOP
    F956 00            8378         NOP
    F987 OO            8379         NOP
    F956 30            8380         DEC     A
    F959 20FA          8381         JR      NZ,NET_RESDELAY
                       8382
    F958 AF            8383         XOR       A                        ;  HELLLLLLLOOOOOO  NETWORK  .....
    F9SC E079          83864        OuT      [C].a
                       6385
    FOOSEC9            6386         RET
                       8387
                       8389
                       8390        ;GLB     __DLY_AFT_HRD_RES
                       8391
    FOSF               8392               RES:
    FOS5F CS           8393         PUSH    BC
    F960  05           8394         PUSH    DE
                       8395
    F961  0601         8396         LD        |
                       8397
    F963               6398 LOOPS:
    F963  110001       8399         LD      DE,OOO1H
                       8400
    F966               8401 LOOP7:
    F966  18           8402         DEC     DE
    F967  7A           8403         LO      A.D
    F968  B83          8404         OR      E
    F969  20FB         8405         JR      NZ,LOOP7
                       6406
    F968  10F6         8407         OJUNZ   Loors
                       8408
    F960  D1           8409         POP     DE
    FOGE  C1           8410         POP     BC
                       8411
    FOGF  C9           8412         RET
                       6413
                      8415
                      8416  ; ENTRY:           __SYNC
                      8417  ; NEEDS:           (CURRENTPCB)   SET  TO  ADDRESS OF CURRENTLY  OPERATING   PCB
                      8418  ; RETURNS:         NETWORK MASTER  NODE   IN SYNC WITH Z80
                      8419  ;                  NUMBER OF DCB’S   = O  (SO MASTER NODE IS  NOT SCANNING
                      8420  ;                   ANY DCB’S -  SO  A __SCAN ACTIVE  NEEDS TO  BE DONE
                      8421  ;                   TO ESTABLISH  DCB’S)
                      8422
             <O0000>  8423  SYNC_DELAY_DE    EQU  0
             <O002>   6424  SYNC DELAY  _B   €EQU 2
                      8425
                      8426         ;GLB        __SYNC
                      8427
    F970              8428  __SYNC
    F970 FDES         8429          PUSH       lV                         ; SAVE TY
    F972 ES           8430          PUSH   =   HL                         :      HL
    F973 C5           8431          PUSH       BC
    F974 05S          8432          PUSH       DE
                      8433
    F975 FO2AFO70     8434          LD         Ty,[CURRENT_PCB]           ; CURRENT PCB
                      8435
    F979 FO360300     8436          LD         (1¥+P_NuM_0DCBS].0         ; O 0CB’S
                      8437
    F970 FD360001     8438          LD         (lvy+P_COSTAT],PCB_SYNC1           ; START  SYNC WITH   FIRST
                      8439                                                        ;  BYTE
                      8440
    F981 110000       8441          LO         DE,SYNC_DELAY_DE
    F984 0602         8442          LD         B,SYNC_DELAY_B
                      8443
    F966              6444  LOOP1:
    F986 1B           8445          DEC        DE
    FO87 TA           8446          LO         A.D
    F988 B3           8447          OR         E
    F989 200A         8448          JR         NZ,NOTTIME 1
                      8449
    F98B 110000       8450          to         DE,SYNC_DELAY_DE
                      8451
    F98E 1005         8452          DUNZ       NOT_TIME1
                      8453
    F990 3E12         8454          LD         A,CANT_SYNC1
    F992 B7           8455          OR         &                         ; ERROR
                      8456
    F993 18630        8457          JR         END_SYNC
                      8458
    F995              8459  NOT_TIME!:
    F995 FD7EOO       8460          LD         A,{I¥+P_COMSTAT}             ; DID MASTER  NODE ACKNOWLEDGE     ?
    F998 FEB1         8461          cP         PCB_SYNC1_ACK
    FQ9A 20EA         8462          JR         NZ,LOOP1                   ; ****6 NEED PROTECTION   HERE
                      8463
    F99C FD360002     8464          LD         {Iy¥+P_COSTAT],PCB_SYNC2           ; CONTINUE  SYNC  WITH
                      8465                                                        .  SECOND  BYTE
                      8466
    F9A0 110000       8467          LD         DE,SYNC_DELAY_DE
    F9A3 0602         8468          LD         B,.SYNDELAY  6
                      8469
    F9OA5             8470  LOOP2:
    F9A5 16           8471          DEC        DE
    FOAG 7A             8472         LO      A.O
    FSA7 B3             8473         OR
   ~F9AB 200A           8474         JR      NZ,NOT_TIME2
                        8475
    F9AA 110000         8476         LO      DE,SYNC_DELAYDE
                        8477
    F9AD 1005           8478         OUNZ    NOTTIME2
                        8479
    FSAF 3E13           8480         LD      A,CANTSYNC2
    F981 87             8481         OR      A                        ; ERROR
                        8482
    FO9B21811           84863        JR      ENDSYNC
                        8484
    F9B4                8485  NOTTIME2:
    F9B4 FDO7EOO        8486         LD      A,{1Y+P_COMSTAT)            ; DID MASTER NODE ACKNOWLEDGE  ?
    F9B7 FEB2           8487         CP      PCB_SYNC2_ACK
    F9BS 20EA           8488         JR      NZ,LOOP2                  ; **#¢6eNEED PROTECTION HERE              ~
                        8489
    F9BB FDES           84390        PUSH    ly                        ; GET PCB ADDR INTO HL
    FSBO E1             8491         POP     HL
                        8492  -                                                        |
    FO9BEFD7501         8493         LD      [1¥+P_REL_ADOR_10),L      ; IN CASE SOMEONE ACCIDENTALLY  DOES
    F9C1 FO7402         B494         LD      {1¥+P_REL_ADDR_HI),H      ;  A&PCB RELOCATION COMMAND  -
                        8495               .                           ;  IT WILL RELOCATE TO THIS  SPOT
    8496 AF             8497         XOR     A                         ; NO ERROR
                        6498
    FSCS                8499  ENDSYNC:
    FSCS Di             8500         POP     DE
    F9OCECi             6501         POP —   BC
    FOC7 E1             8502         PoP     HL                        ; RESTORE HL
    F9CS FDE1           8503         POP     IY                        ;         IY
                        8504
    FECA C9             6505         RET
                        8506
                       8508
                       8509   ; ENTRY:         __SCAN_ACTIVE
                       8510   ; NEEDS:         [CURRENTPCB]   SET  TO CURRENTLY OPERATING PCB
                       8511   ; RETURNS:       1 OCB ALLOTTED  FOR  EACH DEVICE ANSWERING A STATUS  REQUEST
                       8512   ;                 CORRECTLY
                       6513   ;                MASTER NODE  SCANNING  EACH OF THESE DCB’S FOR WORK  TO DO
                       e514
                       8515          ;GLB      __SCAN_ACTIVE
                       8516
    FOCB                8517   SCAN  _ACTIVE
    FOCB C5            e518           PUSH  =  BC                        ; SAVE BC
    FSCC 05            8519           PUSH     DE                        ;      DE
    FOCD ES             8520          PUSH  =  HL                        :      Ht
    FOCE FDES          8521           PUSH     IY                               ry
    F9D0 DDES          8522           PUSH     IX                        ;      IX
                       8523
    F9D2 2AFD70        8524           LO       HL,[CURRENT PCB}          ; ZERO OUT DCB‘S
    F9D5 110004        8525           LO       DE.P_SIZE                 ; POINT TO DCB’S
    FOD8 19            8526           ADD      HL,DE
    F9D9 5D            8527           LO       E.t                       ; WANT DE = [CURRENTPCB]+P  SIZE+t1
    FODA 54            8528           LO       O,H
    F908 13            8529           INC      OE
    FODC 010134        8530           LD       BC,(15*DSIZE)-1
    FODF 3600          8531           LD       [HL}.0
    F9E1 EDBO          8532           LDIR
                       8533                                                     .
    F9E3 FD2AFD70      8534           LO       IY,[CURRENT PCB}          ; FIND START ADOR OF DCB’S
    F9E7 110004        8535           Lo       DE.P_SIZE
    FOEA FO19           8536          ADD      IY,DE                     ;
          )            8537
    FQEC DD2AFD70      ~=_:«8538      Lo       IX,[CURRENT PCB]          ; IX = [CURRENTPCB]
    F9FO DD360301       8539          LD       [1x+P_NUMDCBS],   1       ; NEED AT LEAST 1 ACTIVE  OCB
                       8540                                              ;  TO START CHECKING
                       8541
    FOF4 3E01          8542           LD       At                        ; START WITH DEV ADOR  1
                       8543
    FOF6               8544   LOOP3:                          .
    FOF6 FS            8545           PUSH  =  AF                        ;,SAVE CURRENT DEVICE ADDR
                       8546
    FOF7 FO7710        8547           LD       [1¥+D_DEV_ADDR},A           SELECT A NEW ADDRESS
                       8548                                                              |
    FOFA FD360001      8549           LD       [1¥+D_COM STAT},DCB_STATUS        ; ISSUE A REQUEST  FOR  STATUS
                       8550
    FOFE               8551   LOOP:
    FOFE FOCBOO7E      8552           BIT      CMNOCOMPLETE  BIT,  [1Y+D_COMSTAT]        ; 10 DONE  ?
    FAO2 28FA           8553          JR       Z,L00P4                                   ; #9ee8  NEED PROTECTION   HERE
                        8554
    FAaO4FD7E00         6555          LD       A,[1¥+D_COM STAT]         ; CHECK IF VALID RESPONSE
    FAO7 FE8O           8556          cP       CMND_FINSTATUS
    FAO9 2808           8557          JR       Z,RECVDVALID  STAT        ; YES INDEED
                        8558
    FAOB F1             8559          POP      AF                          TRY NEXT DEVICE ADDR
                        8560
    FAOC 3C             8561          INC      A
    FAOD FE10           8562          cP       MAXDEV ADDR+1             ; PAST LAST VALIO ADDR ?
    FAOF 20E5           8563          UR       NZ,LOOP3                  ; NOPE - NEW ADOR
                        8564
    FA11 DO3503        8565         DEC       {IX+P_NUM_DCBS])           ; DON’T NEED LAST  DCB  WE  USED
                       8566
    FA14 1811          8567         JR        END_SA                     ; ALL DONE
                       8568
    FA16               8569  RECVDVALID  STAT:
    FA16 DD3403        8570         INC       [1X+P_NUM_DCBS)            ;
                       8571
    FAIS 110015        8572         LD       DE .DSIZE                   ; ADVANCE TO NEXT  DCB
    FAIC FDI9          8573         ADD       TY,DE                      :
                       8574                               .
    FAIE F1            8575         POP       AF                         ; ADVANCE TO NEXT  NET  ADDR
                       8576
    FAIF 3C            8577         INC       A                          :
    FA20 FE10O         8578         cP       MAX _DEV_ADDR+1             ; NO MORE ?
    FA22 2002          8579         JR       NZ, LOOPS                   ; MORE TO CHECK
                       8580
    FA24 0D3503        6581         DEC       {I1xX+P_NUM_DCBS]          ; DON’T NEED LAST  DCB  WE  USED
                       8582
    FA27               8S83  ENDS A:
    FA27 ODE1          8584         POP.      IX                         ; RESTORE Ix
    FA29 FDE1          8585         PoP    -~—sCmiéi'Y                   :         ly
    FA2B E1            8586         POP      HL                          ;         Hi
    FA2C D1            8587         PoP      DE                          :         DE
    FA2D Ci            8588         POP      BC                                    BC
                       8589
    FA2E C9            8590         RET
                       6S91
                        8593
                        8594  ; ENTRY:          __RELOC_PCB
                        8595  > NEEDS:          (CURRENT PCB] SET  TO CURRENTLY OPERATING PCB
                        8596                    HL = ADORESS OF WHERE  PCB SHOULD BE RELOCATED  TO
                        8597  ; RETURNS:        PCB RELOCATED AS  REQUESTED
                        8598                    [CURRENTPCB]  UPDATED  TO REFLECT NEW ADDRESS
                        8599
                        8600         ;GLB       __RELOC_PCB
                        8601
    FA2F                8602  __RELOC PCB
    FA2F  FDES5         8603          PUSH    -_—i‘IY
                        8604
    FA31  FD2AFD70      8605          LD        IY,[CURRENTPCB}          :  i   ADDRESS OF CURRENT  PCB
                        8606
    FA35S FD7501        8607          LO        (I¥+P_REL_ADOR 10],L     ; PLACE ADDR OF NEW  PCB IN PLACE
    FA38  F07402        8608          LO        {1¥+P_REL_ADOR_HI}.H     ;
                        8609
    FA3B  FD360003      8610          LD        [1¥+P_COM_STAT],PCB_SNA  ; TELL MASTER TO SET  NEW PCB  ADDRESS
                        8611
    FA3F                8612  LOOPS:
    FA3F  FD7E0O        8613          LO        A,[IY¥+P_COSTAT}         ; CHECK FOR OPERATION  COMPLETE
    FA42  FE63          8614          cP        PCB_SNA_ACK              ; ¢*¢¢* NEED PROTECTION  HERE
    FA44  20F9          8615          JR        NZ,LOOPS                 : NOPE
                        8616
    FA46  22FD070       8617          LD        (CURRENT_PCB),HL         : REMEMBER WHERE PCB  IS (PLEASE...)
                        8618
    FA49  FDE1          8619          PoP       ly
                        8620
    FA4B  c9            8621          RET
                        8622
                       8624
                       8625 ; ENTRY:        __GET_PCB_ADDR
                       8626
                       8627       ;GLB      __GET_PCB_ADDR
                       8628
    FA4C               8629  GET _PCB_ADOR:
    FA4C FD2AFD70      8630        LD       Ty,[CURRENTPCB]            ; ADDRESS OF PCB
                       8631
    FASO C9            8632        RET
                       8633
                          8635
                          8636          GLB        __SOFT_RES KBD,   SOFT   RES_  PR,SOFT   _RESTAPE
                          8637
                          8638          EXT       __FIND_DCB,CHK_IF_INACTIVE
                          8639
    FAS1                  8640   _SOFT_RES   KBD:
    FAS1  3EO1            8641           LD        A,KEYBOARDID                   RESET  KBO
    FAS3  1808            8642           JR        __SOFT_RESDEV
                          8643
    FASS                  8644   _SOFT_RES   PR:
    FASS  3E02            8645           LO        A.PRINTER_ID                 ; RESET  PRINTER
    FAS7  1804            8646           JR        __SOFT_RESDEV
                          8647
    FASS                  8648   _SOFT_RES   TAPE:
    FASS  3EO08           8649           LD        A,TAPE_ID                      RESET  TAPE
    FASB  1800            8650           JR        __SOFT_RESDEV
                          6651
                          8652          ;GLB       __SOFT_RES_DEV
                          8653
    FASD                  8654   _SOFT_RES_DEV:
    FASO  FDES            8655           PUSH      ly                           : SAVE  IY
                          8656
    FASF  CDF446          8657           CALL      __FIND_DCB                     FIND  APPROPRIATE   DEVICE
    FAG2  2014            8658           JR        NZ,NO_DCB_FOUND                BAD DEVICE  I.0.
                          8659
    FAG4  CDF496          8660           CALL      CHK_IF_INACTIVE                IS DEVICE  IDLE?
    FAG7  200F            8661           JR        NZ,ACTIVE_DCB                ; NOPE    . OOPS  ...
                          8662
    FAG69 FD360002        8663           LD        [1¥+D_COMSTAT],0CB_RESET              ; SOFT RESET   DEVICE
                          aGe4
    FAG6D                 8665   DCB_CMND_LOOP:
    FAGD  FOCBOO7E        8666   —       BIT       CMNDCOMPLETE  BIT,[{IY+D_COM    STAT]   ; WAS  COMMAND   COMPLETE?
    FA71  28FA            8667           JR        Z,DCB_CMND_LOOP                         ; NOPE,  CHECK   AGAIN
                          8668
    FAT73 FD7EOO          B6E9           LD        A,{1Y¥+0_COM_STAT)             YUP
    FA76  FE8O            8670           cP        CMND_FIN_STATUS
                          8671
    FA78                  8672   ACTIVE_DCB:
    FAT7T8                8673   NO_DCB_FOUND:
    FA78  FOE!            8674           PoP       IY                           :
                          8675
    FATA  c9s             8676           RET
                          8677
                           8679
                           8680  ; READ OCB RETURN   CODE  (FIRST  BYTE  OF  DCB)
                           868 1
                           8682        :GLB      __RD_KBD RET   CODE,   RD  _PR_RET_CODE, RD  TAPE _RET_CODE
                           8683
    FA7B                   B684   RD KBD RET  CODE:
    FA7B  3E01             8685         LD       A,KEYBOARD_ID                ; RESET KBD
    FA7D  1808             8686         JR       __RD_RET_ CODE
                           8687
    FATF                   8688   RD PR_RET CODE:
    FA7F  3E02             8689         LO       A.PRINTER_ID                 ; RESET PRINTER
    FAa81 1804             8690         UR       __RD_RET_CODE
                           8691
    FA83                   8692   RD _TAPE_RET_CODE:
    FAB3  3£08             8693         Lo       A, TAPE_ID                   ; RESET TAPE
    FA85  1800             8694         JR       __RD_RET_CODE
                           #695                :
                           8696        ;GLB      __RD_RET_CODE
                           8697
    Faas?                  8698  _RD_RET_CODE:
    FAG7  FDES             8699         PUSH     =si‘TY                       ; SAVE IY
                           8700
    FASO  CDF446           8701         CALL     __FINO_DCB                   ; FIND APPROPRIATE  DEVICE
    FASC  2003             8702         UR       NZ.NO_DCB_FOUND2             ; BAD DEVICE 1.D.
                           8703
                           8704                                               ; Z CONDITION  CODE PRESENT |
                           8705
    FASE  FO7E00           8706         LD       A. [1V¥+0_COMSTAT)           ; COMMAND/STATUS  BYTE FROM  DCB
                           8707
    Fag!                   8708  NO_DCB_FOUND2:
    Fag!  FDE1             8709         Pop      IY
                           8710
    FA93  C9               e711         RET
                           8712
                      8714 ;WP              EQU O2000H              ; WHERE TO GO TO START WP
             <O100>   8715 WP              EQU O0100H              ; WHERE TO GO TO START wP
                      8716                ;GLB _GOTO_WP
                      8717                ;EXT MEM_CNFGOO
             .        8718                ;EXT SWITCH MEM
    FA94              8719  GOTO WP:
    FA94 3AFC17       8720        LD      A,{MEM CNFGOO])          ;get configuration byte for 32K ROM  and 32  RAM
    FAS7 CDFD14       8721        CALL    SWITCH_MEM
                      8722
                      8723 :;WP_CODESTART  EQU 2000H
                      8724 ;wP_SIZE        EQU 3*8*1024
                      8725 ;WP_DEST        EQU 8000H
                      8726 ;      LD      A,O                      ; BANK SWITCH IN THE BOOT ROMS
                      8727 ;      OuT     (7FH]A                   ;  (1 HOPE)
                      8728 ;
                      8729 ;      LO      HL,WP_CODESTART          ; WHERE DOES WP SIT IN BOOT ROMS
                      8730 ;      LD      DE,WP_DEST               ; WHERE WP GOES
                      8731 ;      LD      BC,WPSIZE                ; HOW BIG WP IS
                      8732 ;      LDIR                             ; MOVE WP INTO PLACE
                      8733 ;
                      8734 ;      LO      A,3                      ; BANK SWITCH IN OS7
                      6735 ;      OUT     (7FH]A                   ;  (IrKNOW)
                      8736
    FAQA C30100       8737        JP      wP                       ; GOTO wP
                      8738
                          8740          ;GLB       __READ_EOS
                          8741
    FAD                   8742  _READ_EOS:
    FA9D  C9              8743           RET
                          8744  ;
                          8745  ;       CODE  FROM  HERE  TO  END  OF  EOSUTIL   WAS  INSERTED   AFTER  THE
                          6746  ;       REV.  OG  ROM WAS  BURNED.     IT HAS  BEEN COMMENTED    OUT  TO MAINTAIN
                          8747  ;       COMPATIBILITY    WITH  THAT  ROM
                          8748  ;
                          8749  ;        END
                          8750  ;
                          8751  ;
                          8752  ;EOS CODE   START    QU   OO800H
                          8753  ;€0S SIZE            EQU  O2000H  -800H
                          8754  ;EOS DEST            EQU  OFD00H+B00H
                          8755  ;
                          8756  ;         LD        A,O                           ;BANK  SWITCH   IN  THE  BOOT  ROMS
                          8757  ;         OuT       {7FH],A                       ;  (I HOPE)
                          6758  ;
                          8759  ;         LD        HL,EOS  CODE  START            ;WHERE   DOES  EOS  SIT  IN  BOOT  ROMS
                          8760  ;         LD        DE,EOS  DEST                  ; WHERE   EOS  GOES
                          8761  ;         LO        BC,E€OSSIZE                    ;HOW  BIG  EOS  IS
                          8762  ;         LDIR                                    ;MOVE  EOS  INTO  PLACE
                          8763  ;
                          8764  :         LD        A,3                           ;BANK  SWITCH   IN  OS_7
                          8765   ;        OUT       (7FH].A                       ;  (I KNOW)
                          8766   ;
                          8767  ;         RET  .             ,                    ;EOS  IS  IN
                          8768   ;;
                          8769   opBSSessesessssesseesesssessssesssss        ssssesss SSSSs SrssssessesssTssase
                          8770   S[BERRA SRE ECS SSSSSSS SSSSSS  SSS SSSSSS SSSSSSSSS Sssssesesssssesacsssessse
                          8771   spSBESESSERESSS   SSHSETS SSS SSS Ss seesssssssrrsr  essere  sssrssesessessrse
                          8772   :;
                          8774 ; REV O           8/24/83  Vv/D
                          8775 SSSSSSSSHKSKSKSSEHKHESSKESKSHEE  ESHEESKEKEKSERSKEKEKSESESEEKEKESHKEAEEEEEEHEKEEREHS
                          8776 &
                          8777 °   __RD_1_BLOCK  WILL READ ONE  BLOCK OF DATA FROM  A  BLOCK  DEVICE
                          8778 a   TO A LOCATION  SPECIFIED BY  REGISTER HL
                          8779 *
                          8780 *      INPUT:   A       DEVICE  ID
                          8781 ’                       LOW NIBBLE  - DEVICE ADDRESS
                          8782 *                       HI NIBBLE   - SECONDARY DEVICE   ID
                          8783 &
                          8784 ¢               HL      DESTINATION  ADDRESS IN RAM
                          8785 *
                          8786 *               REGISTER PAIR.
                          8787 *                       BC DE       - SECTOR NUMBER  ON  DEVICE
                          8788 x
                          8789 *      THE TRANSFER  BYTE COUNT  IS DEFINED BY "“DCB_MAX_MESS   LEN"   WHICH
                          8790 *      IS FOUND  IN THE DEVICE DCB.
                          8791 &
                          8792 ¢      OUTPUT:
                          8793 *               CONDITION BITS:
                          8794 *                       Z: NO ERRORS  —
                          8795 .                      NZ: ERRORS  OCCURED
                          8796 *                                A - ERROR CODE
                          8797 *
                          8798 *      ALL REGISTERS  ARE PRESERVED
                          8799 &
                          8800 SSSESHKSSESSHESESEKSESSESSESSESSSESSESHESSESSHEHEHSESEEHEHESEKEHKSESSEHEEKEKCSEHEESESESCEHKEKEEKEESCEEEEHEEEH
                          6801
                          8802       ;GLB      __RO_1_BLOCK
                          8803        EXT      __FIND_DCB
                          8804       EXT       CHK_IF_INACTIVE
                          8805
    FASE                  8806 __RO_1BLOCK:
    FASE  FDES            8807        PUSH     ly
                          8808
    FAAO  FS              8809        PUSH     AF                       ; SAVE DEVICE   ID
                          8810
    FAA   COFAC6          6811        CALL     __START_RD_1_BLOCK
                          8812
    FAA4  2007            8813        JR       NZ,ERRORWITH DCB
                          8614
    FAAG                  6815 RD_NOTCOMPLETED:
    FAAG  F1              8816        PoP      AF               ; GET DEVICE ID
    FAAT  FS              88617       PUSH     AF               ; SAVE IT AGAIN
                          8616
    FAAS  CDFAE2          8819        CALL     __ENORD_1_BLOCK          ; LOOK FOR  STATUS
                          8820
    FAAB  30F9            8821        JR       NC,RD_NOTCOMPLETED       ; COMMAND  NOT  COMPLETED,   CHECK   STATUS  AGAIN
                          8822
    FAAD                  8823 ERROR_WITH_DCB:
    FAAD  FOE1            8824        PoP      ly               ; REALLY IS AF BUT  NEED  TO  SAVE  IF  AN  ERROR
                          8825
    FAAF  FDE1            8826        POP      ly
                          8827
    FAB1  ce              8828        RET
                          8831  *
                          8832  *      __WR_1_  BLOCK   WILL WRITE   ONE BLOCK OF DATA   TO  A  BLOCK   ORIVER
                          8833  +      FORM   A  LOCATION  SPECIFIED   BY REGISTER  HL
                          8834  =
                          8835  €       INPUT:
                          8836  2                 A        DEVICE   ID
                          8837  ez                         LOW  NIBBLE  - DEVICE ADDRESS
                          8838  ¥                          HI NIBBLE    - SECONDARY  DEVICE    ID
                          8839  ®&
                          8840  ©                 HL       SOURCE  ADDRESS  IN RAM
                          6841  #
                          8842  he                REGISTER  PAIR:
                          8843  «                          BC DE   -   SECTOR NUMBER  ON  DEVICE
                          8844  +
                          8845  s      THE  TRANSFER    BYTE COUNT   IS DEFINED BY  “DCB_MAX   MESS  LEN“
                          8846  %      WHICH   IS  FOUND  IN THE  DEVICE  DCB
                          8847  a
                          88468 &      OUTPUT :
                          8849  s                 CONDITION  BITS:
                          6850  e                          Z:   NO ERRORS
                          8851  S                         NZ:   ERRORS  OCCURED
                          8852  @                                    A - ERROR CODE
                          8853  &
                          8854  &      ALL  REGISTERS     ARE PRESERVED
                          8855  ¢
                          aB55  €SSSHSSHSSESSSESCSSESSS SSSSCS SSHSS SSSKEHESESSCHSESSHESHASESHESSEHESSEKCEKEKEEEHEHS
                          8857
                          aase        :GLB        __wWR_1_BLOCK
                          8859
    FAB2                  8860  __WR_1_BLOCK:
    FAB2  FOES            8861         PUSH       iY
                          8862
    FAB4  FS              8863         PUSH   =   AF                         ; SAVE  DEVICE    ID
                          8864
    FABS  COFAFF          8865         CALL     __START_WR_1_   BLOCK
                          8866
    FAB8  2007            8867         JR         NZ,ERROR WITH  DCB2        ; DCB  NOT  FOUND   OR  NOT   IDLE
              )           8868
    FABA                  8869  WR NOTCOMPLETED:
    FABA  F1              8870         PoP        AF                         ; GET  DEVICE   IO
                          8871                                                |
    FABB  F5              8872         PUSH   =   AF
                          8873
    FABC  COFB18          8874         CALL       __END WR_1_BLOCK
                          8875
    FABF  30F9            8876         UR         NC,WR_NOT COMPLETED        ; COMMAND  NOT    COMPLETED,CHECK     STATUS   AGAIN
                          8877
    FAC1                  8878  ERRORWITH  _DCB2:
    FAC!  FDE1            8879         POP        ly                 - IS REALLY AF  BUT  NEED   TO  PRESERVE    A REG  IN  CASE«OF     ERRORS
                          8880
    FAC   FDE             88st         Pop        ly
                          8882
    FACS  C9              8883         RET
                         8886   *
                         8887   *      __START_RD_1   BLOCK  WILL  SEND  A READ COMMAND   TO  READ   A BLOCK
                         8888   «      OF  DATA  FROM A  BLOCK DEVICE  TO  A BUFFER  SPECIFIED    BY  REGISTER  HL
                         8889  «+
                         8890   +      INPUT:    A        DEVICE  ID
                         8891   *                         LOW NIBBLE  - DEVICE  ADDRESS
                         8892   *                         HI NIBBLE   -  SECONDARY  DEVICE   ID
                         8893   *
                         8894   *                HL       DESTINATION  ADDRESS   IN RAM
                         8895   *
                         8896   *                REGISTER  PAIR:
                         8897  *                          BC DE       -  SECTOR NUMBER   ON  DEVICE
                         8898  «+
                         8899   *      THE  TRANSFER  BYTE  COUNT  IS DEFINED  BY  “DCB_MAX_MESS    LEN"   WHICH
                         8900   *«     TS  FOUND  IN THE  DEVICE  DCB.
                         8901
                         8902   *¢     OUTPUT :
                         8903   *                CONDITION  BITS:
                         8904   +                         Z: NO  ERRORS
                         8905   +                       NZ:  ERRORS  OCCURED
                         8906  «+                                  A - ERROR  CODE
                         8907   +
                         8908   +      ALL  REGISTERS  ARE  PRESERVED
                         8909   *
                         B91IC  SHSSSEHSHSESEES  EEHESESE ESSERESHEESH    EEEEKER ERS                    EREREEEEEE ERE
                         8911
                         8912   ;
                         8913   ;NO_DCB_FOUND!   CHANGED  TO BLK_NO_CB FOUND!   TO  AVOID  CONFLICT
                         8914   ;WITH IDENTICAL   LABEL  ELSEWHERE
                         8915         ;GLB      __START_RD_1_  BLOCK
                         8916
    FAC6~                8917   START_RD_1_  BLOCK:
    FAC6  C5             8918          PUSH      BC
    FAC7  DS             8919          PUSH      DE
    FACS  ES             8920          PUSH      HL
    FACS  FDES           8921          PUSH      ly
                         8922
    FACB  CDF446         8923          CALL      __FIND_DCB
                         8924                                        |                       |
    FACE  200C           8925          UR        NZ,8NO  _DCBFOUND!       ; COULD  NOT FIND   OCB  FOR  THIS  DEVICE
                         8926
    FADO  CDF496         8927          CALL      CHK_IF_ INACTIVE           ; IS DEVICE   IDOLE?
    FAD3  2007           8928          JR        NZ,ACTIVE DCB!              ; NOPE,  GET  OUT
                         8929
    FADS  CDFB38         8930          CALL      PREP_DOCB                  ; SET  UP THE  DCB  FOR   READ
                         8931
    FAD8  FD360004       8932          LD        [I¥+D_COM_STAT],DCB_ RD    ; SEND  READ  COMMAND
                         8933
    FADC                 8934  ACTIVE DCB1:
    FADC                 8935  B_NO DCB FOUND!1:
    FADC  FDE1           8936          POP       IY
    FADE  E1             8937          POP       HL
    FADF  Di             8938          POP       DE
    FAEO  C1             8939          POP       BC
                         8940
    FAE1  C9             6941          RET
                      8942
                                   8944   SSSKeESKCSSCSHSESKHSS SH SKSSSHKSHH SESE HEKESSSEKESKRESS     SEKESHEAEKEEHERE  KEKE ESD
                                   8945   +
                                   8946   +       __END_RD_1_   BLOCK  CHECKS   THE  STATUS  AFTER  A __START_RD_1    BLOCK
                                   8947   *        IS EXECUTED
                                   8948   +
                                   8949   +        INPUT:   A         DEVICE   ID
                                   8950   +                           LOW  NIBBLE   - DEVICE  ADDRESS
                                   6951                               HI  NIBBLE    - SECONDARY   DEVICE   ID
                                   6952   *
                                   8953   *       OUTPUT:   CONDITION    FLAGS
                                   8954   *                 C:   OPERATION    COMPLETED
                                   8955   *«               NC:   OPERATION    NOT COMPLETED
                                   8956   *                 Z:   NO  ERRORS
                                   8957   *                NZ:   ERRORS
                                   8958   «                           A  = ERROR  CODE
                                   8959   «+
                                   8960   *       ALL  REGISTERS    ARE  SAVED
                                   8961   *
 “       .                         8963
                                   8964          ;GLB       __END_RD_1_BLOC1
                                   8965          sEXT       CHK_IF_IDLE
                                   8966
            FAEQ                   8967    END  _RD_1 BLOCK:
            FAE2  FDES             8968           PUSH      ly
                                   8969
            FAE4  CDF446           8970           CALL      __FIND_DCB
                                   8971
            FAE7  37               8972           SCF                                     ; SET CARRY   FLAG  TO  INDICATE   OPERATION     COMPLETED
                                   8973                        |
            FAEB  2012             8974           JR        NZ,NO DCB  _FOUNDS            ; NO DCB  FOUND
                     |             8975
            FAEA  CDF4AE           8976           CALL      CHK_IF_IDLE                   ; IS DEVICE   IDLE?
                                   8977              .
            FAED  2000             8978           JR        NZ,0CB_IS_IDLES
                                   8979                                                                                                                           .
            FAEF  B7               8980           OR        &                             ; CLEAR  CARRY  FLAG
            FAFO  FOCBOOTE         8981           BIT       CMND_COMPLETE    BIT,[I¥+D_   COMSTAT)    ; WAS  COMMAND   COMPLETE?
            FAF4  2806             8982           JR        Z,COMMAND  NOT   COMPLETED    ; NOPE,
                                   86983
                                   8984
            FAF6  FO7EOO           8985           LD        A,{1IY¥+D_COM STAT}           ; GET STATUS   OF  LAST  OPERATION
                                   8966
            FAFS  FE8O             8987           CP        CMND_FIN_  STATUS             ; ANY ERRORS?
            FAFB  37               8988           SCF                                     ; INOICATE  COMMAND   COMPLETED
                                   8989                                                   ; CONDITON  FLAGS:   IF  NO  ERRORS:    C,2
                                   8990                                                   °                    IF  ERRORS:    C,NZ    A=ERROR    CODE
                                   8991
|           FAFC                   8992   DCB_IS_IDLES:
            FAFC                   8993   NODCB_FOUNDS:
|           FAFC                   8994   COMMAND COMPLETED:
            FAFC                   8995   COMMAND NOT  COMPLETED:
            FAFC  FODE1            8996           POP       Iy
                                   8397
            FAFE  C9               8998           RET
                                   8939
                        GOO1    HEHESSE   SHEE  EEEEEEEEE EEEHEHEEEEHEEEEHEHHEHEHEHEHEEHEEETEHEEHEHE HEHEESD
                        9002   *
                        9003   *      __START_WR_ 1 BLOCK WILL SEND A WRITE COMMAND  TO  WRITE A BLOCK
                        9004   +      OF DATA  TO A BLOCK DEVICE FROM A LOCATION SPECIFIED   BY REGISTER  HL
                        9005   *¢
                        9006   «      INPUT:
                        9007   ¢               A       DEVICE ID
                        9008   *¢                      LOW NIBBLE - DEVICE ADDRESS
                        9009   +                       HI NIBBLE  - SECONDARY DEVICE  ID
                        9010   «
                        9011   «               HL      SOURCE ADDRESS IN RAM
                        9012   «
                        9013   +               REGISTER PAIR:
                        9014   *                       BC DE  -  SECTOR NUMBER ON DEVICE
                        9015   «
                        9016   =
                        9017   «      THE TRANSFER  BYTE COUNT IS DEFINED BY “DCB _MAX_MESS LEN"
                        9018   +      WHICH  IS FOUND IN THE DEVICE OCB
                        9019   +
                        9020   ¢      OUTPUT:
                        9021   *               CONDITION BITS:
                        9022   *                       Z:  NO ERRORS
                        9023   +                      NZ:  ERRORS OCCURED
                        9024   «+                              A - ERROR CODE
                        9025   *
                        9026   «      ALL REGISTERS  ARE PRESERVED
                        9027   +
                        9029
                        9030   ;NO_DCB_FOUND3  CHANGED TO B_NODCB FOUND3  TO AVOID CONFLICT   WITH
                        9031   ;IDENTICAL LABEL  ELSEWHERE
                        9032
                        9033         ;GLB      __START_WR_1BLOCK
                        9034
    FAFF                9035   _START_WR_1 BLOCK:
    FAFF C5             9036          PUSH  —  BC
    FBOO D5             9037          PUSH     ODE
    FBO1 ES             9038          PUSH     —s-HL
    FBO2 FDES           9039          PUSH     IY
                        9040
    FBO4 CDF446         9041          CALL    __FIND DCB
                        9042
    FBO7 200C           9043          JR       NZ,B_NO_OCB_FOUND3    ; NO OCB FOUND
                        9044
    FBO9 CDF496         9045          CALL     CHK_IF_INACTIVE         ; IS DEVICE ACTIVE?
    FBOC 2007           9046          JR       NZ,ACTIVEDCB3           ; NOPE, GET OUT
                        9047
    FBOE CDFB38         9048          CALL  —- PREP_DCB                ; SET UP DCB  FOR  WRITE
                        9049
    FB11 FD360003       9050          LD       [1¥+D_COMSTAT],0CB_     WRSEND WRITE  COMMAND                           ‘
                        9051
    FB15                9052   BNO DCB _FOUND3:
    FB15                9053   ACTIVE_DCB3:
    FB1S FDE%           9054          PoP      ly
    FB17 Ef             9055          PoP      HL
    FB18 D1             9056          PoP      DE
    FBI9 C1             9057          Pap      BC
                        9058
    FBIA C9            9059         RET
                          9061
                          QOG2   FHSAA        EESSHEHREEK       HEHEHE      EERE       EERE        EEE EEE EERE  EE
                          9063   *
                          9064   *       __ENO_WR_1 BLOCK   WILL   CHECK THE STATUS   OF  THE LAST OPERATION
                          9065   «       EXECUTED
                          9066   +
                          9067   *       INPUT:
                          9068   «+               A        DEVICE   ID
                        . 9069   ¢                         LOW  NIBBLE  - DEVICE  ADDRESS
                          9070   *                         HI  NIBBLE   —=SECONDARY   DEVICE   ID
                          9071   *
                          9072   *      'OUTPUT:
                          9073   *                CONOITON  FLAGS
                          9074   *                         C         OPERATION  COMPLETED
                          9075   +                        NC         OPERATION NOT   COMPLETED
                          9076   *                         Z         NO ERRORS
                          9077   «                        NZ         ERRORS
                          9078   +                                   A = ERROR CODE
                          9079   ¢
                          9080   *       ALL REGISTERS  ARE   PRESERVED
                          9081   +
                          9083
                          9084   ;NO_DCB_FOUND4              B_ NODCB_FOUND4
                          9085   ;0CB_IS IDLE4   CHANGED  TO BLK_DCB_IS  IOLE4   TO  AVOID  CONFLICT  WITH
                         9086    ;IDENTICAL   LABEL ELSEWHERE
                          9087
                          9088          ;GLB      __END_WR_1  BLOCK
                          90839
    FB1B                  9090   __END_WR_1 BLOCK:
    FB1B   FDES           9091           PUSH     ly
                          9092
    FB1D   CDF446         9093           CALL     __FIND_DCB
                          9094
    FB20   37             9095           SCF
    FB21   2012           9096           UR       NZ,8NO  DCB  _FOUND4     ; CONDITION   FLAGS:  C,NZ   A=ERROR  CODE
                          9097            |
    F823   CDF4AE         9098           CALL     CHK_IF_IOLE                ;  IS DEVICE   IDLE?
    FB26   2000          9099            JR       NZ,BLK_DCB_IS_IDLE4        ; YUP
                         9100
    FB28  B7             9101            OR       A                          - RESET   CARRY  FLAG
                         9102
    FB29   FDCBOO7E      9103            BIT      CMND_COMPLETE  BIT,  [IY+DCOM  STAT]    ; WAS COMMAND  COMPLETE?
    FB2D   2806          9104            JR       Z,CMND_NOT COMPLETED        ;  NOPE,
                         9105
    FB2F   FO7E0O        9106            LD       A,{1Y¥+OCOM  STAT)       ; YUP
                         9107
                         9108
    FB32   FE8O          9109            cp       CMND_FIN STATUS            ; ANY  ERRORS?
    FB34   37            9110            SCF                                 ; INDICATE    COMMAND COMPLETED                 ‘
                         9111                                                ; CONDITION    FLAGS: IF  NO ERRORS:   C,2Z
                         9112                                                                      IF  ERRORS:  C,NZ,   A=ERROR  CODE
                         9113
                         9114
    FB35                 9115   BLK DCB_IS  IDLE4:
    FB35                 9116   B _NO_DCB_FOUND4:
    F835                 9117   CMNO_COMPLETED:
    FB35                9118 CMNDNOT COMPLETED:
    F835 FOE            9119        PoP     ly
    F837 C9             9120        RET
                         QGI2D SHEESH HEHEHE  EEE  HEHEHE EKEREEE  ERE EEEEEE EEEHEHEHERHEREE EREREREE EEE
                         9123  *
                         9124  *      PREP _OCBLOADS THE OCB BUFFER  WITH THE PROPER VALUES FOR
                         9125  «      A READ OR WRITE COMMAND
                         9126  *
                         9127  *      INPUT:
                         9128  *              IY      START OF SPECIFIC  DCB
                         9129  +              HL      ADDRESS OF RAM  DESTINATION(READ)/SOURCE(WRITE)
                         9130  *
                         9131  *              BC DE   DEVICE SECTOR  NUMBER
                         9132  ¢
                         9133  *      OUTPUT:    NONE
                         9134  *
                         Q1IQ5 SHES SHEESH EEE EHHEKER   HEHEHE    EEE  EEE EEEEEEEE EERE  HEREET EES
                         9136
    FB38                 9137  PREP_DCB:
    FB38 FS              9138         PUSH    AF
                         9139
    F839 CB3F            9140         SRL     A                                ; EXTRACT SECONDARY DEVICE   ID
    FB3B CB3F            9141         SRL     A
    FB30 CB3F            9142         SRL     A
    FB3F CB3F            9143         SRL     A
                         9144
    FB41 FD7709          9145         LO      [1¥+D_SEC_DEV_ID],A            ; ... AND PLACE IN DCB
    FB44 FD7E11          9146         LD      A,(1Y+DMAX MSG LN LO]        ; GET BLOCK LENGTH AND PLACE  ...
    F847 FD7703          9147         LO      [1¥+D_BUF_LEN_LO],A           ; .... IT IN BUFFER LENGTH  ..
    FB4A FD7E12          9148         LD      A,(I1Y¥+MAXMSG _LNHI]        ; .... FOR READ
    FB4D FD7704          9149         LD      [1¥+D_BUF_LENHI].A
                         9150
    FB5O FD7305          9151         LO      {1¥+D_SECT_NUM],E              ; LOAD UP A 4 BYTE SECTOR....
    FB53 FD7206          9152         LD      {[I¥+D_SECT_NUM+1],D           ; .... NUMBER FROM REGISTERS....
    FB56 FDO7107         9153         LD      [1¥+D_SECTNUM+2]},C            ;      PAIR BC DE
    FB59 FD7008          9154         LD      [1¥+D_SECT_NUM+3],8
                         9155
    FBSC FD7501          9156         LD      {I¥+DBUF ADR _LO),L          ; ADDRESS OF SOURCE/DESTIATION
    FBSF F07402          9157         LD      [1Y¥+BUF_ADR_HI},H           ; .... IN RAM
                         9158
    FB62 F1              9159         POP     AF
    FB63 C9              9160         RET
                         9161  ;
                         9162  SESSSSTASSSSSSSSSSSTSSSRSSSSeeresssessssrsesrsrsssssrssssssssssesrseszse
                         9163  ,ESRBERTSSSTASSTSSTTTSesseessessssseassrrssressesssszsssessssesssssse
                         9164  ;ssssuenasrassscecesssesesestresesseers sesrssssessssrsessssssssssse
                         9165  ;
                         9166
                        9168
                        9169 ;REV O            (V/D  8-24-83)
                        9170
                        9171        sEXT      DEVICE_ID
                        9172
                        9173 SSSHKSSSSESHSSSSHESKESSHESHSSESSHSSESSHESESHSHSHHESHEHESHEETSSSSEHESEEESEKEEEESEEHEEHEERE
                        9174 * THIS ROUTINE   WILL INITIATE  A READ COMMAND ON  A CHARACTER   DEVICE.   THE
                        9175 * ROUTINE  WILL  WAIT FOR THE  COMMAND TO BE COMPLETED.    If  THE COMMAND
                        9176 * COMPLETED  WITH  NO ERRORS,  THEN THE FLAG WILL  BE ZERO.    IF THERE
                        9177 * WERE ERRORS   THEN THE FLAG  WILL BE NON-ZERO.
                        9178 ®       INPUT:   A ==>   DEVICE  ID
                        9179 .                DE =>   DESTINATION  ADDRESS
                        9180 5                BC =>   NUMBER  OF BYTES TO READ
                        9161 »      OUTPUT:
                        9182 >                CONDITION FLAGS
                        9183 .                        Z:       NO ERROR
                        9184 *                                 A ===> KEY READ
                        9185 °                       NZ:       ERROR OCCURED
                        9186 .                                 A ===> ERROR CODE
                        9187 SSSSESSSSSSSSSSSSSHSSSSSESSESSE SESSESESCSHSSSHESSSHSSEHSEHSSESSHESESHSHEKSESESKEETERERES
                        9188
                        9189        GLOBAL    __RD_CH_DEV
                        $190        EXT       __FIND_DCB
                        9191
    FB64                9192 __RD_CH_DEV:
    FBG4 32FD72         9193         LO       [DEVICE_1D},A              SAVE  DEVICE ID
                        9194
    FBG67COFB86         9195        CALL      __START_RO_CH_DEV
    FBGA 2008           9196        UR         NZ,GOOD_BYE
                        9197
    FBG6C               9198 RD_DEV_LOOP:
    FB6C 3AFO72         9199        LD        A,(DEVICE_ID]                       RESTOR   THE DEVICE  ID
    FBGF CDFBAS         9200        CALL      __ENO_RD_CH_DEV
    F872 30F6           9201        JR        NC,RD_DEV_LOOP
                        9202
    FB74                9203 GOOD_BYE:
    FB74 c9             9204        RET
                        9205
                                           9208  * WRITE   CHAR    DEV ALLOWS   THE  CALLER  TO  SEND   A PRINT  COMMAND  BY SPECIFYING
                                           9209  * THE   BUFFER    OF THE  STRING   AND  THE NUMBER    OF BYTES  TO  PRINT.
                                           9210  *        INPUT:     A  ==>    DEVICE   ID
                                           9211»                     BC  =>    NUMBER   OF BYTES  TO   WRITE
                                           9212  *                   HL  =>    SOURCE   OF DATA
                                           9213  »        OUTPUT:
                                           9214  *                   CONDITION   FLAGS
                                           9215  *                             Zz:       NO ERRORS
                                           9216  *                            NZ:        ERROR  OCCURED
                                           9217  *                                       A ===>  ERROR   CODE
                                           9218  SSSSCHRESSESKKKSHSKEHSKEESEHSEKEKKEKEHRSEKEEEEHSE       EHREKEEKREKEEHREKEEEREEEEHREEEEKEES
                                           9219
                                           9220           GLOBAL     __WR_CH_DEV
                                           9221
                   FB75                    9222  _wWR_CH_DEV:
                   FB75  32FD72            9223           LD         [DEVICE_ID].A
                                           9224                               |
                   FB78  CDFBC2            9225           CALL       __START_WR_CH_DEV
                   FB7B  2008              9226           UR         NZ,SO_LONG
                                           9227
                   FB7D                    9228  OCB_WRITE_LOOP:
                   FB7D  3AF072            9229           LO         A,(DEVICE_ID]                ;  RESTORE   THE  ID FOR USE IN THE  CALL
                   FB8O  CDFBE1            9230           CALL       __END WR  _CH_DEV
                   FB83  30F8              9231           JR         NC ,OCB_WRITE_LOOP
                                           9232
                   FB85                    9233  SO_LONG:
                   FB8S  C9                9234           RET
                                           9235
                        9237
                        9238 SSESHEEHSESESEHESEREEKER    EEESEER EHEHERESEHETHESEEEEEERESETHEHEEEEEEEE EEEHEE EE
                        9239 * THIS ROUTINE  IS RESPONSIBLE  FOR  SETTING UP A DEVICE DCB TO DOOA READ.
                        9240 ¢ THE LAST THING  DONE  IN THIS ROUTINE  IS TO ISSUE THE COMMAND TO READ
                        9241 * A KEY FROM  THE KEYBOARD.
                        9242 &      INPUT:   A  ===>  CONTAINS  THE DEVICE ID
                        9243 x               DE ===>  DESTINATION  ADDRESS
                        9244 @               BC ===>  NUMBER OF  BYTES TO READ
                        9245 e      OUTPUT:   CONDITION  FLAGS
                        9246 e               Z:       THE READ DATA  FROM KEYBOARD COMMAND HAS BEEN SENT
                        9247 %               NZ:      ERROR OCCURED
                        9248 &                        A ===>  ERROR  CODE
                        9249 &CESSSESSESSSSESHEHEHE      SSSHESSESESEHSEEEHSEKEEEESTEEEEESEHEEHEHEHEEHEEEEEE TERS
                        9250
                        9251       ;GLB      __START_RD_CH_DEV
                        9252       ;EXT      CHK_IF_INACTIVE
                        9253
    FB86                9254 __START_RD_CH_DEV:
    FB86 FDES           9255        PUSH     LY
    FBB8 CDF446         9256        CALL     __FINO_DCB                ; FIND THE OCB
                        9257
    FBS8 2015           9258        JR       NZ,NO_DCB_DEFINED
                        9259
    FBSD CDF496         9260        CALL     CHK_IF_INACTIVE            ;SEE IF THE KEY BOARD IS AVAILABLE
                        9261
    F890 2010           9262        JR       NZ,DCB_IS_ ACTIVE          ;DCB IS CURRENTLY ACTIVE
                        9263
    FB92 FD7301         9264        LD       [1¥+D  BUF_ADR_LOJ,E   ;LOAD THE DESTINATION ADDRESS INTO  DCB
    FB95 FD7202         $265        LD       [1¥+D_BUF_ADR_HI),0
                        9266
    FB98 FD7103         9267        LO       [1¥+D BUF _LEN_LO},C        ;LOAD THE BYTE COUNT
    FB98 FO07004        9268        LD       [1¥+O0 BUFLEN  _HI).B8
                        9269
    FB9E FD360004       $270        LD       (1¥+D_COM_STAT},0CB_RD          ; INITIATE THE COMMAND TO  READ
                        9271                                              ;ZERO FLAG WAS SET ABOVE
                        9272
    FBA2                9273 OCB_IS_ACTIVE:                             ;NZ IS ALREADY THE CONDITION OF  THE  FLAG
    FBA2                9274 NO_DCB_DEFINED:                            ;A CONTAINS THE ERROR CODE
    FBA2 FDE1           9275        PoP      Ty
                        9276
    FBA4 c9             9277        RET
                        9278
                        G2BO   SHSHHERE EEE    EEREEEE EEEREEREREEEEEEEEHEEEEEEEEEHEEEEEEEEHEREEEEEEEHEE  EEE
                        9281   * THIS ROUTINE WILL CHECK THE  DEVICES OCB COM/STATUS BYTE AND RETURN
                        9282   * THE RESULT OF THE CHECK.
                        9283   *      INPUT:  A  ===> DEVICE  ID
                        9284   *      OUTPUT: CONDITION FLAGS
                        9285   *              Cc:     COMMAND  HAS FINISHED
                        9286   *¢            NC :     COMMAND  HAS NOT BEEN PROCESSED
                        9287   «+             Zz:     NO ERROR  OCCURED
                        9288   *             NZ:      ERROR OCCURED
                        9289   *                      A ===>   ERROR CODE
                        9290
                        9291   SSESESSSEEESSEKEKEEHRHEERKESKEHEHEEASEKSEHKRSEKEEKRESESRSHEEKEHKHEREKEEEEEEEEDESKEEHR
                        9292
                        9293         ;GLB     __END_RD_CH_DEV
                        9294         SEXT     CHK_IF_IDLE
                        9295
    FBAS                9296   __ENDRD _CH_DEV:
    FBAS FDES           9297          PUSH  ==‘
    FBA7 CDF446         9298          CALL    __FIND_OCB
    FBAA 37             9299          SCF
                        9300                 |
    FBAB 2012           9301          JR      NZ,NO_OCB                ; THERE WAS NO KEYBOARD OCB
       :                9302
    FBAD CDF4AE         9303          CALL    CHK_IF_IDLE             ; IS DEVICE IDL?
    FBBO 2000           9304          UR      NZ,0CB_IS_IDL           ; YUP
                        9305
    FBB2 87             9306          OR      A                        ; CLEAR THE CARRY FLAG
    FBB3 FOCBOO7E       $9307         BIT     CMND_COMPLETE_BIT,[IY+D_COM_STAT]        ; WAS THE COMMAND  PROCESSED?
    FBB7 2806           9308          UR      2,ROUTINE FINISHED       ; NO, RETURN WITH THE CARRY FLAG  CLEARED
                        9309                                           ; YES, THE COMMAND WAS PROCESSED
    FBB9 FD7EOO         9310          LD      A,[1¥+D_COM_STAT]        ; DID ANY ERRORS OCCUR?
    FBBC FESO            9311         cP      CMND_FINSTATUS
    FBBE 37             9312          SCF
                        9313                                           ; NO ERROR, SET THE CARRY FLAG,  ZERO FLAG CONDITION
    FBBF                9314   OCB_IS_IDL:
    FBBF                9315   NODCB:
    FBBF                9316   ROUTINE_FINISHED:
    FBBF FDE1           9317          PoP     IY
                        9318
    FBC1 C9             9319          RET
                        9320
                         QGQQ2  SHHSSSHESHESS   EEEEEEHERE EEREEER ERE    EEEEEE EEHEHE EEE  EEHE REESE        EEEE EOEEEES:
                         9323   *«START_WR_  CH DEV  ALLOWS  THE  CALLER  TO SEND A PRINT  COMMAND   BY  SPECIFYING
                         9324   * THE BUFFER OF  THE STRING  AND  THE  NUMBER OF BYTES  TO PRINT.
                         9325   *      INPUT:   <A==>   DEVICE   ID
                         9326   *               BC =>   NUMBER  OF  BYTES  TO WRITE
                         9327   *               HL =>   SOURCE  OF  DATA
                         9328   *      OUTPUT:
                         9329   ¢               CONDITION  FLAGS
                         9330   *                       x:        NO  ERRORS
                         9331                           NZ:       ERROR  OCCURED
                         9332   *                                   ===>  ERROR CODE
                         9334
                         9335   :NO_DCB_FND3 CHANGED  TO C_NO DCB  _FND3  TO AVOID CONFLICT   WITH
                         9336   ;IDENTICAL LABEL  ELSEWHERE
                         9337
                         9338         ;GLOBAL   —START _WR_CH_DEV
                         9339
    FBC2                 9340  _START_WR_CH_DEV:
    FBC2  FDES           9341          PUSH     ly
    FBC4  CDF 446        9342          CALL     __FIND_OCB        ; FINO  THE CORRECT  DEVICE  OCB
                         9343
    FBC7  2015           9344          JR       NZ,C_NO_OCB_FND3
                         9345
    FBC9  CDF 496        9346          CALL     CHK_IF_INACTIVE                ; IS OCB  ACTIVE?
    FBCC  2010           9347          JR       NZ,O0CB_IS_ACTIVE3             ; YUP
                         9348
    FBCE FD7103          9349          LD       [Iv¥+DBUF_LEN_LO),C             ; LENGTH  OF  THE  BUFFER
    FBD1  FD7004         9350          LD       [I¥+DBUF _LEN_HI).B             :
                         9351                                          |
    FBD4  FD7S01         9352          LD       [1¥+DBUF ADR  _LOJ,L           ; ADDRESS  OF  THE  STRING
    F807  FD7402         9353          to       (I¥+DBUF ADR  _HI),H           :
                         9354
    FBDA  FD360003       9355          LO       (1¥Y+D_COMSTAT],0CB_  wR         ; INITIATE   THE  WRITE  DATA  COMMAND
                         9356
    FBDE                 9357  C_NO_DCB_FND3:
    FBDE                 9358  OCB_IS ACTIVE3:
    FBDE  FDE1           9359          Pop      ly
    FBEO  C9             9360          RET
                            9363   * END   WR  CH  DEV   WILL  CHECK  THE  DEVICES   DCB COM/STATUS  BYTE AND  RETURN
                            9364   * THE  RESULT   OF  THE CHECK.
                            9365   *       INPUT:    A   ===>  DEVICE   ID
                            9366   *       OUTPUT:   CONDITION    FLAGS
                            9367   *                 C :       COMMAND   HAS FINISHED
                            9368   *                 NC :      COMMAND   HAS NOT  BEEN  PROCESSED
                            9369   *                 Zz:       NO  ERROR  OCCURED
                            9370   *                 NZ:       ERROR  OCCURED
                            9371   *                           A  ===>   ERROR CODE
                            9372
                            9374
                            9375   ;NO_OCB_FND4                C_NO_DCB_FND4
                            9376   ;DCB_IS_JDL4    CHANGED   TO CHAR_DCB  IS _IDL4   TO AVOID CONFLICT  WITH
                            9377   ;IDENTICAL   LABEL   ELSEWHERE
                            9378
                            9379          ;GLB       __END_WR_CH_DEV
                            9380
     FBE1                   9381    END  _WR_CH_DEV:
     FBE1  FDES             9382           PUSH       Ty
                            9383
     FBE3  CDF446           9384           CALL      __FIND_OCB
     FBE6  37               9385           SCF
                            9386
     FBE7  2012             9387           UR        NZ,C_NO_DCB_FND4              ; THERE WAS NO  PRINTER DCB
                            9388
     FBE9  COF4AE           9389           CALL‘     CHK_IF_IDLE                 ;  IS DEVICE IDL?
     FBEC  2000             9390           UR        NZ,CHAR_DCB_IS_IDL4
                            9391
     FBEE  B7               9392           OR        A                             ; CLEAR THE CARRY  FLAG
     FBEF  FDCBOOTE         9393           BIT       CMND_COMPLETE   BIT,[{IY+D  COM_STAT]           >WAS THE COMMAND    PROCESSED?
     FBF3  2806             9394           JR        2,NOT  COMPLETED             ;  NO, RETURN WITH  THE CARRY  FLAG   CLEARED
                            9395                                                   >;YES, THE COMMAND  WAS PROCESSED
     FBFS  FOT7EOO          9396           LO        A, [1Y¥+D_COM_STAT]          ;  DID ANY ERRORS  OCCUR?
     FBF8  FEBO             9397           cP        CMNO_FIN   STATUS
     FBFA  37               9398           SCF
                            9399                                                  ;  NO ERROR, SET  THE CARRY FLAG,   ZERO  FLAG  CONDITION
     FBFB                   9400   CHAR_DCB_IS_IDL4:
     FBFB                   9401   C_NO DOCB_FND4:
     FBFB                   9402   NOTCOMPLETED:
     FBFB  FDE1             9403           POP       ly
    FBFD   C9               9404           RET
                            9405   ;
                            9406   SSBB  STEERS HSS Se SSssreseresrsssosssessessrssrsssssssesesssseszezeszrs=
                            9407   ¢BRSB See T SSST SSS TSHsesrersssesr  esrsessssessssssssesssssssssserszrrze
                            39408  »BSSSSSSHETSSSSSSSSSSSSSSSSSSRSSSSSTS     SSS SSS SSSSessssssssssessseesszsszs
                            9409   ;

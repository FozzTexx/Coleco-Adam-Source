                           1 780"
                           3  NAME “OS7PRIME~
                           4
                           5 DESCRIPTION MACRO
                           6          -GOTOENDESCRIPTION
                           7
                           8  Author:         Coleco Industries  Inc.
                           9                  Advanced Research &  Development  - Software  Engineering
                          10  Userid:         Os
                          11  Starting date:  A long long time ago  in a galaxy  far  far away...
                          12
                          13. Prom release Date: 24 Nov 1982. for  internal  use only
                          14  Prom release Rev: 7B
                          15
                          16  Prom release Date: December 28, 1982
                          17  Prom release Rev: 7PRIME
                          18
                          19  Header Rev: 2
                          20
                          21  SEEKS  AASAAAAAARAAAAREAAAEAEERKAAEARERKAEARAEEAAERARERACEAEREKREAKAEKKEKAKRERKERKEKRKKKEK
                          22  *                                                                          *
                         23   *                    ColecoVision Operating  System                        *
                         24   *                   Absolute Listing ( Rev  7PRIME  )                      *
                         25   *                     (c) Coleco Industries  1982                          *
                         26   *                                                                          ®
                         e7   *                        *** Confidential  ***                             *
                         26   *                                                                          *
                         29   SBESTARAKAAAEKAKAAEARKAAAEARAETKAKAEREHAAAAAAEAEKERERAEREREAEEZAEEERERKEEKAKEAR
                         30
                         31
                         32         This listing has the actual addresses  of the  start  of OS routines
                         33
                         34         Rev History (one line note indicating  the change)
                         35        |
                         36         Rev.   Date                  Change
                         37          4     14feb1983           Filler  locations changed   to OFFH to
                         38                                    reflect OS 7PRIME.   Prom  release date
                         39                                    changed  to December  28,  1982 from May
                         60                                    1982.  Name  change  to OS7PRIME   to
                         41                                    reflect majority  of  versions  in the                                                                        °
                         42                                    field at  this date.
                         43
                         44          3     24nov1982           Timing change  to shorten   LOGO delay
                         45                                    Title changes  to JMPTABLES   and OSSR EQU
                         46          2     60ct1982            Minor comment  modifications
                         47          1     23sept1982          OS7  as one  absolute  file
                         48          0     May 1982            OS7  listing  by module
                         49
                         50 ENDESCRIPTION:
                         51          MEND
                         52  PROG                                                                                                                          .
                         55;        Operating system sound routine EQUATES
                         56 ;       FILE NAME: OSSR.EQU
                         57 ;       gan Equates sere
                         58 ;       Dedicated Cartridge RAM locations
             <7020>      59 DEDAREA EQU 7020H       sthe start of the RAM  area dedicated   to  sound  routines
             <7020>      60 PTR TOLST OF  SND_ADDRS EQU DEDAREA+0
             <7022>      61 PTR TO SON O  EQU;DEDAREA+2
             <7024>      62 PTR TO SON.1  EQU DEDAREA+4
             <7026>      63 PTR TOS OM _2 EQU DEDAREA+6
             <7028>      64 PTRTO  SON 3  EQU DEDAREAtS
             <702A>      65 SAVECTRL  EQU DEDAREA+10
                         66 ;       Attenuation level codes
             <000F>      67 OFF     EQU OFH         ;OFF (NO SOUND)
                         68 ;       Sound outputport
             <O0FF>      69 SOUND_PORT EQU OFFH    ;data to sound chip thru  this port
                         70 ;       Special byte 0 codes
             <003E>      72 SEFFECT EQU 62
             <0000>      73 ENDSDATA EQU 0
                         74;        Offsets within an SxDATA song data area
             <0000>      75 CH      EQu 0
             <0000>      76 SONGNO  EQU 0
             <0001>      77 WEXTNOTEPTR EQU 1
             <0003>      78 FREQ    EQU 3
             <0004>      79 ATW     EQU 4
             <0004>      80 CTRL    EQU 4
             <0005>      81 NLEN    EQu 5
             <0006>      82 FPS     EQU 6
             <0006>      83 FPSV    EQU 6
             <0007>      84 FSTEP   EQU 7
             <0008>      85 ALEN    Equ 8
             <0008>      86 ASTEP   €EQu8
             <0009>      87 APS     EQU 9
             <0009>      88 APSV    EQU 9
                         89 ;       song end codes
             <0010>      90 CHOEND  EQU 000100008
             <0050>      91 CHIEND  EQu 010100008
             <0090>      92 CH2END  EQuU100100008
             <0000>      93 CH3END  EQU 110100008
             <0018>      94 CHOREP  EQU 000110008
             <0058>      95 CHIREP  EQU 010110008
             <0098>      96 CH2REP  EQU 100110008
             <0008>      97 CH3REP  EQU 110110008
                         98 ;       channel numbers, B7 -B6
             <0000>      99 CHO     EQu 0
             <0040>     100 CH1     Equ 010000008
             <0080>     101 CH2     EQU 100000008
             <00cO>     102 CH3     EQU 110000008
                        103 ;       [page]
                        104  PROG
                        105
                         107
                         108  ;               Modified  February  14, 1983.  Filler areas  were  changed
                         109  ;               to OFFH  to reflect  OS7PRIME.   Also minor  comment  changes
                         110  ;               were made  to clarify  O55AAH for test cartridge   condition.
                         113
                         114  * EXTERNAL ROUTINES LINKED  INTO OS
                         115                                  |
                         116                 sEXT REG WRITE                     ;VIDEO  DRIVERS
                         117                 ;EXT REG READ
                         118                 ;EXT VRAM WRITE
                         119                 ;EXT VRAM READ
                         120                 ;EXT INIT QUEUE
                         121                 sEXT WRITER_
                         122                 ;EXT REGWRITEQ                     PASCAL   CALLS
                         123                 ;EXT VRAM WRITEQ
                         124                 ;EXT VRAM_READQ
                         125                 ;EXT INIT QUEUEQ
                         126
                         127                 sEXT POLLER                        ; CONTROLLER   ROUTINE
                         128                 ;EXT UPDATESPINNER
                         129                 ;EXT CONTSCAN
                         130                 ;EXT DECODER_
                         131
                         132                 EXT  INIT SOUND                    ; SOUND  ROUTINES
                         133                 ;EXT ALL_OFF
                         134                 sEXT JUKEBOX
                         135                 ;EXT SNOMANAGER
                         136                 ;EXT PLAYSONGS
                         137                 sEXT INITSOUNDQ                    ; PASCAL  CALLS
                         138                 sEXT JUKEBOXQ
                         139
                         140                 sEXT INITTIMER  |                  ; TIME   MGMT ROUTINES
                         141                 sEXT FREESIGNAL  _
                         142                 sEXT REQUESTSIGNAL   _
                         143     |           sEXT TESTSIGNAL
                         144                 sEXT TIMEMGR_
                         145                 sEXT INITTIMERQ                    ; PASCAL  CALLS
                         146                 sEXT FREESIGNALQ                                                                                                                      ;
                         147                 sEXT REQUEST SIGNALQ
                         148                 sEXT TESTSIGNALQ
                         149
                         150                 sEXT INITTABLE  _                  7TABLE MA
                         151                 sEXT GETVRAM_
                         152                 ;EXT PUTVRAM_
                         153                 sEXT INITSPR  ORDER_
                         154                 sEXT WRSPR  NM TBL_
                         155                 sEXT INITTABLEQ                    ;PASCAL  CALLS
                         156                 ;EXT GETVRAMQ
                         157                 ;EXT PUTVRAMQ                                                                                                      .
                         158                 -EXT INITSPR ORDERQ
                         159                 sEXT WRSPR NM  TBLQ
                         160
                         161                 sEXT ACTIVATE                      ; GRAPHICS  ROUTINES
                         162                 -EXT PUTOBJ
                         163                 7EXT RFLCTVERT
                             164                   EXT    RFLCT HOR
                             165                   EXT   ROT  90
                             166                   EXT   EWLRG
                             167                   EXT   PUTOBJO                               ;  PASCAL   CALLS
                             168                   EXT   ACTIVATEQ
                             169
                             170                   ;EXT  GAME  OPT                             ;DISPLAYS    THE  GAME  OPTION SCREEN
                             171                   ;EXT  LOAD  ASCII                           LOADS    ASCII   CHARACTER  GENERATORS
                             172                   EXT   FILL  VRAM_                           FILLS    DESIGNATED    AREA OF VRAM WITH VALUE
                             173                   EXT   MODE  1                               ;SETS   UP  A DEFAULT   GRAPHICS MODE 1
                             174
                             175
                             176  *  “HIDDEN  EXTERNALS”
                             177
                            178                    3EXT                  DISPLAY  LOGO
                             179                   sEXT                  CONTROLLER   INIT
                            180                    sEXT                  ASCII  TBL
                            181                    sEXT                  WUMBER  TBL
                            182
                            183
                            184   SRAKASAATAEAAAEAAAEEEAKAARRERER        EXPORTS   SRARAARAARARAEKRARARAREEERAKRERKEE
                            185
                            186   *  ENTRY  POINTS TO OS  ROUTINES
                            187
                            188                     GLB  INIT  TABLE                           TABLE    MA
                            189                     GLB  GET  VRAM
                            190                     GLB  PUT  _VRAM
                            191                     GLB  INIT  SPR  ORDER
                            192                     GLB  WR_SPR_WM   TBL
                            193                     GLB  INIT  TABLEP                          PASCAL    CALLS
                            19%                     GLB GET  VRAMP
                            195                     GLB  PUT_VRAMP
                            196                     GLB  INIT  SPR  ORDERP
                            197                     GLB  WR_SPR_NM   TBLP
                            198
                            199                     GLB  WRITE  REGISTER                       ; VIDEO   DRIVERS
                            200                     GLB  READ  REGISTER                   |
                            201                     GLB  WRITE  _VRAM
                            202                     GLB  READ  VRAM
                            203                     GLB  INIT  WRITER                                                                                                                              ,
                            204                     GLB  WRITER
                            205                     GLB  WRITE_REGISTERP                       ; PASCAL   CALLS
                            206                     GLB  WRITE  VRAMP
                            207                     GLB  READ  VRAMP
                            208                     GLB  INIT  _WRITERP
                            209
                            210                     GLB  POLLER                                ; CONTROLLER    ROUTINES
                            211                     GLB  UPDATE  SPINNER
                            212                     GLB  CONTROLLER   SCAN
                            213                     GLB  DECODER
                            214
                            215                     GLB  SOUND INIT                           ;  SOUND  ROUTINES
                           216                      GLB  TURN OFF  SOUND
                           217                      GLB  PLAY IT
                           218                      GLB  SOUND MAN
                            219                     GLB  PLAY SONGS
                            220                     GLB  SOUND  INITP                         ; PASCAL    CALLS
                             221                    GLB  PLAY ITP
                             222
                             223                    GLB  INIT TIMER                           ; TIME  MGMT  ROUTINES
                             224                    GLB  FREE SIGNAL
                             225                    GLB  REQUEST SIGNAL
                             226                    GLB  TEST SIGNAL
                             227                    GLB  TIME MGR
                             228                    GLB  INIT _TIMERP                         ; PASCAL  CALLS
                             229                    GLB  FREE SIGNALP
                             230                    GLB  REQUEST  SIGMALP
                             231                    GLB  TEST SIGNALP
                             232
                             233                    GLB  STACK                                ; MISC  GLOBALS
                             234                    GLB  VDPSTATUS   BYTE
                             235                    GLB VDP_MODE_  WORD
                             236                    GLB  AMERICA
                             237                    GLB MUX  SPRITES
                             238                    GLB DEFER   WRITES
                             239                    GLB RAND  GEN                             3Can be  called  from   Pascal
                             240                                                              ; or assembly    language
                             241                    GLB  PUTOBJ                               3 GRAPHICS  ROUTINES
                             242                    GLB  ACTIVATE
                             243                    GLB  REFLECT VERTICAL
                             264                    GLB  REFLECT  _WORIZONTAL
                             245                    GLB  ROTATE_90
                             246                    GLB  ENLARGE
                             247                    GLB  PUTOBJP                              : PASCAL  CALLS
                             248                    GLB  ACTIVATEP
                             249
                             250                    GLB  GAME_OPT                             GAME  OPTIONS   DISPLAY
                             251                    GLB  LOAD  _ASCII                         sLOADS  ASCII  CHARACTER    GENERATORS
                             252                    GLB  FILL_VRAM                            ;FILLS  DESIGNATED   AREA   OF  VRAM   WITH  VALUE
                             253                    GLB  MODE 1                               7SETS UP  A DEFAULT    GRAPHICS    MODE  1
                             254                    GLB ASCIT  TABLE                          ;POINTER  TO  TABLE  OF  ASCII   GENERATORS
                             255                    GLO NUMBER  TABLE                         POINTER   TO  TABLE  OF  0-9   PATTERN   GENERATORS
                             256
                      258  RBRERRAEKAERAARAAAARAKCARTRIDGE ROM DATA AREA RRAKAKRAKEARARERARAKERKAREE
                      259
                      260                 GLB             CARTRIDGE
             <8000>  261  CARTRIDGE       EQU             8000H
                     262  * THIS  ISTHE MEMORY LOCATION TESTED TO SEE  IFA CARTRIDGE IS PLUGGED
                     263  *  IN.IF IT CONTAINS THE PATTERN AASSH THE OS ASSUMES THAT A GAME
                     264  * CARTRIDGE IS PRESENT. IF  ITCONTAINS THE THE PATTERN 55AAH, THE OS
                     265  * ASSUMES THAT A TEST CARTRIDGE  ISPRESENT.
                     266
                     267                  GLB             LOCALSPR  TBL
             <8002>  268  LOCAL SPR TBL   EQU-.           8002H
                     269  * THIS IS A POINTER TO THE CPU RAM COPY OF THE SPRITE NAME TABLE. THE
                     270  * TABLE COPY IS USED WHENEVER ONE LEVEL OF  INDIRECTIONIS DESIRED IN
                     271  * ADDRESSING THE VRAM TABLE. FOR EXAMPLE WHEN.USING THE OS SPRITE
                     272  * MULTIPLEXING SOFTWARE.
                     273
                     274                  GLB             SPRITEORDER
             <8004>  275  SPRITEORDER     EQU             8004K
                     276  * THIS IS A POINTER TO THE CPU RAM SPRITE ORDER TABLE. THIS TABLE IS
                     277  * USED TO ORDER THE LOCAL SPRITE NAME TABLE.
                     278
                     279                  GLB             WORKBUFFER
            <8006>   280  WORK BUFFER     EQU             8006H
                     281  * THIS IS A POINTER TO A FREE BUFFER SPACE IN RAM. THE OBJECT ORIENTED
                     282  * GRAPHICS ROUTINES USED THIS BUFFER FOR TEMPORARY STORAGE.
                     283
                     284                  GLB             CONTROLLERMAP
            <B8008>  285  CONTROLLER MAP  EQU             8008H:
                     286  * THIS IS A POINTER TO THE CONTROLLER MEMORY MAP THAT IS MAINTAINED BY
                     287  * THE HIGH-LEVEL CONTROLLER SCANNING AND DEBOUNCE SOFTWARE.
                     288
                     289                  GLB             STARTGAME
            <800A>   290  STARTGAME       EQU             800AH
                     291  * THIS IS A POINTER TO THE START OF THE GAME.
                     292 —
                    (293  RRAARARKRARRKARURKER RESTART AND INTERRUPT VECTORS RERKEKEKRKAKKKKKRKKKRAEK
                     294  * THESE ARE ADDRESSES IN CARTRIDGE ROM OF VECTORS WHICH MUST BE PLACED
                     295  * THERE BY THE CARTRIDGE PROGRAMMER. WHEN AN INTERRUPT OR RESTART
                     296  * OCCURS, THE OS VECTORS IT THROUGH THIS AREA. THE CARTRIDGE PROGRAMMER
                     297  * SHOULD PLACE A JUMP TO HIS OWN INTERRUPT HANDLER IN THE APPROPRIATE
                     298  * LOCATION.
                     299
                     300                  GLB             RST BHRAM  ~
            <800C>   301  RST8H RAM       EQU             800CH
                     302  * THIS IS THE RESTART 8 SOFT VECTOR.
                     303        |
                     304                  GLB             RST_10H_RAM
            <800F>   305  RST10H  RAM                     B00H
                     306  * THIS IS THE RESTART 10 SOFT VECTOR.
                     307
                     308                - GLB             RST 18HRAM
            <8012>   309 RST  18H RAM     EQU             8012H
                     310 *  THIS IS THE RESTART 18 SOFT VECTOR.
                     311
                     312                  GLB             RST 20HRAM
            <8015>   313 RST  20H RAM     EQU             8015H
                     314 *  THIS IS THE RESTART 20 SOFT VECTOR.
                         315
                         316                   GLB                RST 28H  RAM
              <8018>     317   RST28H  RAM     EQU                8018H
                         318   * THIS  ISTHE RESTART  28  SOFT  VECTOR.
                         319
                         320                   GLB                RST 30H  RAM
              <B01B>     321  RST 30H  RAM =   EQU                8016H
                         322  *  THIS IS THE RESTART 30  SOFT   VECTOR.
                         323
                         324                   GLB               IRQ_INT  VECT
              <BO1E>     325   IRQ_INTVECT     EQuU               BOTEH
                         326  *  THIS IS THE MASKABLE  INTERRUPT   SOFT   VECTOR
                         327
                         328                   GLB               WMI INT  VECT
              <8021>     329  NMI INT VECT     EQU                8021H
                         330  *  THIS IS THE NMI SOFT  VECTOR.
                         331
                         332                   GLB                GAME NAME
              <8024>     333  GAME  NAME       EQU                8024H
                         334  *  FROM HERE TO STARTGAME   THERE   SHOULD  BE  A  STRING OF  ASCII  CHARACTERS
                         335  *  WAMES THAT HAS THE FOLLOWING    FORM:
                         336  *
                         337  *                 GAME/MAKER_OF    THIS  GAME/COPYWRITE   YEAR.
                         339  *    FOR EXAMPLE:
                         340  *
                         341  *       “DONKEY KONG/NINTENDO/  1982"
                         342
                         343  *  IMPORTANT NOTE *****
                         3446
                         345  *                #ees IT  1S  THE RESPONSIBILITY     OF THE  ****
                         346  *                *#** CARTRIDGE   PROGRAMMER    TO  PLACE   ****
                         347  *                **#* THESE  CODES   IN  CARTRIDGE   ROM
                         348
                              350
                              351   RAARARAARAAAKARAAARAAAAAAARARAKKRAKAARARARKAAAEARAERAEARARERERAARARRERAKARREEKE
                              352   *                                                                                      ®
                             353    *                          OPERATING    SYSTEM   ROM  CODE                             *
                             354    *                                                                                      *
                             355    RERARARAAAAARAAAARARAAAAAKARARAAEKKAKAAAREERAAARAREKRAREREARAREARAKRAREAAREEK
                             356
                             357    REAAAKRAKAARAAAARARAKARAARAARRAREEE  PAGE   ZERO  SREKRAARRESRAAAAARAARRARRRARARKAEE
                             358    * PAGE  ZERO   CONTAINS   THE  RESTART   VECTORS,    INTERRUPT   VECTORS,   AND
                             359    * THE  INTERRUPT   VECTORING    SOFTWARE,    AS  WELL  AS  THE  DEFAULT   HANDLERS
                             360    * FOR  INTERRUPTS    AND  RESTARTS.
                             361
                             362    * BOOT-UP   ROUTINE
                             363
                             364    * THE  BOOT-UP   ROUTINE   HANDLES   POWER   ON  RESETS   AND  RESTARTS   TO  0. IT
                             365    * INITIALIZES    THE  STACK   AND  JUMPS   TO  THE POWER   UP   ROUTINE.
                             366
                             367    * BEGIN   BOOT-UP
                             368  BOOT  UP             PROG
                             369
                             370   *    KICK   STACK
                             371                       LD                  SP,  STACK
                             372
                             373   *    JUMP   TOPOWER   _UP
                             374
                             375                       JP POWER   UP
                             376   END  BOOTUP
                             377   *  END  BOOT-UP
                         379
                         380  * RESTART VECTORS
                         381
                         382  * THE FOLLOWING ARE THE 8  PROGRAMMABLE   RESTARTS.   FOR EACH OF  THE
                         383  * RESTART LOCATIONS BELOW  THERE  IS A  VECTOR   IN CARTRIDGE ROM.
                         384  * TO USE A RESTART, THE PROGRAMMER   MUST  PLACE   THE ADDRESS OF  THE
                         385  * ROUTINE WHICH HE/SHE WISHES   TO ACCESS  THROUGH   THE RESTART  AT  THE
                         386  * CORRSEPONDING VECTOR. THEREAFTER   EVERY  TIME   THAT RESTART  IS
                         387  * EXECUTED, THE CARTRIOGE  PROGRAMMER'S   ROUTINE   WILL BE CALLED.
                         388
    0006  FFFF           389                  HEX               FF,FF                    Filler
    0008  ¢3800C         390  RST8H           JP RST8H  RAM
                         391
    0008  FFFFFFFFFF     392                  HEX               FF,FF,FF,FF,  FF         Filler
    0010  C3800F         393  RST10H          JP RST 10H RAM
                         394
    0013  FFFFFFFFFF   © 395                  HEX               FF,FF,FF,FF,  FF         Filler
    0018  C38012         396  RST18H          JP RST_18H_RAM
                         397
    0018  FFFFFFFFFF     398                  HEX               FF,FF,FF,FF,FF           Filler
    0020  ¢38015         399  RST20H          JP RST_20H_RAM
                         400
    0023  FFFFFFFFFF     401                  HEX               FF,FF,FE,FF,  FF         ;Filler
    0028  C38018        402   RST28H          JP RST28H  RAM
                        403
    0028  FFFFFFFFFF    404                   HEX               FF,FF, FF,FF, FE         Filler
    0030  C3801B        405   RST_30H         JP RST30H  RAM
                        406
                         408
                         409  * MASKABLE   INTERRUPT   VECTORING   SOFTWARE
                         410
                         411  * A MASKABLE   INTERRUPT   OCCURRING   IN  THE SYSTEM   IS EQUIVALENT   TO  A
                         412  * RESTART  TO  38H.  THUS,  THE  MASKABLE   INTERRUPT   IS VECTORED   IN EXACTLY
                         413  * THE  SAME WAY  AS  THE  VARIOUS  RESTARTS   GIVEN  ABOVE.   IN ORDER  TO  USE
                         414  * THE  INTERRUPT,   TWE CARTRIDGE   MUST  PLACE   THE  ADDRESS  OF  HIS/HER
                         415  * INTERRUPT   HANDLER  IN  THE  IRQ INT VECT   LOCATION   IN  CARTRIDGE  ROM.
                         416
                         417 *  THE  CARTRIDGE  PROGRAMMER    IS RESPONSIBLE    FOR  SAVING  ANY  REGISTERS
                         418 *  WIS/HER  OWN  INTERRUPT   HANDLERS   MAY  USE,  AND  FOR RE-ENABLING
                         419 *  INTERRUPTS   IF WE/SHE   WEEDS  THEM  TO  BE RE-EWABLED.
                         420
                         421 *  MASKABLE  INTERRUPT
   0033  FFFFFFFFFF      422                    HEX                FF, FF,FF,FF,  FF          Filler
   0038                  423  IRQINTERRUPT                         :38H
   0038  C3801E          426                    JP                 (1RQ_INT_VECT)
                         425
                         426 RRAAKAAEARARARAAREARKEKARE   RANDOM   LIME   GENERATOR    RRRARAARRAKARERARKAKRKARKRKEKREK
                         427
                         428 *  (PLACED  HERE  FOR  PURPOSES  OF  CODE  COMPACTION)
                         429
                        430  *  Random  mmber   generator   (psuedo)   for  a 16  bit  value
                        431  *  This  routine  ‘exclusive   or's  the  15th  and  8th bit
                        432  *  together.    It then  rotates   the entire   quantity   to the
                        433  *  left and  inserts   the  ‘exclusive  or'ed   bit  into  the rightmost
                        434  * bit.    Upon  leaving  it stores   the  random  #  in a  specified
                        435  * memory   location.
                        436
                        437  * The  random  number   can be  accessed   from  the  global  location
                        438  * RAND _NUM  or  the HL  pair  or the  Accumulator.
                        439
   0038                 440  RAND GEN :
   0038  2A73C8         441               LD  =HL,  [RANDNUM)
   003C  CB7C           442               BIT   7,H
  0040   2806           443               JR          ON
                        444                                        715th  bit  is on
  0042  CB44            445               BIT   O,H
  0044  2806            446               JR  = 2,SET              ;For  10 quantity   then  set
  0046   1807           447               JR   =RESET              ;For  11 reset                                                                                                       ,
  0048                  448  WOTON:
  0048  CB44            449              BIT   O,H
  004A  2803            450              JR                        ;For 00  reset
                        451                                       For   01  fall  through   to set
  004C                  452  SET:
  004C  37              453              SCF
  0040  1801            454              JR    CARRY READY
  004F                 455  RESET:
  004F  B87            456               OR    A
  0050                 457  CARRY  READY:
  0050  cB15           458               RL    L
  0052  CB14           459               RL    oH                                                                                                                     ,
  0054  2273C8         460               LD    {RAND NUM)  ,HL
  0057  7D             461               LD    A,L
  0058  C9             462               RET
  0059                 463  AFTER  RANDOM
                       464
                        465  SASRSAAERAKARARAAREAEAAAAARAEKAKARERAEAAARARAERKAAAARARARARAEKAAAEERARERAEREE
                        466
                          468
                          469  *  THE WMI VECTORING SOFTWARE AND DEFAULT  HANDLER
                          470
                          471  *  WHEN AN NMI IS RAISED BY THE VDP  IN THE  COLECOVISION SYSTEM,   IT
                          472  *  CAUSES THE CPU TO RESTART TO 66H.  THE VECTORING  SOFTWARE FOR  THE
                          473  *  WMI IS IDENTICAL TO THAT FOR THE MASKABLE   INTERRUPT EXCEPT  THAT
                          474  *  IT GETS ITS VECTOR FROM WMIINT VECT   INSTEAD  OF IRQ_INT_VECT.
                          475
                          476  *  AGAIN THE CARTRIDGE PROGRAMMER IS RESPONSIBLE,   IN HIS/HER OWN
                          477  *  INTERRUPT HANDLERS FOR SAVING AND RESTORING   THE PROCESSOR STATE
                          478  *  WHEN NECESSARY, AND FOR CLEARING THE  VDP  CONDITION BY READING   THE
                          479  *  VDP STATUS REGISTER.
                          480
    0059 FFFFFFFFFF       481                   HEX             FF,FF,FF, FF, FF        sFiller
   OOSE  FFFFFFFFFF       482                  HEX              FFLFF, FF,FF, FF        Filler
   0063  FFFFFF           483             |    HEX              FF,FF, FF               Filler
                          484  *  NON-MASKABLE INTERRUPT
  0066                    485 NMI_  INTERRUPT
   0066  ¢38021          686                    JP              (WHI INT VECT)
                          487
                             489
                             490    **ttteeanenetenaneeeneeRe            OS ROM   DATA  AREA   ***teunsenenennseeaneeennn
                             491
    0069    3C               492    AMERICA              DEFB                 60
                             493    *  THIS  BYTE  SHOULD     BE  USED   WHENEVER    THE  CARTRIDGE    PROGRAMMER     WANTS    TO
                             494    *  SET  UP  REAL-TIME     COUNTERS.    IT  HAS  A  VALUE   OF  60  FOR   COLECOVISIONS
                             495    *  WARKETED   IN   THE  USA   ANO  50  FOR  EUROPEAN    UNITS.    USE  OF  THIS   BYTE
                             496    *  EWSURES   CARTRIDGE     COMPATIBILITY      AT  LEAST   WHERE   REAL-TIME    COUNTING
                             497    *  IS  CONCERNED.
                             498
    006A    16AB             499   ASCII_TABLE      —    DEFW   ASCII   TBL
                             500   *   THIS   IS THE  ADDRESS     OF  THE  ROM  PATTERN    GENERATORS     FOR  UPPERCASE
                           509     *   ASCII   WHICH  ARE   CONTAINED     WITHIN   THE  OPERATING     SYSTEM.
                              02
    006C   1623              503  NUMBER    TABLE              NUMBER    TBL
                             504   *   THIS   IS THE  ADDRESS     OF  THE  ROM  PATTERN    GENERATORS     FOR  THE  NUMBERS
                             3ie   *   0.9  WHICH  ARE   CONTAINED     WITHIN   THE   OPERATING    SYSTEM.
                           200  REASARAAATAAAARARERARERES                                  RRREKEARAAAERRALRARKRAEE
                           510  ;
                           511  ;B00TUP            SINCE  THE  VIDEO  GAME  SYSTEM   MAY  BE STARTED  UP  WITH  A
                           512  ;                 GAME   CARTRIDGE,   KEYBOARD   MODULE,   OR BOTH  (OR  NOTHING)
                           513  ;                  INSTALLED   AT  BOOT UP,  THE  SOFTWARE   MUST  PERFORM  THE
                           514  ;                  FOLLOWING;
                           515  >
                           516  ;                        A.   IMITIALIZE   THE  INTERRUPT   VECTORS.
                           517  ;
                           518  ;                        B.   IMITIALIZE   RESTART   VECTORS
                           519  ;
                           520  ;                        C.   TURN  OFF THE  SOUND   CHIP.
                           521  ;                                   |
                           522  ;                        D.   DETERMINE   IF A  CARTRIDGE   IS PLUGGED   IN.
                           523  ;                             IF SO,  BRANCH  TO  THE  CARTRIDGE   PROGRAM
                           524  ;                             ELSE,  WAIT  FOR CARTRIDGE.
                           525
                <0000>     526  FALSE             EQU                 0
                <0001>     527  TRUE              EQu                 1
                           528  * VALUES  FOR  BOOLEAN    FLAGS
                           529
                           530  * BEGIN POWER  _UP
                <O06E>     531 POWER UP           EQU                 $
                           532
                           533  *   IF  CARTRIDGE   = 55AAH   THEN   EXIT  TO START  GAME   (TEST)
    O06E   2A8000          534                    LD                  HL, (CARTRIDGE)
    0071   7D              535                    i)                  A,L
    0072   FESS            536                    cp                  55H
    0074   C20081          537                    JP                  NZ,NO TEST.
    0077   7C              538                    LD                  A,l
    0078   FEAA            539                    cP                  OAAH
    007A   C20081          540                    JP                  NZ,MO TEST.
    0070   2AB800A         541                    LO                  HL, [START GAME)
    0080   E9              542                    JP                  {Wt}
                           543
                           544  *   ELSE
   0081                    545  MO_TEST_
                           546
                           547  *   TURN  OFF  SOUND  CHIP                                                                                                                                       ,
    0081   CD1FD6          548                    CALL   TURN OFF  SOUND
                           549
                           550  *   INITIALIZE   RANDOM   NUMBER  GENERATOR
    0084   210033          551                    LD                  HL,33H
                             3
                           554  *   CLEAR  CONTROLLER   BUFFER   AREAS
    008A   CD1105          555                   CALL                CONTROLLER   _INIT
                           556
                           557  *  DEFER   WRITES   := FALSE
    008D   3£00            558                    LD                  A,FALSE                                                                                                ‘
    OO8F   3273C6          559                    LD                  (DEFER WRITES)   ,A
                           560
                           561  *   MUX SPRITES   :=  FALSE
    0092   3273C7          562                    LO                  [MUX SPRITES)  ,A
                           563
                           570   RRERAAARKARARSRAAKARRRARKEE        SYSTEM   RAR AREA   REKARTKARAARARKARAAARAEKAAERE
                           571                        DATA
   0000                    572                       DEFS                 73BAH   ;Added   to offset   to  first   location
               <73BA>      573   SYSTEM  RAM  AREA    EQU                 $
                           574   *  THIS  IS  THE  RAM   AREA  DEDICATED    TO THE  BASIC   OS  NEEDS.  IT   INCLUDES   THE
                           575   *  STACK,  VARIOUS    STATUS   VARIABLES,    AND  ALL  THE  VARIABLES   USED   BY  OS
                           576   *  ROUTINES.
                           577
               <7389>      578   STACK                Equ                 SYSTEM  RAM  AREA-1
                           579   *  THIS  1S  THE  TOP  OF   THE  STACK
                          580
                           581   ;                    COMN
                          582    ;                  DEFS                  9
                          583                        DATA
    738A                  584    PARAM AREA:
   738A                   585    INIT SOUND   DATA:
   738A                   586  PRM   AREA:
   738A                   587    IWIT TIME  DATA:
   T3BA                   588    TEMP1:
   T3BA                   589                  DEFS   1
   7388                   590                  DEFS   1
   738C                   591    TEMP2:
    738C                  592                  DEFS   1
   7380                   593                  DEFS   1
    73BE                  594   SIGNAL_NUM:
    T3BE                  595                  DEFS   1
    738F                  596   REPEAT  SIG   CODE:
    738F                  597                 DEFS    1
   73c0                   598   TIMER  LENGTH:
   73CO                   599                 DEFS   1
   73C1                  600                  DEFS   1
   73C2                   601   TEST  SIG  _WUM:
   T3C2                   602                 DEFS   1
                          603
                          604
                          605   *  THIS  IS  THE  COMMON    PARAMETER   PASSING   AREA  AND   THE  HOLE  IN  THE  DATA
                          606   *  AREA  THAT   IS  PROVIDED    TO MAKE  ROOM   FOR  IT.
                          607
  73C3                    608  VDP   MODE  WORD      EFS                 2
                          609   *  THE  VDP  MODE   WORD  CONTAINS    A COPY  OF  THE  DATA   IN THE  FIRST   TWO  VOP           .
                          610   *  REGISTERS.    BY  EXAMINING    THIS  DATA,  THE  OS  AND  CARTRIDGE    PROGRAMS
                          611   *  CAN MAKE   MODE-DEPENDENT      DECISIONS   ABOUT   THE  SPRITE   SIZE  OR  VRAM
                         612    *  TABLE  ARRANGEMENT.      THIS  WORD   IS MAINTAINED    BY THE  WRITE REGISTER
                         613    *  ROUTINE   WHENEVER    THE  CONTENTS   OF  REGISTERS    0 OR  1 ARE  CHANGED.
                         614
                         615    *    IMPORTANT    NOTE   *****
                         616
                         617    *                    wane   IT  IS THE  RESPONSIBILITY     OF THE   ****
                         618    *                    **8*  CARTRIDGE    PROGRAMMER    TO MAKE       “ee
                         619    *                    *e*®  SURE   THAT  NON-STANDARD    USE  OF     ‘****
                         620    *                    see®   THE  VDP REGISTERS    DOES  NOT  MAKE   ****                                                                              °
                         621    *                    see%  THE   DATA  IN THIS  WORD   INVALID     ****
                         622
   73c5                  623    VDP_STATUS    BYTE   DEFS                1
                         624    * THE  DEFAULT    HANDLER    FOR  THE  NMI,  WHICH  MUST   READ  THE  VDP  STATUS
                         625    * REGISTER    TO  CLEAR   THE  INTERRUPT    CONDITION,   PLACES   ITS  CONTENTS
                         626    * HERE.   THIS  BYTE   IS  THE   MOST  ACCURATE   REPRESENTATION     OF THE  ACTUAL
                          627   * VDP STATUS  THAT  IS AVAILABLE   TO THE  CARTRIDGE   PROGRAMMER  PROVIDED
                          628  *  THAT THE VDP   INTERRUPT  IS ENABLED   ON-CHIP
                          629
   73C6                   630  DEFER  WRITES                        1
                          631  *  DEFER WRITES   ISA  BOOLEAN  FLAG  WHICH  IS  SET TO  FALSE  AT POWER UP
                          632  *  TIME, SHOULD  BE SET  TO  TRUE  ONLY  IF THE CARTRIDGE   PROGRAMMER  WISHES
                          633  *  TO DEFER WRITES  TO  VRAM.  IF  THIS FLAG   IS  TRUE  THEN  THE WRITER
                          634  *  ROUTINE MUST  BE CALLED   REGULARLY  TO  PERFORM  DEFERRED   WRITES.
                          635
   73C7                   636 MUX  SPRITES       DEFS               1
                          637  *  THIS BOOLEAN  FLAG  WITH DEFAULT   FALSE  VALUE  SHOULD  BE  SET TO TRUE IF
                          638  *  THE CARTRIDGE  PROGRAMMER   WISHES  ONE  LEVEL  OF  INDIRECTION  TO BE
                          639  *  INSERTED INTO  SPRITE  PROCESSING   BY  HAVING  ALL  SPRITES  WRITTEN TO
                          640  *  A LOCAL SPRITE NAME  TABLE   BEFORE  BEING  WRITTEN   TO VRAM.  THIS  AIDS
                          641  *  SPRITE MULTIPLEXING   SOLUTIONS   TO THE  FIFTH  SPRITE  PROBLEM.
                         642                         |
                         643                     GLB                RAND NUM
   73C8                   644  RAND  WUM         DEFS   2
                          645  *  THIS IS THE  SHIFT REGISTER   USED  BY  THE RANDOM  NUMBER   GENERATOR.
                          646  *  IT 1S INITIALIZED  AT  POWER-UP.
                        647            GLB PARAM,
                        648            PROG
   0098                   649  PARAM                                                  ,
   0098  EIESESOA6F       650          HEX £1,£3,E5, 0A, 6F,03,0A,03,67,£3,05,5E,    23,56, 23,E5
   OAS   7B82C28700       651          HEX 7B,B2,C2,B7,00,£1,5€,23,56,23,E5,     EB, 5E,23,56, 03
   0088  OAO7D2DA00       652          HEX 0A,07,D2,DA,00,03,€1,E3,   73,23,  72,23,01,E3, 2B, AF
   00C8  BCC2D0008D      653           HEX BC,C2,D0,00,BD,CA,06,00,£3,£5,EB,C3,A3,00,£1,£8
   00D8  ESESEIE3ES      654           HEX E3,€9,E1,E3,E5,  OF 67,08, 0A, 6F,E3,03,03,  1A,77,23
   OOE8  13E32BAFBD      655           HEX 13,€3,28,AF,80,C2,F4,00,8C,CA,F8,00,£3,C3,E5,00
   OOF8  E1C3C400   «=   «656          HEX £1,C3,C4,00
                         657    PROG
                        669         sEXT DECLSN ,MSNTOLSN,DECMSN ,ADD816
                        670         ;INCLUDE  OSSR EQU:0S:0   ;equates
    OOFF FEOO          674           ce 0                      sSET 2  flag if FSTEP  = 0
                       675   ;       IF (PSW, 1S,ZERO)         smote not  to be swept
   0101  2009          676           JR NZ,L20
   0106  3D            678             DEC A                     sSET 2  flag if NLEN  = 0
   0107  C8            679             RET 2                     sleave  if note over  with Z  flag SET
   0108  C9           681                RET                       sRET  with 2 flag RESET  [note  not over)
   0111  1600          687           LO 0,0
                       690  ;        IF (PSW,1S, ZERO)         :FPSV has  timed out
   0117 2015           691           JR WZ,L21
   O11E 30             696             DEC A                     SET  2 flag  if NLEN = 0
   O11F C8             697             RET 2                     jleave if sweep  over with  Z flag SET
   0126 cD0181         703               CALL ADDB16               ;FREQ = FREQ +  FSTEP
   012A CB96           705               RES2,  (HL)               sRESET B2 in hi  FREQ in case  add caused  >10   bit FREQ
                            712   ;        IDENT  ATNSWEE              ;Includes   ATN_SWEEP
                            713   oRRRAAAARAAEAKRARAAAEATERAKREK
                            714   :*       ATN.SWEEP           *
                            715   oRERARAERAAAARRERAERERARERES
                            716   ;.COMMENT )
                            717   ;See User's Manual  for  description
                            718   ;RETs 2 SET: if byte  8  is O  [means  sweep   is over,  or  note   was  never   swept)
                            719   ;RETs 2 RESET:  if sweep  in progress
                            720   ;)
                           721            GLB ATNSWEEP
                           722           sEXT DECLSN,DECMSN  ,MSNTOLSN
                           723           ;INCLUDE OSSR_EQU:0S:0     ;equates
    012F                   724   ATN SWEEP
                           725    ;       * RET with  Z  SET if byte  8  = 00
    012F   DD7E08          726            LD A,(1X+8)                ;Check  byte  8  for  no  sweep   code
    0132   FEOO            727            cp 0                       sZ  is set   if byte  8  =  0
    0134   C8              728            RET 2                      leave    if Z  set,  sweep   not  going
                           729    ;         * sweep  going,  so dec  APSV
    0135  DOES             730              PUSH IX                    ;point   HL  to APSV
    0137  €1              731               POP HL
    0138   1600            732              to 0,0
    O13A   1609            733              LO E,APSV
    013C   19              734              ADD HL,DE
    0130  CD0190           735              CALL DECLSN                sdec  APSV   [LSN  of  byte  9]
                           736   ;          IF (PSW, 1S,ZERO)          sAPSV   has  timed  out
    0140  2021             737              JR NZ,L22
                           738   ;            * dec ALEN   to see  if sweep  over
    0142  CDO1A6           739                CALL MSNTOLSN               sreload  APSV   from  APS
    0145  28               740                DEC WL                      spoint  to  ALEN   [# of  steps   in  the  sweep)
    0146  €D0190           741                CALL DECLSN                 ;dec  ALEN  [LSN  byte   8)
                           742   ;            IF (PSW,1S,NZERO)           ;sweep  not  over   yet
    0149  2816             743                JR 2,123
   0148   7E               745                  LDA,  (HL)                  ;MSN  A =  ASTEP
   014C   E6FO             746                  AND OFOH                    smask  LSN
   O14E   5F               747                  LD E,A                      7E  = ASTEP   | 0
   O14F   2B               748                  DEC HL                      point   HL  to  ATN
   0150   28               749                  DEC HL
   0151   28               750                  DEC HL
   0152   2B               751                  DEC HL
   0153   7E               752                  LD A, (HL)                  sMSN  A =  ATN
   0154   E6FO             753                  AND OFOH                    ;A  = ATN  | O
   0156   83               754                  ADD A,E                     ;MSN  A =  [ASTEP   +  ATN]  |  0
   0157   5F               755                  LD E,A                      ;E  = [ASTEP   + ATN)   |  0
   0158   7E               756                  LD A, (HL)                  ;A  = ATW  | freq   or  CTRL
   0159   E60F             157                  AND OFH                     ;mask  old  ATIN   A =  0  | freq   or CTRL
   015B   B3               758                  OR E                        sOR  in new  ATN
   015C   77               759                  LO (HL],A                   ;store  updated    value  back   into  song   data  area
   015D   F6FF             760                  OR OFFH                     ;RESET  2  flag,   sweep  not   over  yet
   O1SF   1802             761                  JR L22
                           762   ;            ELSE                        ;2 flag  is  SET:  sweep   over
   0161   3600             763   L23            LD {Hi} ,0                  ;set  byte  8  to  0 to  indicate    end  sweep
                           764   ;            ENDIF
                           765   ;          ENDIF
   0163   C9               766   122      RET
                           767   ;        END ;ATNSWEE
                         770  ;          - IDENT  UTIL                  ;Includes   UPATNCTRL  ,UPFREQ,
                         771                                          ;DECLSM,  DECHSN,  MSNTOLSN  ,ADD816,  PT_IX_TO   SxDATA,
                         772                                          ;LEAVE _EFFECT,  AREA SONG.   is
                         773  oRAVATRAARAAARUAARAARAAAAARARRE
                         775  :RERATARARARRAARARSEAARARAARE
                         776   COMMENT    )
                        77    “Perform   single   byte  update   of  the  snd  chip  noise  control    register   or  any
                        778   ;attenuation    register.    IX  is passed   pointing   to  byte  0  of  a song  data   area,  MSN
                        779   sregister   C  = formatted    channel   attenuation    code.
                        780   ;)
                        761             GLB  UPATNCTRL
                        782           ; INCLUDE   OSSR_EQU:0S:0      ;equates
    0164                783  UPATWCTRL
    0164  DD7E04        784             LD A, (IX*4)                  ;MSN  A  = ATN,  LSN  may  be  CTRL  data
    0167  CB61          785            BIT   4,C                      stest  for  ATN
                        786   ;         IF  (PSW,1S,NZERO)            ;ATW  is  to be  sent,  move   it  to  the  LSN
    0169  2804          787             JR 2,124                                            .
    0168  OF            788               RRCA                          ;swap   nibbles
    016C  OF            789               RRCA
    0160  OF            790               RRCA
   O16E   OF            791               RRCA                          ;LSN  A  = ATN
                        792  ;         ENDIF
   O16F  E60F           793  L264      AND  OFH                       mask   @Se
   0171  Bi            79%             OR  C                             =  formatted   register#    | ATM  or  CTRL
   0172  O3FF           795            QUT   [SOUND PORT)  ,A         -output  ATW  or  CTRL  data
   0174  C9            796             RET
                        797  stenaeannehaanaNnewasansNane
                       798   ;*        UPFREQ                  7
                        T99  eRRRRKAEKARARAAARAARAKEARKEKE
                        800  ;.COMMENT    >
                        801  ;Perform   double   byte   update   of  a sound  chip  frequency    register.     IX  is passed
                        802  ;pointing    to byteO   of  a  song  data  area,  MSN  register   D  =  formatted   channel
                        803  ;frequency    code.
                       804   ;)
                        805            GLB  UPFREQ
   0175                 806  UPFREQ
   0175  DD7E03         807            LDA,   (IX+FREQ)                     F2 F3  F4  FS F6  F7  FB  FO
   0178  E60F           808            AND  OFH                              0  0   O   O F6  F7  FB  F9
   O17A  B2             809            OR  D                                 formatted   reg#  |  F6  F7  FB FO
   0178  D3FF           810            QUT  [SOUND  PORT)  ,A            tput  first   freq  byte
   0170  007E03         811            LD  A, (IX+FREQ)                    F2  F3  F4  F5 F6  F7  FB  FO  again
   0180  E6FO           812            AND  OFOH                           F2  F3  F464F5  0   0   O   O
   0182  57             813            LD  D,A                       ;sa   ae   D
   0183  DD7E04         814            LDA,   (IX*FREQ+1)            “LS      =0    O  FOF!
   0186  E60F           815            AND  OFH                      “A    7    000        0   O  FO  FI
   0188  82             816            OR  D                         cA =  F2  F3  F4  FS  O   OFO  F1
   0189  OF             817            RRCA                          78wap   nibbles
   O18A  OF             818            RRCA
   0188  OF             819            RRCA
   018C  OF            820             RRCA                          ;A =   O   OFO   FI  F2  F3 F4 FS
   0180  D3FF          821             OUT  [SOUND  PORT)  ,A        ;output   2nd  [most  significant]     freq  byte
   O18F  C9            822             RET
                       823   oRRERKEKRAAARKANHRKRARKKRKKAKEKE
                       824 ;            DECLSN                 *
                       B25   Sette  eee deere  eee
                       826    ;.COMMENT  )
                         te   »2E”eguoteBe euw@e@ou
                                                  827   ;Without  affecting  the MSN,  decrement   the LSN  of the byte  pointed  to by  HL.  HL
                                                  828   ;remains  the same.
                                                  829   ;RET with  2 flag  set if dec  LSN  results  in 0,  reset otherwise.
                                                  830   ;RET with  C flag  set if dec  LSN  results  in  -1, reset otherwise.
                                                  831   ;)
                                                  832           GLB  DECLSN
                              0190 3£00           833  DECLSN   LD  A,O
                              0192 E067           834           RRD                         ;A = 0  | LSW  (HL)
|                             0194 D601           835           SUB  1                      ;Z flag  set  if dec to 0,  C flag  if dec  to -1
                              0196 F5             836           PUSH  AF                    ;save Z  and C  flags
|                             0197 ED6F           837           RLO                        ; (HL) =  old MSN  | new LSN
|                             0199 F1             838           POP  AF                    ;restore   2 and  C flags, A  = 0  | new LSN
|                             019A C9             839           RET
                                                  840   eeasanaanadsageaanagggaessns
                                                  841  ;*        DECMSN               *
                                                  842   oRRERRERRAEAAAARARAAREKEARAAEHARE
                                                  843  ;.COMMENT   )
                                                  844  ;Without  affecting   the LSN,  decrement  the  MSN of  the byte  pointed  to by  HL.  HL
                                                  845  ;remains  the  same.
                                                  846  ;RET  with 2  flag  set if dec  MSN results   in 0, reset  otherwise.
                                                  847  ;RET  with C  flag  set if dec  MSN results   in -1,  reset otherwise.
                                                  848  ;)
                                                  849           GLB  DECMSN
                             0198 3E00            850  DECMSN   LD A,0
                             0190 ED6F           851            RLD                        ;A  = 0  | MSN (HL)
                             O19F 0601           852            sus  1                     32  flag  set if dec  to 0,  C flag  set if dec  -1
                             O1A1 F5             853            PUSH  AF                   ;save  2  and C flags
                             O1A2 ED67           854            RRD                        ;(HL)  = new  MSN  | old LSN
                             O1A4 FI             855            POP  AF                    ;restore   Z and C  flags, A  = 0  | new MSN
                             01A5 C9             856            RET
                                                 857   shathansaassagaseranseesnnss
                                                 858   ;*        MSNTOLSN             *
                                                 859   shenendnanaasedancaanessnaes
                                                 860   ;.COMMENT  }
                                                 861   ;Copy  MSN of  the byte  pointed  to by  HL to  the LSN  of that  byte.   HL remains
                                                 862   ;the  same.
                                                 863   ;)
                                                 864            GLB MSNTOLSN
                             01A6                865  MSNTOLSN                                                                                                                                             ,
                             O1A6 7E             866            LD A, (WL)               ;A = MSN  |  LSN to be  changed
                             O1A7 E6FO          867             AND OFOH                   ;A =  MSN  | 0
                             O1A9 47             868            LD 6,A                     save   in B
                             O1AA OF             869            RRCA                       ;swap  nibbles
                             O1AB OF             870            RRCA
                             O1AC OF             871            RRCA
                             O1AD OF             872            RRCA                       ;A =  0 | MSN
                             O1AE 80             873            OR B                       ;A = MSN   |MSN
                             OIAF 77             874            LD (HL),A                  ;(HL)  = MSN  i MSN
                             0180 C9             875            RET
                                                 876  seadaneeeakanagegansansasans
                                                 877  ‘;*        ADD816              *                                                                                                 ‘
                                                 878   oREEKKARARRAAERAAKKKKKKEKEKKE
                                                 879  ;.COMMENT   }
                                                 880  ;Adds  8  bit two's  complement   signed value  passed   inA  to the  16 bit  location
                                                 881  ;pointed   to by  HL.
                                                 882  ;)
                                                 883            GLB ADD816
    0181 0600          884 ADD816  LD 8,0                   ;set8 for  positive  value in A
    0183 C87F          885         BIT 7,A                  :ifA  ispositive
    0185 2802          886         JR 2,POS                 ;skip
    0187 O6FF          887           LO 8,OFFH                ;A 1sneg:  extend  sign bit thru  B
    0189 86            888 POS     ADDA,  (HL)              ;do8 bit  add [and  set Carry)
    01BA 77           889          LD  {WL),A               ;Storeresult  into  LSB 16 bit number
   0188  23            890         INC HL                   ;putMSB
   018C  7E            891         LDA,  (HL)               sintoA
   0180  &8            892         ADC A,B                  7A= 4SB +  Carry +  B [B is 0 or  FF)
   018E  77            893         LD  [WL],A               store result  into MSB
   O1BF  2B            894         DEC WL                   ;re-point HL to LSB  16 bit number
   01C0  C9            895         RET
                       896 atte   ieheaieiarhatniaineriababmiiniintel
                       897 :*     PT 1X TO SxDATA     *
                       898 -eaaeeannteneentensenenenans
                       899 ;.COMMENT )
                       900 ;SONGNO passed in B.
                       901 ;Point IX to byte 0  inSONGNO's song data area.
                       902 ;RET with both DE and IX pointing to SxDATA,
                       903 ;HL pointing to MSB SXDATA entry in LST_OF SND ADORS.
                       904 ;)
                       905         GLB PT_IX_TO SxDATA
   01C1                906 PT_1X_TOSxDATA
                       907 ;       * IX & DE := addr of byte 0 in SONGNO’s  song  data  area,
                       908 ;         HL pointing to MSB SxXDATAentry  in LST_OFSND  ADDRS.
   01C1 2A7020         909         LD WL,{PTR_TOLST  OF SND_ADDRS) ;point  HL to start  LSTOF  SND ADDRS
   01C4 2B             910         DEC WL                  sinit HL for  addition
   01C5 2B             911         DEC HL
   O1C6 48             912         tO C,8                  sform 4 * SONGNO  in C
   01C7 0600           913         LD 8,0
   01C9 CB01           914         RLC C
   01cB CB01           915         RLC C
   01CD 09             916         ADD HL,BC               ;HL pts to SXDATA's  entry  in LST_OF SND _ADDRS
   OICE 5E             917         LD E,CHL)               ;move addr SxDATA  to  IX thru DE
   O1CF 23             918         INC HL
   0100 56             919         LD D(HL)
   0101 05             920         PUSH DE
   0102 ODE            921         POP IX
   0104 C9             922         RET
                       923 ;
                       924 ;               LEAVE EFFECT
                       925 34/19/82
                      926  ;
                       927 eAORORERERSEHESSENAHERSENATE
                       928 ;*      LEAVE EFFECT       *
                      929  -se#eaanaakanshantannareranne
                      930  ;COMMENT  )
                      931  ;LEAVEEFFECT,  called by a special sound effect  routine when  it's finished,
                      932  ;restores the SONGNO of the song to which the effect  note belongs  to B5 - BO of
                      933  sbyte 0 in the effect's data area, and loads bytes  1 and 2 with  the address of
                      934  ;the next note in the song.  The address of the  1 byte SONGNO  (saved by the
                      935  seffect when first cailed) is passed in DE.  The  2 byte address  of the next note
                      936  ;in the song, also saved by the effect, is passed  in HL.  IX  is assumed to be
                      937  ;pointing to byte 0 of the data area to which the  song number  is to be restored.
                      938  ;Bits 7 and 6 of the saved SONGNO are ignored, and  therefore may  be used by the
                      939  ;effect to store flag information during the course  of the note.
                      240  ;)
                                                                                              4
                          941          GLB LEAVEEFFECT
    0105                  942  LEAVEEFFECT
    0105  0D7501          943          LD (IX¢1),L              ;LSB NEXTNOTE PTR  := LSB addr next note in song
    0108  007402          944          LO [IX*2),W              “MSB NEXTNOTE PTR  := MSB addr next note in song
    0108   1A             945          LD A,(DE)                “A s= x xSONGNO  (i.e., the saved, original SONGNO)
    010C  E63F            946          AND O3FW                 sA  :=0 0 SONGNO
    O1DE  47              947          LO B,A                   3B  :=0 0 SONGNO (B now = original SONGNO)
    01DF  0D7E00          948          LD A,(1X+0)              cA  :=CH# | 62 (all effect notes have SONGNO = 62)
    01€2  E6CO            949          AND OCOH                 sA  :=CHA   000000
    O1E4  80              950          OR B                     7A  :=CH#  |SONGNO
    01€5  007700         951           LD [I1X+0),A             srestore the song number
    O1E8  C9              952          RET
                          953                     |
                         954   sanaahsanansnabeaneneragases
                          955  ;*      AREA_SONGIS         *
                         956   shhaansaganasaananeaneasesen
                          957  ;.COMMENT )
                          958  ;The address of byte  0 of a song data area is passed in IX.  The song number of
                          959  ;the song using that  area is returned in A [OFFH if inactive).  If a special
                          960  ;effect was using that  area, 62 is returned in A and WL is returned with the
                          961  ;address of the special  sound effect routine.
                          962  ;)
                          963          GLB AREA_SONG_IS
    O1E9                  964  AREASONG 1S
    01E9  DD7E00          965          LDA, (1X+0)              3A := CH# | SONGNO or 62, or A := FF
    O1EC  FEFF            966          CP OFFH
    O1EE  C8              967          RET 2                    sleave with A = FF if area inactive
    O1EF  E63F            968            AND 001111118            smask CH#
    O1F1  FE3E            969            CP 62
    01F3  CO              970            RET WZ                   leave  with A = SONGNO if not a special effect  (62)
                          971  ;           special effect,  so set HL to addr effect, stored in bytes 1&2
    01F4  DDES            972              PUSH IX                  z;pointHL to byte 1
    01F6  E1              973              POP WL
    O1F7  23              974              INC HL
    O1F8  SE              975              LOE, (HL)                ssave LSB effect addr inE
    O1F9  23              976              INC WL                   sHL to byte 2
    O1FA  56              977              LDD, (HL)                s;saveMSB effect addr in D
    O1FB  EB              978              EX DE,HL                 sHL := addr special effect
    O1FC  C9              979              RET
                          980;         END ;UTIL
                          981  "PROG
                     983 ;         IDENT INITSOU           ;includes INISOUND, ALL OFF
                     984 eatraat hetactaatintmaatatininiiiaaiaataiaeel
                     985 ;*        INITSOUND        *
                     986 éRESARARaRakakenakeneantakee
                     987 ;.COMMENT }
                     988 ;See Users’ Manual for description;  includesENTRY POINT ALL_OFF
                     989 ;addr LSTOF SND ADDORS passed in WL
                     990 ;n = # of song data areas to init, passed  iB
                     991 -)
                     992         GLB INITSOUND,ALL OFF ,DUMAREA
                     993        ;INCLUDE OSSREU:  os  -equates
                     994 ;      ‘*®® Sound chip register code EQUATES
                     995 ;       Tone generator frequency and attenuation formatted register codes
             <0080>  996 SRIFRQ  EQU 100000008           ;BIT7 = 1, BIT6-4 = TONE GEN 1 FREQ CODE
                     997 SRIATN  EQU 100100008           “BIT7 =1,  BIT6-4 = TOWE GEN 1 ATIN CODE
             <QO0A0> 998 SR2FRQ  EQU 101000008           “BIT7 = 1, BIT6-4 = TOWE GEN 2 FREQ CODE
             <0080>  999 SR2ATN  EQU 101100008           sBIT7 = 1, BIT6-4 = TONE GEN 2 ATTN CODE
             <00C0> 1000 SR3FRQ  EQU 110000008           ;BIT7 = 1, BIT6-4 = TONE GEN 3 FREQ CODE
            <0000>  1001 SR3ATN  EQU 110100008           ;BIT7 = 1, BIT6-4 = TONE GEN 1 ATTN CODE
                    1002 ;       Noise generator control and attenuation formatted register codes
            <00E0>  1003 SRNCTL  EQuU111000008           sBIT7 = 1, BIT6-4 = MOISE GEN CONTROL CODE
            <00F0>  1004 SRNATN  EQU 111100008           sBIT7 = 1, BIT6-4 = NOISE GEN ATTN CODE
                    1005
                    1006 * PROCEDURE INITSOUNDQ  (AREA_COUNT:BYTE;LISTOF ADDR: INTEGER)
                    1007
                    1008 * THIS IS THE PASCAL ENTRY POINT TO INITSOUND
                    1009
                    1010           7EXT  PARAM
                    1011            GLB  INITSOUNDQ
   01FD 00020001    1012 INITSOUND PAR:      DEFW  2,1,2
                    1013
                    1014;           COMM
                    1015 =IMIT_SOUNDDATA:     DEFS  3    ;Moved to OS
                    1016.
                    1017            PROG
   0203             1018 INITSOUNDQ:
   0203 0101FD      1019            LD   BC,INITSOUND  PAR
   0206 1173BA      1020            LD   DE,INITSOUND DATA
   0209 C0098       1021            CALL PARAM
   020C 3A738A      1022            LD =A,CINIT SOUND DATA)
   O20F 47          1023            LD   =B,A
   0210 2A7388      1024            LD =oWL,(INITSOUND DATA+1)
                    1025
   0213             1026 INITSOUND
                    1027 ;       * initialize PTR TO LST OF SNDADDRS  with value passed in HL
   0213 227020      1028         LD [PTR_TO LSTOF SND ADORS)  ,HL
                    1029 ;       * store inactive code at byte 0 of each of the n data areas [B = n)
   0216 23          1030         INC HL                  ;pt WL to song 1 data area entry in LST_OF SNDADDRS
   0217 23          1031         INC HL
   0218 5€          1032         LO €,(HL)               ;pt DE to byte 0 in first song data area
   0219 23          1033         INC WL
   O21A 56          1034         LDD, (HL)
   0218 £8          1035         EX DE,HL                ;pt HL to byte 0 in first song dataarea
   021C 1E0A        1036         LD £,10                 ;set DE for 10 byte increment
   021E 1600        1037         iD 0,0
   0220 36FF        1038 BI:     LO (HL),OFFH            ;deactivate area
    0222   19              1039            ADD  HL,DE                     spt  HL to  byte  0 next area   (10   bytes  away)
    0223   10FB            1040            DJNZ  BI                       ;do  this for  the  n (passed   in  B)  data  areas
                           1041   ;        *  store  end  of  data   area  code  (0)  at first  byte  after    last  song data   area
    0225   3600            1042            LO  (HL),0                     sstore  end  of data  area  code   in  byte  0 data   area  n+    1
                           1043   ;        *  set the  4  channel   data   area  pointers   to a dummy,   inactive    data  area
    0227   21024C          1044            LD  WL ,OUMAREA                spoint  HL  to inactive  byte   below    [after  the  RET)
    022A   227022          1045            LD  (PTR. TO. S OW  0),HL      ;store  addr  DUMAREA  at  PTR_TO   S ON   0
    022D   227024          1046            LD  (PTR_ TO  SON    1)},HL    ;store  addr  DUMAREA  at  PTR 10S    ON  4
    0230   227026          1047            LD  [PTR  TO  S ON  2),HL      ;store  addr  DUMAREA  at  PTR TO  S  OW  2
    0233   227028          1048            LO  (PTR_ TO" SON  3),HL       ;store  addr  DUMAREA  at  PTR_TOos   ON  3
                           1049   ;        *  initialize    SAVE “CTRL
    0236   3EFF            1050            LD  A,OFFH                     snote:  this  is  only time  MSN   SAVE CTRL   will   be  non  zero,
    0238   32702A          1051            LD  {(SAVE_CTRL),A             sthus  ensuring   PLAY SONGS   will   output  ist  real   CTRL data
    0238                   1052   ALL_OFF
                           1053 ;          *  turn off   all  4  sound   generators
    0238   3E9F            1054            LD  A,OFF*¢SRIATN              3form  off  code  for tone  generator     1
    0230   OSFF            1055            OUT  [SOUND _PORT)    ,A       ssend  it out
    O23F   3EBF            1056            LD  A,OFF+SR2ATN               sform  off code   for tone  generator     2
    0241   D3FF            1057            OUT  [SOUND _PORT),A           ssend  it out
    0243   3EDF            1058            LD  A,OFF+SR3ATN               ;form  off code   for tone  generator    3
    0245   D3FF            1059            OUT  [SOUND PORT),    A        ;send  it out
    0247   SEFF            1060            LD  A,OFF+SRNATN               sform  off code   for noise  generator,     N
    0249   D3FF            1061            QUT  [SOUND  PORT)  ,A         ssend  it out
    0248   C9              1062            RET
    O024C  FF              1063   DUMAREA  DEFB  INACTIVE
                           1064   ;        ENO  ;INITSOU
                           1065    PROG
                        1067   ;          -IDENT   JUKEBOX                 includes    JUKE  BOX
                        1068   ‘aeeeeeneeeageeraneeneeneees                                 ~
                        1069   -          JUKE BOX                *
                        1070   geeeeeeeeeneeenenesereneene
                        1071   >COMMENT    }
                        1072   ;see  Users'   Manual   for  description
                        1073   ;SONGNO  passed    in  B
                        1074   ;)
                        1075            GLB   JUKE BOX
                        1076           ;EXT   PT_IX_TO    SxDATA,LOAD     NEXT  NOTE,UP    CHDATA   _PTRS
                        1077           = INCLUDE   OSSR EQU:0S       ;equates
                        1078
                        1079  *  PROCEDURE    JUKE BOXQ    (SONG  NUM:BYTE)
                        1080
                        1081  *  THIS  IS  THE  PASCAL    ENTRY   POINT   FOR   JUKE BOX
                        1082
    024D  00010001      1083  JUKE BOX  PAR        DEFW                  1,1
                        1084  *  THE  PARAMETER    DESCRIPTOR     FOR   JUKE BOXQ
                        1085
                        1086                      sEXT                   PARAM_
                        1087  *  THE  PARAMETER    PASSING    ROUTINE
                        1088
                        1089  ;                    COMN
                        1090  PARAM   |AREA         DEFS                  1
                        1091 *   THIS  IS  WHERE   THE  SONG   NUMBER   TS  ACTUALLY    PASSED
                        1092
                        1093                       PROG
                        1094                      GLB                    JUKE BOXQ
   0251                 1095  JUKE BOxa
   0251   01024D        1096                LD     8C,JUKE  BOX  PAR
   0254   1173BA        1097                LD   DE,PARAM    AREA
   0257   cp0096        1098                CALL   PARAM_
   025A   3A736A        1099                LD  =A,   (PARAM_AREA)
   0250   47            1100                LD     =B,A
                       1101
   025E                1102   JUKE BOX
                       1103   ;         *  RET  if  song   already    in  progress
   O25€   C5           1104             PUSH   BC                       save    SONGNO   on stack
   025F   CD01C1       1105             CALL  PT_IX    TO  SxDATA       ;point    IX to  SONGNO's   song  data  area
   0262   DD7E00       1106             LD  A, (1X0)                    ;A   := CH#  [if  any)   | SONGNO   [if any)                                                                                ‘
   0265   E63F         1107             AND  3FH                        ;A  :=  0 0  SONGNO
   0267   C1           1108             POP  BC                         7B  :=  SONGNO
   0268   B88          1109             CP  B                           “test   if  already   in progress
   0269   C8           1110             RET  2                          if   so,   leave
                       1111   ;           *  load   first   note  and   set  NEXT _WOTE  PTR   (thru  LOAD NEXT  NOTE)
   026A  007000        1112               LD   (1X+0)   ,B                 sstore SONGNO    in  byte  0
   026D  28            1113               DEC   HL                         ;-WL  left  by  PT_IX_TO_SXDATA     pointing   to  MSB  SxDATA
   026E  2B            1114               DEC   HL                         ;-entry   in  LSTOF   SND ADORS;    point  HL  to  note  list
   026F  56            1115               LD  D, (HL)                      ; starting    addr  entry  in  LST_OF SND  _ADORS   and  save  this
   0270  28            1116               DEC   HL                         ;-addr   in DE
   0271  SE            1117               LO E,  (HL)                      “DE  now  has  the  initial   value  for  NEXT NOTE  PTR                                            ‘
   0272  DD7301        1118               LD   (IX+*1),€                   ;set  NEXT  NOTE PTR    for  first  note  in  song
   0275  0D7202        1119               LD   (1X+2),D
   0278  CD035F        1120               CALL   LOAD  NEXT  NOTE          ;load  note,   byte  0  := CH#|SONGNO,    set  new  NEXT NOTE  PTR
   0278  CD0295        1121               CALL   UP_CH  DATA_PIRS          New   song,   so update   channel   data  ptrs
   O27E  C9            1122               RET
                       "123   ;        END   ;JUKEBOX
                                                                                                                3
                       1124   ;       (page)
                       1125    PROG
                        W127;         -IDENT SNDMAN           ;includes SND MANAGER,PROCESS DATA_AREA,
                        1129 ;                                  oa -
                        1130 ; eunvaceasabenconsavenesere
                        1131 s
                        1132 > COMMENT )
                        1133 ;See Users’ Manual for description
                        1134 ;)
                        1135         GLB SNDMANAGER
                        1136        sEXT PT_IX_TO_SxDATA,AREA SONG  IS
                        1137        ;INCLUDE OSSREQU:0S   ;equates
    027F                1138 SND_MANAGER
                        1139 ;       * IX := addr of song #1 data area  [(SIDATA)
    027F  0601          1140         LO B,1                  spt IX to byte 0 song data area  forsong  # 1
    0281  CD01C1        1141         CALL PT_IX_TO SXDATA
       ;                1142 ;       LOOP untilend  of song data areas
    0284  3£00          1143 11        LO A,ENDSDATA           scheck for end of song data areas
    0286  DDBE0O        1144           cP (1X40)               sset Z flag if  inactive
    0289  C8            1145           RET 2                   steave (Z set], if all data areas have  been  processed
                        1146 ;           * process active song data areas
   028A   CD02D6        1147             CALL PROCESSDATA_AREA   ;update counters or call effect; get  next  note
                        1148 ;           * point IX to byte 0 next song data area
   0280   1E0A          1149             LD E,10
   O28F   1600          1150             LD D,0
   0291   D019          1151             ADD 1X,DE
   0293   18EF          1152         JR L1 ;REPEAT LOOP
                        1153 4RREERERAAKAERAAAARAKREEERER
                        1154 8*     UP_CH DATA~PTRS     *
                        1155 eRkRRekeaRaakaekekakaeeanake
                        1156  ;.COMMENT)
                        1157 >For each active data area, starting with SIDATA and proceeding in order,  load
                        1158 “the associated channel data area pointer (PTR TO SON x)  with the address  of
                        1159 s;byte0.  This routine is called by JUKEBOX,  when a song starts and
                        1160 *PROCESS_DATA_AREA when the channel using a data area has changed as a result  of
                        1161 “calling“LOAD NEXTNOTE  [this happens when a song finishes and when it switches
                        1162 ;back and forth between noise and tone notes).
                        1163 >)
                        1164         GLB UP_CHDATA _PTRS
                        1165        EXT  DUMAREA                                                                                                                     ,
   0295                 1166 UP_CHDATA, PTRS
   0295   DDE5          1167         PUSH IX                 ;save curent IX
   0297   21024C        1168         LD HL ,DUMAREA          sset all 4 ch data ptrs to dummy inactive  area
   029A   227022        1169         LD [PTR TO SON 0),HL
   0290   227024        1170         LD (PTR_TO SOW  1],HL
   O2A0   227026        1171         LD (PTR TO SON 2),HL
   02a3   227028        1172         LD [PTRTO S ON 3),HL
   02A6  0601           1173         LO B,1                  sset IX to byte 0 SIDATA
   O02A8 CDOIC1         1174         CALL PT_IX_TO SxDATA    “RETs with IX addr byte 0 song 1
                        1175 ;       LOOP untilend  of song data areas
   02AB  DD7E00         1176 L2        LD A,[IX+0)             stest for end of song data araes
   O2AE   FEOO          1177           cP ENDSDATA                                                                                                 ‘
   0280  2821           1178           JR 2,DONESNDMAN           jleave loop if all data areas checked
                        1179 ;           * if area active, set appropriate channel data area pointer
   0282  FEFF           1180             CP INACTIVE             scheck for inactive data area: don't up  date ptr if so
                        1181 ;           If (PSW,1S,NZERO)       sarea is active: update channel data ptrs
   0284  2815           1182             JR Z,L9
   0286  DD7E00         1183               LDA, (1X+0}             -get CHA in A
    0289   E6C0           1184                AND  OCOH                   3B7  - B6    in A   = CHA
    0288   07             1185                RLCA                        sform  CH#    * 2   inA,    i.e.,  the  offset   from
    028C   07            1186                 RLCA                        ;PTR_TO.S   ON 0    of  the   channel   data  area  pointer
    0280   07            1187                 RLCA                        sthat  points    to  channel     Cha
    O2BE   5F            1188                 LO £,A                      sadd  offset   to  addr  of  PTR  TO   SOw  0
    O2BF   1600          1189                 LD 0,0
    02C1   217022        1190                 LD WL,PTR_TO.S   Ow  0
    02C4   19            1191                 ADD  WL,DE                  ;HL  points   to  proper   channel     data  area  pointer
    02C5  ODES           1192                 PUSH  IX                    sstore   this  song  data  area's    byte   0   addr  there
    02C7  01             1193                 POP  DE
    02c8   73            1194                 LD  (WL),€
    02C9   23            1195                 INC  WL
    O2CA   72            1196                 LD  [WL],D
                         1197   ;           ENDIF
                         1198   ;           * point  IX  to byte  0 next  song  data  area
    O2CB   1E0A          1199   L9          LD €,10
    02CD   1600          1200               LD 0,0
    O2CF  0019           1201               ADD IX,DE
    02D1   1808          1202             JR L2 ;REPEAT   LOOP
    0203                 1203  DOWE SNDMAN
    02D3  DDE!           1204           POP IX                     srestore   IX
    0205  C9             1205           RET
                         1206   ;Keeeeekeeeaeeeeenerereeeere
                         1207   ;*.  PROCESS DATA_AREA       *
                         1208   ;SKSTAAATAREAAEARARKAAAREAARARKE
                         1209   ;.COMMENT )
                         1210   ;See Users' Manual  for  description
                         1211   Terminology:  SFX  = address  of  sound effect   routine
                         1212   ;)
                         1213           GLB PROCESS DATA_AREA,EFXOVER
                         1214          ;EXT LOADNEXT  WOTE  ,ATN_SWEEP, FREQ SWEEP
    0206                 1215  PROCESS DATA AREA
    02D6  CDOIE9         1216           CALL AREASONG  IS          ;return  area's   SONGNO   in A  [and  addr   SFX  in HL)
    02D9  FEFF           1217           CP INACTIVE                stest for   inactive  code
    02D8  C8             1218           RET 2                      sRET, no  processing    if area   inactive
                         1219  ;          * if special   effect,  call it  to process   the  data   area
    O20C  FESE           1220             cP 62                      ;test  for  special   sound  effect
                         1221  ;          IF (PSW,1S,ZERO)             ;data  area  used  by  sound   effect
    O2DE  2006           1222             JR NZ,L10                                                                                                                                        ’
    O2E€0 1€07           1223               LO E,7                       spt  HLto   SFX+7,  starting    adr  of  the  effect's   code
    02E2  1600           1224               LD 0,0
    02E4  19             1225               ADD HL,DE
    O2E5  £9             1226               JP CHL)                      ;do  1  pass  thru  effect,   RET   from  effect
                         1227  ;          ENDIF
                         1228  ;            * else  process  a non-effect   note
    02E6  CDO12F         1229  110          CALL ATN SWEEP               ;process   atn  sweep   data,   if any
    02E9  COOOFC         1230               CALL FREQ SWEEP              ;proc   frq  sweep  data,   if  any,  &  note  dura  timer  s
                         1231  ;            IF (PSW, 1S,ZERO)            :note   is over
    O2EC  2011           1232               JR WZ,L12
    O2EE  0D7£00         1233  EFXOVER        LDA,  (1X+0)               ;A  :=  CH#  | SONGNO   this  note                                                            .
    O2F1  F5             1234                 PUSH  AF                   ssave   on stack
    O2F2  CDO35F         1235                 CALL  LOAD NEXT NOTE       ; toad data   for  next  note
    O2F5  C1             1236                 PoP BC                     ;B  := CH# |   SONGNO   previous   note
    02F6  DD7E00         1237                 LD A, (1X+0)               ;A  := CH#  |  SONGNO   new  note   [may  be  inactive]
    02-9  B8             1238                 cP B                       ;check   against   new  note's   CH#  |  SONGNO
                         1239  ;              1F (PSW,1S,NZERO}          s;change  to/from   tone/efx/noise
    O2FA  2803           1240                 JR Z,L12
    O2FC  CD0295        1241                     CALL UP_CH_DATA_PTRS       ;to maintain  data  area   priority  system
                        1262  ;               ENDIF
                        1243  ;             ENDIF
    O2FF  C9            12644 112           RET
                        1245  ;        END  ;SMDMAN
                        1246  PROG
                        1248   ;         -IDENT  PLAYSON               ;Includes   TONE OUT
                        1249   oBaRaneaaaeaasanananneannans
                        1250   ;*        PLAY  SONGS |          *
                        1251   -SERKRAAARARAAAARAREAERETARE
                        1252   =.COMMENT  )
                        1253   ;see Users'  Manual   for  description
                        1254   ;)
                        1255           GLB  PLAY  SONGS  ,TONE  OUT
                        1256          ;EXT  UPATNCTRL   ,UPFREQ
                        1257          ; INCLUDE  OSSR_EQU:0S     ;equates
                        1258   ;       ***  Sound  chip   register   code  EQUATES
                        1259   ;       Tone  generator    frequency   and  attenuation    formatted   register  codes
                        1260  ;SRIFRQ   EQU   100000008               sBIT7  =  1,  BIT6-4   = TONE  GEN  1 FREQ CODE
                        1261  ;SRIATN   EQU   100100008               “BIT7   = 1,  BIT6-4   = TONE  GEN  1 ATIN CODE
                        1262  ;SR2FRQ   EQU   101000008               “BIT7   = 1   BIT6-4   = TONE  GEN 2  FREQ CODE
                        1263  ;SR2ATN   EQU   101100008               “BIT7   =1,”  BIT6-4   = TONE  GEN 2  ATTW CODE
                        1264  ;SR3FRQ   EQU   110000008               sBIT7   =     BIT6-4   = TONE  GEN 3  FREQ CODE
                        1265  ;SR3ATN   EQU  110100008                *BIT7   = 1,  BIT6-4   = TONE  GEN 1  ATIN CODE
                        1266  ;        Noise  generator    control   and  attenuation    formatted   register  codes
                        1267  *SRNCTL   EQU  111000008                s;BIT7 =  1,  BIT6-4   = NOISE  GEN CONTROL  CODE
                        1268  * SRNATN  Equ  111100008                ;BIT7  =  1,  BIT6-4  =  NOISE  GEN ATTN  CODE
                        1269  ;        Noise  generator    formatted   control   codes
             <0004>    1270   WHITE    QU   000001008                ;BIT2 =   1, WHITE   NOISE  CODE
             <0000>    1271   PERIOO   EQu  000000008                *BIT2  = 0,  PERIODIC    NOISE CODE
             <0000>    1272   NSRHI    EQu  000000008                sBITO-1   SET  FOR  HIGHEST  NOISE  SHIFT  RATE  (N/512)
             <0001>    1273   NSRMED   €EQU 000000018                3B81T0-1  SET  FOR  MEDIUM  NOISE  SHIFT  RATE  (W/1024)
             <0002>    1274   NSRLOW   EQU  000000108                ;BITO-1   SET  FOR  LOWEST  NOISE  SHIFT  RATE  [(N/2048)
             <0003>    1275   NSRTG3   EQU  000000118                381T0-1   SET  FOR  SHIFT  FROM  TOWE  GEN 3 OUTPUT
   0300                1276   PLAY  SONGS _
                       1277   ;        *  output  CH1  attenuation    and  frequency
   0300 3E9F           1278            LD  A,OFF+SRIAIN              3format  CH   OFF  byte   into A
   0302 0€90           1279            LD  C,SRIATN                  :format  MSN  C  for  CH1  attenuation
   0304  1680          1280            LD  D,SRIFRQ                  sformat  MSN  D  for  CH1  frequency
   0306 DD2A7024       1281            LD  1X, {PTR TO  S ON.1})     ;point  IX  to  byte  0 data  area  of  song for  CH1
   O30A CDO34E         1282            CALL  TONE  OUT
                       1283   ;        * output   CH2  attenuation    and  frequency
   0300 3EBF           1284            LD  A,OFF+¢SR2ATN             ;format  CH2  OFF  byte   into A
   O30F O&B0           1285            LD  C,SR2ATN                  :format  MSN  C  for  CH2  attenuation
   0311 16A0           1286            LD  D,SR2FRQ                  -format  MSN  D  for  CH2  frequency
   0313 002A7026       1287            LO  IX,{PTR  TO. S ON 2)     ;point   IX  to byte   0 data  area  of  song for  CH2                                                                    ,
   0317 CDO34E         1288            CALL  TOWNEOUT
                       1289   ;        * output   CH3  attenuation    and  frequency
   O31A 3EDF           1290            LD A,OFF+SR3ATN              ; format  CH3  OFF  byte   into A
   O31C O&D0           1291            LD C,SR3ATN                  ; format  MSN  C  for  CH3  attenuation
   O31E 16C0           1292            LD 0, SR3FRQ                 ;format   MSN  D  for  CH3  frequency
   0320 002A7028  ==—s_1293            LD  IX,{PTR_ TO S  ON 3}   = ;point   IX  to byte   O data  area  of  song for  CH3
   0324 CDO34E         1294            CALL  TONE OUT
                       1295   ;        * output   CHO  [noise]  ATIN  [and  CTRL,  if  different   from  last  time)
   0327 3EFF           1296            LD A,OFF+SRNATN              ;format   CHO  OFF  byte   into A
   0329 OEFO           1297            LD C,SRNATN                  ;format   MSN  C  for  CHO  attenuation
   032B DD2A7022       1298            LD  IX,{PTR_ TO S  ON 0)     ;point   IX  to byte   0 data  area  of song  for  CHO                                               ;
   032F DDSE0O         1299            LD E, (1X+0)                 ;look   for  inactive   code,  OFFH
   0332 IC             1300            INC  E                       “this  sets   2 flag   if E  = OFFH
                       1301  ;         IF  (PSW,1S, ZERO)           .  song  data  area   is inactive
   0333 2004           1302            JR NZ,L5
   0335 D3FF           1303  :           OUT  [SOUND PORT]   ,A        ;turn  off  CHO
   0337 1814           1304              JR  16
                              1334               -IDENT  LOADNEX      ;includes     LOAD NEXT   NOTE
                              1335   ‘deeeeeeehenenereneneneneane
                              1336   ;*       LOAD  NEXT NOTE            *
                              1337   -RAaReReAAaReaReAReeeeatease
                              1338   - .COMMENT   )
                              1339   ;see  Users'   Manual    for  description
                              1340   ;SFX  refers   to  the  beginning      address   of  a  special    sound    effect   routine
                              1341   ;).
                              1342             GLB  LOAD  NEXT  NOTE     ,REST,ENDREP,ENDNOREP       EFFECT,   TYPEO,  TYPE1,  TYPE2,  TYPES
                              1343             GLB  MODBO,DE    TO DEST,PASS1
                              1344            EXT   JUKE _BOX, UP  _CH “DATA  _PTRS
                              1345            ;INCLUDE   OSSR_EQU:0S:0        ;equates
    O35F                      1346   LOAD _NEXT _WOTE
                              1347             *deactivate      area,    save            on  stack
    O35F    DD7E00            1348   ;         LD A,  [1X+*0)                     pea= byte   0
    0362    E63F              1349             AND  001111118                  rest    Cu#,    if any
    0364    F5                1350             PUSH  AF                        ssave   SONGNO    on  stack
    0365   DD3600F   F       1351              LD  (1X+0) , INACTIVE           deactivate       area
                             1352    ;         * A  :=  header    new  note
    0369   DD6E01            1353              LD L,  {1X+1)                   HL    :=  addr   new  note    in ROM
    036C   0D6602            1354              LDH,   (IX+2)
    O36F   7E                1355              LOA,   (HL)                     sA   := header    new  note
                             1356    ;         * save   header    of  new  note   in  song   on  stack   and   load   its  data   CASE  note   type
   0370    47                1357              LD B,A                          ssave   header    new  note    in  B
      |                      1358    ;         - test   for  rest
   0371    CBéF              1359              BIT  5,A                        stest   for   rest
                             1360    ;         IF  (PSW,1S,NMZERO)             snote   is  a  rest
   0373    281C              1361              JR 2,113
                             1362                3--CASE--     rest
   0376    E61F              1364                AND  000111118                   smask   all  but   duration    bits
                             1365    ;           *  set  up  NEXT  NOTE   PIR
   0378    23                1366                INC  WL                          sHL  =  address    of  the   header   of  the  note   after   this    note
   0379    DD7501            1367                LD  (IX+1),L                     zstore   in  NEXT  NOTE   PTR
   037C    0D7402            1368                LD  (IX+2),H
                             1369    ;           ® move   this   note's    data   and  fill   in  bytes   where    necessary
   037F    DD3604F0          1370                LD  (IX+ATN)   ,OFOH             sset  atn   off
   0383    007705            1371                LD  (IX*NLEN)   ,A               sWLEN   :=  5  bit  duration
   0386    00360700          1372                LD  (IX+FSTEP)   ,0              ;indicate    freq   not   to  be  swept
   038A    00360800          1373                LO  (IX+ASTEP]   ,O              ;indicate    atn   not   to be   swept                                                                                               ,
   O38E    C30461            1374                JP  MODBO                                                  |
                             1375   ;         ENDIF
                             1376   ;          - test  for   end   of  song
   0391    CB67              1377   L13       BIT  4,A                         stest   for  end
                             1378   ;          IF (PSW,1S,NZERO)               send   of  song
   0393    280F              1379             JR  Z,L14
   0395    CB5F              1380                BIT  3,A                         ;test   for  repeat
                             1381   ;            IF  (PSW,1S,NZERO)               repeat    song
   0397    2805              1382                JR  2,ENDNOREP
                            1383                   ;--CASE--     end   of  song,   repeat
   0399   C1                 1384   EWOREP         POP   BC                         7B  :=  SONGNO                                                                                               ‘
   039A   CD025E            1385                   CALL   JUKE  BOX                 ;to   reload   ist   note   of  this  song
   0390   C9                1386                   RET                              ;to  PROCESS   DATA   AREA,     don't   save  header
                            1387    ;            ENDIF
                            1388                   ;°-CASE--     end   of  song,   no  repeat
   O39€   3EFF              1389    ENDNOREP       LD  A, INACTIVE
   O3A0    FS               1390                   PUSH   AF                        s;save  Inactive     code   to  end  song
    O3A1  C30461          1391                JP MODBO                   sto load byte 0
                          1392  ;         ENDIF
                          1393  ;         - test for  special  sound  effect
    03a4  E63C            1394  114       AND 001111008              smask irrelevant bits
    03A6  FEO             1395            CP 000001008               ;test for B5 - B2 = 0001
                          1396  ;         IF (PSW,1S, ZERO}          snote is a special effect
    O3A8  2028            1397            JR WZ,L15                       .
                          1398              :--CASE--  special  effect
    O3AA  FOE1            1399  EFFECT      POP IY                     ;1Y := SONGNO
    O3AC  FDES            1400              PUSH IY                    sput SONGNO back on  stack
    O3AE  C5              1401              PUSH BC                    ssave header on stack;   NEXT NOTE  PTR    := SFX,  DE  :=  SFX
    O3AF  23              1402              INC WL                     s-pt HL to next byte   (LSB  addr SFX)
    0380  5E              1403              LD E,(HL)                  3-E := LSB SFX
    0381  007301          1404              LO (IX+1),€                ;-put LSB of SFX  in byte  1  of SxXDATA   (NEXT  NOTE PTR)
    0384  23              1405              INC HL                     s-pt HL to MSB SFX
    0385  56              1406              LD D,(WL)                  3°-D:= MSB SFX
    0386  007202          1407              LD (IX¢2) ,D               ;-put MSB SFX in byte  2  of  SxDATa
    0389  23              1408              INC ML                     spoint WL to next note   (after  this   new  note)
    O38A  FOES            1409              PUSH IY                    sA := SONGNO
    O38C  Fi              1410              POP AF
    0380  D5              1411              PUSH DE                    slY := SFX
    O3BE  FDE1            1412              POP IY
    03CO  1103C6          1413              LD DE,PASS1                screate “CALL [IY]"  with  RET  to PASS1    by storing
    03C3  05              1414              PUSH DE                    sPASS1 on the stack
    03C4  FDE9            1415              JP (TY)                    sist 7 bytes SFX will  save   addr next   note   & SONGNO
    03€6  1600            1416  PASS1       LD D,0                     :in same fashion, create   a  “CALL  (1Y+7)"
    03C8  107             1417              LD E,7                     sto allow SFX to load   initial  values
    O3CA  FD19            1418              ADD IY,DE
    O3CC  110461          1419              LD DE,40DB0                sRET to MODBO
    OSCF  D5              1420              PUSH DE
    0300  FDE9            1421              JP (IY)
                          1422  ;         ENDIF
                          1423  ;         - if here,  note  is type  0 - 3
    0302  C5              1424  L15       PUSH BC                    s;saveheader on stack
    0303  78              1425            LD A,B                     ;A := fresh copy header
    0304  £603            1426            AND 000000118              smask all but type number
    0306  FEOO            1427            cp 0                       stest for type 0
                          1428  ;         IF (PSW,1S,ZERO)           snote is type 0: fixed  freq  and  atn
    0308  2020            1429            JR NZ,L16
                          1430  ;           --CASE--  note  type 0
                          1431  ;           * set up  NEXT NOTE PIR
    O3DA  23              1432  TYPEO       INC HL                     snext note [after this   new  note]  is  4  bytes  away,
    0308  23              1433              INC HL                     spoint HL to it
    O30C  23              1434              INC HL
    0300  23              1435              INC HL
    O30E  007501          1436              LD {IX+1),L                sput addr in NEXT_NOTE PTR
    03E1  0D7402          1437              LD [IX*2],H
                          1438  ;           * move new  note  data and  fill in bytes where  necessary
    O3€4  2B              1439              DEC WL                     ;point HL back to Ist  ROM  data  to  move,   WLEN
    03—E5 110005          1440              LO DE,0S                   spoint DE to destination:   bytes  5,  4,   and 3
    03€8  CD0478          1441              CALL DE TO DEST
    03€B  010003          1442              LO BC,3                    smove 3 bytes
    O3EE  £088            1443              LDOR
    03FO  DD360700        1444              LD [IX+FSTEP) ,0           s;setfor no freq sweep
    03F4  00360800        1445              LD (IX+ASTEP) ,O           ;set for no atn sweep
    O3F8  1867            1446              JR MODB0
                          1447  ;         ENDIF
    O3FA   FEO1           1448 116      cP 1                         ;test  for  type   1
                         1449  ;        IF  (PSW,1S, ZERO)           snote   is type   1: swept   freq,   fixed  attenuation
    O3FC  2018           1450           JR W2,L17
                         1451  ;          --CASE--  note   type  1
                         1452  ;          * set  up NEXT  MOTE  PTR
    O3FE   1€06          1453  TYPE1      LO E,6                        snote  after   this  note   is 6 bytes   away,
    0400   1600          1454             LD 0,0                        spt HL  to  it
    0402   19            1455             ADD  WL,DE
    0403  007501         1456             LD  (IX+1),L                 zstore   in  NEXT_NOTE  PTR
    0406  007402         1457             LD  (1X+#2),H
                         1458  ;          * move  new  note  data   and fill   in bytes   where   necessary
    0409  28             1459             DEC  WL                      spoint   HL  back  to  ist  ROM  data   to move,   FSTEP
    040A  1C             1460             INC E                        7B:  =  7; point   DE  to  destination:    bytes   7-3
    0408  CD0478         1461             CALL  DE TO  DEST
    040€  010005         1462             LO BC,5                      gmove  5  bytes
    0411  E0B8           1463             LDOR
    0413  00360800       1464             LD  (IX+ASTEP) ,O            ;set  for  no  atn  sweep
    0417  1848           1465             JR MODBO
                         1466  ;        ENDIF
    0419  FEO2           1467  L17      CP 2                         stest  for  type  2
                         1468  ;        IF  (PSW,1S,ZERO}            snote  is  type  2:  fixed   freq,  swept   attenuation
    0418  2028           1469           JR MZ,TYPES
                         1470  ;          --CASE--  note   type  2
                         1471  ;          * set  up NEXT NOTE   PTR
    041D  1&06           1472  TYPE2      LD E,6                       spt  HL  to note   after   this  note;   since   it's  6  bytes  away,
    041F  1600           1473             LD D,0                       spt  HL  to  it by  adding   6
    0421  19             1474             ADD  Ht,DE
    0422  Fi             14675            POP AF                       ;A  := header   this   note   (CH#  | SONGNO)
    0423  F5             1476             PUSH  AF                     ;put  back  on  stack
    0424  E6CO           1477             ANDO 110000008               smask  SONGNO,    leaving   CH#
                         1478  ;          IF  (PSW,1S,Z2ERO)     ~~    sthis   is a  noise  note,   which   is  only  5  ROM  bytes   long
    0426  2001           1499             JR WZ,L18
    0428  28             1480               DEC  HL                      3:80 move   WL  back  1 byte
                         1481  ;          ENDIF
    042°  907501         1482  118        LD  {1X+1),L                 ;put  addr   in NEXT  NOTE  PTR
    042C  007402         1483             LD  (1M+2),H
                         1484  ;          * move  new  note  data   and fill  in  bytes   where  necessary
    042F  28             1485             DEC WL                       spoint   HL back   to  Ist  ROM  data  to  move,   APS
    0430  1£09           1486             LD E,9                       spoint  DE  to  destination:     bytes  9,8,5   -  3
    0432  CD0478         1487             CALL  DE_TO  DEST
    0435  010002         1488             LD BC,2_                     smove  2  bytes
    0438  E€D88          1489             LDOR                         swhen  done,   DE  points   to  FSTEP,  HL  to  ROM   NLEN
    043A  3€00           1490             LD A,O
    043C  12             1491             LD  {0E&),A                  ;FSTEP   := 0  for  no  freq  sweep
    0430  18             1492             DEC DE                       ;pt  DE  to RAM   NLEN
    O43€  18             1493             DEC DE
    O43F  0€03           1494             LO C,3                       smove  last   3 ROM  bytes;    if this   is a  noise   note,   garbage
    0441  E088           1495             LOOR                         swill  be  loaded   into  byte   3,  buts  that's   OK
    0443  181C           1496             JR 40080
                         1497  ;        ENDIF
                         1498  ;        if here,  note  is  type  3:  swept  freq,   swept  attenuation                                                                     e
                         1499  ;        --CASE--  note  type  3
                         1500  ;        * set up  NEXT NOTE  PIR
    0445  1£08           1501  TyPE3    LD E,8                       ;note  after  this   note  is  8  bytes  away,
    0447  1600           1502           LD 0,0                       spt HL  to  it
    0449  19             1503           ADD HL,DE
    044A  DD7501         1504           LO (IX+#1),L                   ;put  addr  in  NEXT NOTE   PTR
    0440   007402         1505           LD  {IX+#2),H
    0451  DDE5            1508           PUSH  IX                    point   DE  to destination:    bytes  9   - 3
    0453   FDE1           1509           POP  IY                     ;1Y¥ := addr  byte  0  [and  DE =  6)
    0455   1£09          1510            LD E,9                     DE    := 9
    0457   FD19          1511            ADO  IY,DE                 slY  :=  addr  byte  9  [APS]
    045C  010007         1514            LO BC,7                    smove   7 bytes
                         1516   ;        * modify   byte 0  basis header  new  note
    0461  DOES           1517   MOOBO    PUSH  IX                   ;pt  WL  to byte  0
    0464  Fi             1519            POP AF                     3A  := header   new  note
    0465  C1             1520            POP  BC                    38  := SONGNO
   0468   C8             1522              RET  2
   046A   E63F           1524            AND 3FH                    sRid  channel   bits
   046C   FEO4           1525            CP 04                      ;Special   effect
   046E   2002           1526            JR WZ,L20  LOAD NEX
   0470   063€           1527              LD  B,62
   0473   E6CO           1530            AND OCOH                   sA  := CH#  000000
   0476   77             1532            LD {HL} ,A                 ;store  back  in  byte  0
   0478                  1535  DE_TO  DEST                         ;DE passed   = offset   from  byte  0, RETed    w addr  byte offset
   047A   FDE1           1537            POP IY                     ;1Y  := addr  byte  0  [and  DE  = offset)
   047C   FD19           1538            ADO IY,DE                  slY  := addr  byte  0  + offset
                     1545   ;       -IDENT  ACTIVATE
                     1546   ;       .ZOP
                     1547   ;       -EPOP
                     1548 ;         -COMMENT )
                     1549   seetanskeannaanngeanes  ACTIVATE  RRTRAAAKARARAKARAAKARAERARKKARARRAAHAERKRERREREEK
                     1550   ;
                     1551   ;                                                                    4/22/82
                     1552   ;                                                                    13:50:00
                     1553   ;
                     1554   ;THE FOLLOWING CHANGES/REVISIONS   WERE MADE:
                     1555   ;
                     1556   ;       1. ELIMINATE  CODE PLACING  OLD.SCREEN  ADDRESS  IN STATUS AREA
                     1557   ;       2. INIT X.PAT.POS  IN OLD.SCREEN  WHEN  IN VRAM  AS WELL AS  WHEN IN CRAM
                     1558   ;       3. USE VDP.MODE.WORD  TO TEST  GRAPHICS  MODE
                     1559   ;       4. ADD CODE  TO EXPAND OWE  COLOR GENERATOR  BYTE  10 8
                     1560   ;       5. ADDED CBUFF   DEFS 8 FOR  COLOR EXPANDING   CODE
                     1561  ;  5/02  6. FIX COLOR  GEN MOVE IN MODE  |
                     ar    ;        7. USE CONTROLER MAP  FOR BUFFER  AREA
                     1563  ;
                     1564  *   ACTIVATE is used  to initialize  the RAM status  area  for the passed
                     1565  *object  and move its  pattern and color  generators  to  the PATTERN  and
                     1566  *COLOR  GENERATOR tables  in VRAM_   The second  function  is enabled  or
                     1567  “disabled  by setting  or resetting  the carry  flag  in the PSW_  this  is
                     1568  *necessary  to prevent  sending the  same graphics  data  to VRAM more  than
                     1569  *once  when creating  identical objects    The  calling  sequence for  act-
                     1570  *ivating  an object  is as follows:
                     1571  *
                     1572  *                LO               Hi ,OBUn          ;-208J  TO ACTIVATE
                     1573  *                SCF                                ;SIGNAL  MV TO VRAM
                     1574  *                CALL             ACTIVATE
                     1575  *
                    1576   *
                    1577   *oR
                    1578   *
                    1579   *                LD               HL,OBJ n          ;-20BJ  TO ACTIVATE
                    1580   *                OR               A                 ;DON'T  MV TO VRAM
                    1581   *                CALL             ACTIVATE
                    1582   *
                    1583   *)
                    1584                   sEXT              PUT VRAM_,VRAM_WRITE,VDP_MOOE   WORD                                                                           ’
                    1585                   EXT               WORK BUFFER
                    1586   ;
                    1587                    GLB              ACTIVATE _
                    1588   ;
                    1589   ;REGISTER USAGE:  FOLLOWING  WILL BE CHANGED  BY ACTIVATE,   ADDITIONAL
                    1590   :MAY BE CHANGED BY  CALLED  SUBR
                    1591   :               AF ,HL,DE,BC,1Y
                    1592   ;
                    1593
                    1594
                    1595   ; PROCEDURE ACTIVATEQ[VAR  OBJ:OBJECT ;MOVE: BOOLEAN);                                                                        °
                    1596
                    1597  ;  ACTIVATEQ  ISTHE  PASCAL ENTRY  POINT  TOACTIVATE
                    1598
                    1599                  sEXT      PARAM
                    1600  ;  THE PASCAL PARAMETER  PASSING  PROCEDURE
                    1601   ;               COMN
                         1603  ;PRM_AREA:       DEFS                3          ;Moved  to  OS
    0482  O002FFFE       1607  ACTIVATE P:       DEFW                2,°2,1
   0496  56              1617                    LO                  0, (HL)
   0498  3A738C          1619                    LD                  A, [PRM_AREA+2)
   0498  FEOO            1620                   Cp                   0
   0490  2803            1621                    JR                  Z2,NTZZ2_
   04A0  1601            1623                    JR                  T222_
   04A3  5E              1631                    LO                  E,(HL)             ;°70BJ  GEN CROM
   O4A7  4E             1635                     LD                 C, (HL)             572083  CRAM
   04AB  3€00           1639                     LD                 A,0                 ;ZERO  FRAME                                                  |
   0482  CAO4E7         1644                     JP                 Z,ACT_SEMI                      ;TYPE=0
   0486  CAO5F1         1646                     JP                 Z,ACT_ MOBILE                   ;TYPE=1
   04BA  CA0600         1648                     JP                 Z,ACT_OSPRT                     ;TYPE=2
   O4BE  CA0600         1650                     JP                 Z,ACT_1SPRT                     ;TYPE=3
   04C2  2802           1652                     JR                 2,ACT_CMPLX                     ;TYPE=4                                                             ‘
                        1656 ;                   STACK=OB8J TYPE   & SUP  VRAM  FLG
                        1657  ;                  HL->OBJ  n+4
                 1658;           DE->OBJGRAPHICS+0
                 1659;           BC->08JSTATUS+0
                 1660;           A=0
                 1661;
           <04C6>1662ACT_CMPLEQU           $
                 1663;SUBCASEComplex
   O4C61A        1664            Lo            A,(0E)        ;GETCOMPCNT
   O4C71F        1665            RRA
   O4C8IF        1666            RRA
   O4C91F        1667            RRA
   O4CA1F        1668            RRA
   O4CBE6OF      1669           AND            OFH
   O4CD47        1670            Lo            B,A           ;SETCNTR
   O4CE5E        1671            LD            E,(HL)        ;DE->COMPTRSLIST
   OACF23        1672            INC           ML
   04D056        1673            LO            D,(HL)
   040123       1674             INC           WL
   040287        1675           OR             A             3?EMPTY
   04D32810     1676             JR            2,CHPLX9
          <O4D5>1677 CMPLX4     EQU           4
   0405F1       1678            PoP            AF            ;SUPCALL,COMPOBJ
   0406F5       1679            PUSH           AF
   0407£5       1580            PUSH           WL
   0408CS       1681            PUSH           BC
   0409£6       1682             EX            D,HL
   O4DACD04A3   1683            CALL           ACTIVATE_
   0400C1       1684            PoP            BC            ;RESTORPNTRS
   O4DE£1       1685            PoP            WL
   O4DFSE       1686             LD            E,(HL)
   O4E023       1687             INC           HL
   04E156       1688             LO            D,(HL)
   04E223       1689             INC           HL
   O4E310F0     1690             DJNZ         CMPLX4        3?MORE,RELOOP
   O4E5F1       1691CMPLX9:     PoP            AF            ;CLEASTACKFORRTW
   O4EC9        1692             RET           ;TECHNICALLSHOULDJMPTORTN
                1693;
          <O4E7>1694ACTSEM]  QU           $
                1695; SUBCASSemi_Moile
  04E7cD0572    1696             CALL          INI_XP_OS    ;X_PATPOS :=80H
  O4EA1A        1697             LD            A,(DE)       ;A :=FIRSTGENNAME                                                    ,
  O4EB6F        1698             LD            L,A
  O4EC13        1699             INC           DE
  O4EO1A        1700             LD            A,(DE)       ;A :=NUMGEN
  O4EE85        1701            ADD            A,L
  O4EFFD7705    1702            LD             (1¥#5,A      ;NEXT_GEN:=FIRSGEN NAME+ NUMGEN
  O4F22600      1703            LD             H,0          ;HL=FIRSGENNAME =
                1704;ATTHISPOINT:
                1705;           STACK=08TYPE  &SUP VRAMFLG
                1706;           HL=FIRSGEN NAME
                1707;           DE->NUMGEN
                1708;           BC:FREE                                                                            ,
                1709; SUPFORVRAMINIT
  O4F4FI        1710            POP           AF            ;1FSUP VRAMFLGON
  O4F53038      1711            JR            NC,SEMIEXIT
  O4F7F5        1712            PUSH          AF
  O4F83A73C3    1713            LD            A,(VDP_MODWORD] ;SEEWHICHGRAPHICMODE
  O4FBCB4F      1714            BIT           1,A           lf GR IlMODE
    O4FD   2831          1715                         JR                    Z,SEMI_  GRI          :>,  GO  GRI
    O4FF   EG            1716                         EX                    DE ,HL                ;DE=FIRST   GEN  NAME
    0500   44            1717                         LD                    8,4                   ;SV   -> NUMGEN
    0501   40            1718                         LO                    C,L
    0502   6€            1719                         LO                    L, (HL)               CALC    SOURCE   OFFSET
    0503   2600          1720                         LO                    u,0
    0505  €5             1721                        PUSH                   HL
    0506  29             1722                        ADO                    HL, HL
    0507  29             1723                        ADO                    Ht, HL
    0508  29             1724                        ADD                    HL, HL
    0509  €5             1725                        PUSH                   HL
    050A  03             1726                         INC                   BC                    ;HL->SOURCE     BUFFER
    0508  0A             1727                         LO                    A, (8C)
    O50C  6F             1728                         LD                    L,A
    0500  03             1729                         INC                   BC
    O50€  OA             1730                         LO                    A, (BC)
    O50F  67.            1731                         LD                    HA
    0510  C1             1732                        POP                    BC
    0511  FDE1           1733                        POP                    ly
   0513   F1             1734                        POP                    AF
                         1735   ;AT   THIS   POINT:
                         1736   ;                     HL->SOURCE     BUFFER,    PTRN   GNRTRS
                         17387  ;                     DE=INDEX    TO  START   OF  VRAM   ENTRIES
                         1738   ;                     IY=WUMBER    OF   ITEMS   TO  READ  FROM   VRAM
                         1739   ;                     BC=OFFSET    TO  COLOR    SOURCE   BUFFER   a
                         1740   ;                    AF=08J   TYPE    (&  SUP   VRAN   FLG,  UNNEEDED)
                         1741   ;  FILL  AS   NEEDED   TOP,   MID,   AND  BOT   PTRN_GNRTRS     & DITTO    FOR  COLOR GNRTRS
   0514   C87F           1742                         BIT                   7,A                  ;1F   BIT  7 OBJ  TYPE   ON  (TOP)
   0516   2803           1743    |                    JR                    2,SEMI] MID          :>.   GO HNDL   MID
   0518   CD0594         1744                        CALL                  SUP_GEN   CLR
               <051B>    1745 SEMI    MID            EQu                   %
   0518   CD05E8         1746                        CALL                  SUP_UPDATE
   O51E  C877            1747                        BIT            |      6,A                   ; IF BIT   6 OBJ  TYPE  ON   (MID)
   0520  2803           1748                         JR                    Z,SEMI_  BOT
   0522  CD0594         1749                         CALL                 SUP_GEN    CLR
               <0525>   1750    SEMI_BOT             EQu                   3
   0525  CDOSES         1751                         CALL                  SUP_UPDATE                                          |
   0526  CaéF           1752                         BIT                   3,A                   ;1F  BIT   5 OBJ  TYPE  ON   (BOT)
   052A  2803           1753                         JR                    Z,SEMI_  EXIT
   052C  cD059%         1754                         CALL                  SUP_GEN_CLR                                                                                                                         ,
              <O52F>    1755   SEMI  EXIT            EQu                   $
   O52F  C9             1756                         RET
                        1757    ;
                        1758   ;  Handle    GRAPHICS    MODE   |
              <0530>    1759   SEMI  _GRI            EQU                   8
   0530  EB             1760                         EX                    DE ,HL                ;WL ->NUMGEN
  0531   4E             1761                         LD                    C, (HL)               ;[Y=NUMGEN
  0532   0600           1762                         LD                    8,0
  0534   C5             1763                         PUSH                  BC
  0535   FDE1           1764                         POP                   ly
  0537   23             1765                         INC                   HL                    ;HL->PTRN   GNRTRS                                                                     ‘
  0538   7E             1766                         LD                    A, (HL)
  0539   23             1767                         INC                   HL
  053A   66             1768                         LO                    H, CHL]
  0538   6F             1769                         LD                    L,A
  O53c   €5             1770                     '   PUSH                  HL                   ; SAVE  FOR   RESTORE
  0530   CS             “771                        PUSH                   BC
    O53€  D5             1772                         PUSH                 DE
    O53F  FOES           1773                         PUSH                  ly
    0541  303            1774                         LD                   A,3                   sSIGNAL    PTRN   GEN   FILL
    0543  CD1C27         1775                         CALL                 PUT_VRAM_
    0546  C1             1776                         POP  BC    ;BC  :=  NUMGEN
    0547  E1             1777                         POP  WL    ;HL  :=  FIRST  GEN   NAME
    0548  50             1778                         LD  E,t
    0549  54             1779                         LD  D,H    ;DE  :=  FIRST  GEN   NAME
    054A  09             1780                         ADD  WL,BC   ;HL   :=  FIRST  GEN   NAME   +  NUMGEN
    0548  28             1781                         DEC  HL
    054C  CB3C           1782                         SRL  W
    054E  CB1D           1783                         RRL
    0550  CB3C           1784                         SRL
    0552  CB1D           1785                         RRL
    0554  CB3C           1786                         SRL  H
    0556  CB1D           1787                         RRL        sHL  3=  (FIRST  GEN   NAME    + NUMGEN    -  1)/8
    0558  C828           1788                         SRA  E
    055A  C828           1789                         SRA  E
    055C  CB2B           1790                         SRA  E    ;DE   :=  FIRST  GEN  NAME/8
    055€  87             1791                         OR  A      sCLEAR   CARRY
    O55F  £052           1792                         SBC HL  ,DE
    0561  23             1793                         INC  HL   o;HL  :=  (F_G     N+ WGN    -  1)/8   - FG    N/8  +  1  =  NUMBER   COLR    GENS
   0562   €5             1794                         PUSH  NL
   0563   FOE            1795                         POP  IY
   0565   £1             1796                        POP                   HL                    RESTORE     REG
   0566   29             1797                        ADO                   WL, HL                7STEP   OVER   PTRN_GNRTRS
   0567   29             1796                        ADO                   HL, HL
   0568   29             1799                        ADD                   WL, HL
   0569   C1        -    1800                        POP                   ac
   056A   09             1801                        ADO                   Ht ,BC                cHL->COLOR     GNRTR   SOURCE
   0568   3€04           1802                        LD                    A,4                   SIGNAL     PTRN  COLOR    TBL
   0560   CD1C27         1803                        CALL                 PUT  _VRAM_
   0570   F1             1804                        POP                   AF                    oFIX  STACK
   0571   C9             1805                        RET
                         1806   ;  Internal    routine   to  initialize     X Pat  Pos    in  Old Screen
   0572  C5              1807   INIT_XP_OS:          PUSH                 BC
   0573  FOE!            1808                        POP                   ly                    i1Y  ->  STATUS
   0575  D5             1809                         PUSH                 DE                     SAVE    ->  GRAPHICS
   0576  5E             1810                         LD                   E,  (HL)               ;DE  := OLD   SCREEN    ADDRESS
   0577  23             1811                         Inc                  HL                                                                                                                                       '
   0578  56             1812                         LD                   D,  (HL)
   0579  CB7A           1813                         BIT                  7,0                   ;?  OLD   SCRN   IN  CROM
   0578  2014           1814                         JR                   NZ,SM_BY    OLD
   057D  7A             1815                         LO                   A,O                   ;OLD_SCREEN      IN  VRAM?
   O57E  FE70           1816                         cp                   70H
   0580  3806           1817                         JR                   C,OS_IN   VRAM
   0582  3680           1818                         LD                   A, 80H                ; INIT  X_PAT_POS     =  80H
   058   12             1819                         LO                    (DE),A                              7
   0585  180A           1820                         JR                  SM  BY  OLD
   0587  80             1821    INIT 80:             DEFB                 80H
   0588  210587         1822   OS_IN_VRAM:           LD                   HL, INIT  80                                                                                                      ‘
   0588  010001         1823                         LD                   BC, 1                 ;ONE   BYTE   TO  MOVE   TO  VRAM
   O58E  CD1D01         1824                         CALL                 VRAM  WRITE
              <0591>    1825    SMBY  OLD         EQU                  $
   0591  D1             1826                         POP                  DE                    ;DE   ->  GRAPHICS
   0592  13             1827                         Inc                  DE                    DE    ->  FIRST  GEN  NAME
   0593  C9             1828                         RET
       059A  3E03          1837                    LO                 A,3                ;SIGNAL  PTRN GEN  FILL
      O5AB8  CB67          1849                    BIT                4,A                7HOW MANY  COLOR  GEN  BYTES?
      0580   3E04          1852                    LO                 A,4   ~            ;SIGNAL  PTRN COLOR  FILL
                           1860   ; For each  item to  send, duplicate   the  color  byte  8 times  [in C_BUFF)
      05C€5  010008        1872           LO BC,8                     sCREATE  8 DUPLICATES
      0S5CB  09            1874           ADD HL ,B8C                 sPLACE  THEM HERE,   STARTING  AT END  OF BUFFER
      O5CC   0608          1875_       ~  D0 8,8
      0503   FD210001      1880           LD 1Y,1                     :1 ITEM  TO SEND                                                                                 :
      0507   3€04          1881           LD A,4                      ;COLOR  TABLE CODE
    OSDF    03              1886           IwC  BC                       ;INCREMENT   COLOR   POINTER
    O5€0    £1              1887           POP  HL                       ;GET  ITEM  COUNTER
    05E1    28              1888           DEC  WL
    O5E2    7C              1889           LD  A,
    05E3    B5              1890           OR  L
    O5SE4   200C            1891           JR  WZ,WEXT  COLOR
    05€6    18CD            1892           JR  O B RET
                            1893  ;Internal   rout  to  update   to next  VRAM  index   screen  area
                 <05E8>     1894 SUP UPDATE        EQu                 $
    05€8    C5              1895                    PUSH                 BC
    05E9    010100          1896                     LO                  BC,100H
    OSEC    EB              1897                     EX                  DE,HL
    OSED    09              1898                     ADD                 HL,BC
    OSEE    EB              1899                     EX                  DE,WL
    OSEF    Ci              1900                     POP                 Bc
    OSFO    C9              1901                     RET
                            1902  ;
                 <O5F1>     1903  ACTMOBILE          -EQU                $
                            1904  ; SUBCASE   Mobile
    O5F1    cD0572          1905                     CALL                INIT XP_OS          ;X_PAT_POS    := 80H
                            1906  ; INSERT   NEW GENERATOR     ADDRESS  IN OBJECT  CRAM
    O5F4    13              1907                      INC                dE
    O5F5    1A              1908                     LD                  A,(DE)
    05F6    FO7705          1909                     LD                  (1¥+5),A
   O5F9    13               1910                      imc                DE
    OSFA    1A              1911                     LD                  A,(DE)
    O5FB    FO7706          1912                     LD                  (1Y¥*6),A            INIT NEW  GEN    IN  STATUS
    OSFE    Fi              1913                     POP                 AF
    OSFF    C9              1914                     RET
                 <0600>     1915  ACT OSPRT    EQU                 $
                            1916  ; SUBCASE   Sprite   size   0
                 <0600>     1917  ACT_1SPRT    EQU                 $
                            1918  ; SUBCASE   Sprite   size   1
    0600    03              1919                      inc                BC                  ;->WEXT_GEN    IN  CRAM
    0601    03              1920                      1uCc               BC
    0602    03              1921                      INC                BC
    0603    03              1922                      INC                BC
    0604    03              1923                      INC                BC
    0605    £8              1924                     EX                  DE,HL               ;HL->FIRST   GEN  NAME
    0606    23              1925                      INC                HL
    0607    7E              1926                     LD                  A,(HL)
    0608    5F              1927                     LO                  E,A                 3;SVINDEX   TO  VRAM
    0609    1600            1928                     LD                  D,0
    0608   05               1929                    PUSH                 DE
    060C    23              1930                      INC                HL                  ;DE=PTRN PTR
    0600    5E              1931                     LO                  E,(HL)
    060E    23              1932                      INC                HL
    O60F    56              1933                     LD                  D,(HL)
    0610    23              1934                      INC                HL                  ;CALC &  SET   NEXT -GEN  CRAM
    0611   86               1935                     ADD                 A,[HL]
    0612    02              1936                     LO                  (8C),A                                                                                                      ‘
    0613   4E               1937                     LD                  C,CHL)
    0614    0600            1938                     LO                  B,0
    0616    C5              1939                    PUSH                 BC
    0617    FDE1            1940                     POP                 lY
    0619    EB              1941                     EX                  DE,HL               ;HL->SOURCE    PTRN  GEN
    O61A   D1               1942                     POP                 DE                  ;DE=INDEX   TO  PTRN   GEN VRAM
    0618  FI              1943                    Pop                 AF
    061C  00              1944                     RET                Te
    061D  3€01            1945                     LD                 A,1                  ;SIGNAL   SPRITE  PRIN  GEN  FILL
    061F  CD1C27          1946                    CALL               PUT  _VRAM”
    0622  C9              1947                     RET
                          1948
                          1949   PROG
                            1951
                            1952  RaESRAAERAARKAKERAKRER     PUTOB J   RARAARAERRAAAKAAKAAKAAEAAKAEKKAKRRARKERKAREKAKANEE
                            1953  ;DESCRIPTION:      PUTOBJ   VECTORS   TO  ONE  OF  5  SPECIFIC   ROUTINES   FOR  PLACING   THE
                           1954   ;                 DIFFERENT   OBJECT    TYPES  ON  THE  DISPLAY
                           1955   ;INPUT:             IX = ADDRESS   OF  OBJECT   TO  BE  PROCESSED
                           1956   ;                  B  = PARAMETER    TO  BE PASSED    SPECIFIC   PUT  ROUTINES
                           1957
                           1958   * IN ADDITION,   THIS  MODULE   CONTAINS   ROUTINES    WHICH  ALLOW   VRAM  OPERATIONS
                           1959   * TO BE  DEFERRED,   TYPICALLY   UNTIL   AN  INTERRUPT   OCCURS,   AND  PERFORMED
                           1960   * IN A  BLOCK  BY A  CENTRAL  WRITER   ROUTINE.
                           1961   RRAKAKEARAKRALKSERAAAARAARERARAEARARAAERARARARAARARAHARARERAERAARAERAARKEAKAAAHKAKKEE
                           1962
                           1963                     DATA
   T3CA                    1964   QUEUE  SIZE       DEFS                1
                           1965   * THIS  1S  THE SIZE  OF  THE DEFERRED    WRITE  QUEUE.    IT IS  SET  BY  THE
                           1966   * CARTRIDGE   PROGRAMMER.   IT WAS   RANGE  0  - 255.
                           1967
    73CB                   1968   QUEUEHEAD         DEFS                1
    73CC                   1969   QUEUETAIL         DEFS                1
                           1970   * THESE  ARE  THE  INDICES  OF THE   WEAD  AND  TAIL   OF THE  WRITE   QUEUE.
                           1974
    73CD                   1972   HEAD ADDRESS      DEFS                2
    73CF                   1973   TAIL ADDRESS      DEFS                2
                           1974   * THESE  ARE  THE ADDRESSES   OF  THE  QUEUE   WEAD  AND  TAIL
                           1975
                           1976   ;TRUE              EQU                 1
                           1977   ;FALSE             EQU                 0
                           1978   * VALUES  FOR  BOOLEAN  DEFERAL  FLAG
                           1979
    7301                   1980   BUFFER            DEFS                2
                           1981   * THIS  IS A  POINTER  TO  THE BEGINNING    OF  THE  DEFERRED   WRITE   QUEUE.   THE
                           1982   * CARTRIDGE   PROGRAMMER   IS RESPONSIBLE     FOR PROVIDING    A RAM   AREA  TO  WOLD
                           1963   * THE QUEUE,   AND PASSING   ITS  LOCATION   AND  SIZE   TO  INIT QUEUE.
                           1984
                           1988   ;                 COMN
                           1986   ;PARAM AREA        DEFS                3
                           1987   * PARAM AREA   IS THE  COMMON  PARAMETER    PASSING   AREA   FOR PASCAL   ENTRY   PTS
                           1988
                           1989
                           1990                     PROG                                                                                                                                           ‘
                <0623>     1991   SETUP  WRITE                          $
                           1992
                           1993   * SETUP  WRITE   SETS  UP A  DEFERRED   VRAM   OPERATION.
                           1994
                           1995   *   PUT  DATA  AT QUEUE HEAD
    0623  DDES             1996                    PUSH                 IX
    0625  2A73CD           1997                     LD                  HL, [HEAD ADDRESS)
    0628  D1               1998                    POP                 DE
   0629   73               1999                     LO                  (HL),E              > PUT  DATA   POINTER
   062A   23              2000                      INC                HL
   0628   72              2001                      LD                  (HL),D                                                                                                ‘
   062C   23              2002                      INC                HL
   0620   70              2003                      tO                  {Hi} ,8             ;STORE   PUTOBJ  PARAMETER
   062E   23              2004                      INC                HL
   O62F   EB              2005                      EX                 DE, HL               ; HEAD  ADDRESS    IN DE
                          2006
                          2007    *   INCREMENT  QUEUE  HEAD
    0667   3&00          2064                      LO                 A,0
    0669   3273CB        2065                      LD                  [QUEUE HEAD)   ,A
    066C   3273CC       2066                       Lo                  [QUEUE TAIL],A
                         2067
                         2068   *   BUFFER   := TAIL_ADDRESS     := HEAD ADDRESS    :=  LOCATION
    066F   227301        2069                      Lo                  (BUFFER)  ,HL
    0672   227300       2070                       LD                  [HEAD ADDRESS}   ,HL
    0675   2273CF       2071                       LD                  (TAIL ADDRESS)   ,HL
                         2072
                         2073   * END  INIT QUEUE
    0678  C9             2074                      RET
                         2075
                         2076   * PROCEDURE    WRITER_
                         2077
                         2078   * TAKES  NO  PARAMETERS
                         2079   * DESTROYS:   ALL
                         2080
                         2081   * BEGIN  WRITER.
                         2082                      GLB                WRITER,
               <0679>    2083 WRITER,               EQU                $
                         2084
                        2085   *    SAVE  DEFERAL   FLAG
   0679   3A73C6        2086                      LD                  A, (DEFER_WRITES)
   067C   F5            2087                      PUSH                AF
                        2088
                        2089   *    DEFER WRITES    :=  FALSE
   0670   3€00          2090                      Lo                  A, FALSE
   067F   3273C6        2091                      LD                 (DEFER   WRITES)   ,A
                        2092
                        2093   *    WHILE  QUEUE  TAIL   <>  QUEUE HEAD   DO
               <0682>   2094  WRTR  WHILE         EQU                 $
   0682   3A73CC        2095                      LD                  A, (QUEUE TAIL)
   0685   21735CB       2096                      LD                  HL QUEUE  HEAD
   0688   BE            2097                      cp                  (HL)
   0689   2831          2098                      IR                  Z,WRTR_END  WHILE
                        2099
                        2100   *      WRITE  DATA  AT  QUEUE  TAIL   TO VRAM
   0688   2A73CF        2101                      LD                  WL, [TAIL_ADORESS)
   068E   5E            2102                      LO                  E, (HL)             ;GET  OBJECT POINTER
   068F   23            2103                      INC                 WL
   0690   56            2104                      LO                 D, (HL)
   0691   23            2105                      INC                 HL
   0692   46            2106                      LD                 B, (WL)              ;GET  PARAMETER
   0693   23            2107                      Inc                HL
                        2108
                        2109   *      PROCESS   OBJECT   IN QUEUE
   0694  D5             2110                      PUSH               DE
   0695  DDE1           2111                      POP                 Ix
   0697  5              2112                      PUSH               WL                  ;SAVE  QUEUE TAIL ADDRESS
   0696  CD06E3         2113                      CALL               DO PUTOBJ
                        2114
                        2115   *      INCREMENT   QUEUE TAIL
   0698  3A73CC         2116                      LD                 A, (QUEUE TAIL)
   O69E  3C             2117                      INC                A
                        2118
                        2119   *      IFQUEUE   TAIL   = QUEUE  SIZE  THEN
   O69F  2173CA         2120                      LD                 HL ,QUEUE SIZE
    06a2   BE            2121                   cP                 (HL)
    06a3   200€          2122                   JR                WZ,WRTR ELSE
                         2123
                         2124  *       QUEUE TAIL   :=0
    06a5  3£00           2125                   LD                A,0
    06A7  3273CC         2126                   LD                 (QUEUTAIL]  ,A
                         2127
                         2128  *       TAIL_ADDRESS   := BUFFER
    O6AA  2A7301         2129                  LD                 HL, (BUFFER)
    O6AD  2273CF         2130                  LD                  (TAIL_ADORESS), HL
    0680  £1             2131                  POP                HL                 RESTORE  STACK   POINTER
                         2132
    0681  1807           2133                   JR                WRTR ENDIF
                         2134  *     ELSE
               <06B3>    2135  WRTR_ELSE       EQU                $
                         2136
                         2137  *       STORE NEW  QUEUETAIL
    0683  3273CC         2138                  LO                 (QUEUETAIL)  ,A
                         2139
                         2140  *       TAIL_ADDRESS   := TAIL_ADDRESS  + 3
    0686  E1             2141                  POP                HL
    0687  2273CF         2142                  LD                 (TAIL_ADDRESS) , HL
                         2143                                          |
                         2144  *     ENDIF
               <O6BA>    2145  WRIR_ENDIF      EQU                $
                         2146
    O6BA  18C6           2147                  JR              — «WRTR_WHILE
                         2148  *   ENDWHILE
                          150  *                  FLAG         |
                         2151    RESTORE DEFERAL
    O68C  Fi             2152                  POP                AF
    06BD  3273C6         2153                  LO           |     (DEFERWRITES)   ,A
                         2154                                                                                                                                       e
                         2155  * END WRITER_
    06C0  C9             2156       |          RET
                         2157
                         2158                  GLB                PUTOBJ_
                         2159
                         2160                                                                                                                                                             :
                         2161         sEXT PUTSEMI,PUT MOBILE   ,PUTOSPRITE,PUTISPRITE   ,PUTCOMPLEX
                         2162
                         2163         EXT  DEFER  WRITES
                         2164         EXT   PARAM_
                         2165          GLB  PUTOBJQ
    06C1  00020002       2166  PUTOBJPAR:      DEFW   2,2,1
                         2167
                          169  *                                          PUTOBJ   ROUTINE
                          171
                         2172          PROG
    06C7                 2173  PUTOBJQ:
    06C7  0106C1         2174          LD   BC,PUTOBJ PAR
    O6CA  1173BA        2175           LD   DE,PARAM AREA
    06CD  CD0098        2176           CALL PARAM
    0600DD2A73B=   2177       LD   1X,[PARAAREA]
    06043A738C     2178       LD   =A[PARAM_AREA+2)
    060747         2179       LD   B,A
                   2180
           <0001>  2181DEFER         EQuU            1
   06D8            2182PUTOBJ_
    06D83A73C6     2183       LD     A,(DEFERWRITES) ;CHECK IF DEFERRED WRITEISDESIRED
    0608FEO1       2184       CP     DEFER
    06002004       2185       JR     N2,00PUTOBJ       NOT, PROCESS OBJECT
    O60FCD0623     2186       CALL   SET_UP_WRITE   s1FSO, SET UP FOR DEFERREDWRITE
    O6E2C9         2187       RET
    06E3006601     2188DOPUTOBJ LDH, (IX+1]          sGET ADDRESS OF GRAPHICSFOROBJn
    06E6DD6E00     2189       LD L,(1X+0)
    06E97E         2190       LD A,(WL)             ;A:=OBJ TYPE
    O6EA4F         2191       LD C,A                sSAVECOPY
    O6EBE60F       2192       AND OFH               ;MASKFOROBJ TYPE  NUMBER
    O06ECAO6FF     2193       JP 2,PUTSEM!          30=SEMI MOBILE
    06FO3D         2194       DEC A
    06F1CAOA87     2195       JP Z,PUTMOBILE         31= MOBILE
    06F43D         2196       DEC A
    06F5CAO8DF     2197       JP Z,PUTOSPRITE       32= SPRITEO
    06F830         2198       DEC A
    06F9CA0955     2199       JP Z,PUTISPRITE       33= SPRITE1
   O6FC C3OEA2     nat        JP PUTCOMPLEX         3>3= COMPLEX
                    201;
                   2202;      END    ;pname
                   2203 PROG
                        2205
                        2206   REARKRALAAKKAARREAARREE   PUT SEMI  RETACAAAAAACAKCKAAACAKEKAEARAAEAEKAERARKARAAAAAARE
                        2207   ;DESCRIPTION:      PUTS  SEMI MOBILE   OBJECTS   ON SCREEN
                        2208   ;
                        2209   ;INPUT:            IX  = ADDRESS  OF OBJECT   TO  BE PROCESSED
                        2210   ;                 HL =  ADDRESS  OF OBJECT'S   GRAPHICS   TABLES   IN RON
                        2211   AERRERECRARAAARERERERARARERERARARAAAAAARARARARAAREAREREAERERERAREAEAAREREREES
                        2212
                        2213                     GLB               PUTSEMI
                        2214
                        2215
    O6FF  005603        2216   PUTSEMI:   LOD,  (1X+*3)            ;GET  ADDRESS   OF  STATUS
    0702  DDSE02        2217           LD  E, (IX*2)
    0705  D5            2218           PUSH  DE                    ;                   AND  PUT INTO   IY
    0706  FOE1          2219           POP  IY
    0708  FDS602        2220           LD  D,[1¥+#2)               GET   XLOCATION
    0708  FD5E01        2221           LD  E,(1Y¥+1)
    O70E CDO7ES         2222           CALL      PXTO  PTRW POS
                        2223
   0711  48             2224           LO  C,E                          = PATTERN   PLANE  COL.
   0712   FD5604        2225           LDD,  (1¥+4)                eet   YLOCATION
   0715   FOSEO3        2226           LD E, (1¥+3)
   0718  CDO7ES         2227           CALL     -PX_TO PTRN_POS
                        2228
   0718  43            2229            LD B,E                      3B  := PATTERN   PLANE  ROW
   O71C  FOSEOO                        LD E, (1¥+0)                sGET  FRAME  NUMBER
                       2231   ;                                            .
                       2232.2       = GRAPHICS  n,  IX  = OBJ_n,  JY =  STATUS_n,   C  = COL.,  B  = ROW,  E = FRAME
                       2233   ;
   071F  1600          2234            10 D,0                      ;DE  HAS  FRAME  WUMBER
   0721  19            2235            ADD  W,DE
   0722  19            2236            ADDHL  ,DE                  ;2*FRAME   WUMBER  +  ADDR OF GRAPHICS   rn
   0723  1€05          2237            LO E,5                      ;FRAME  POINTER   OFFSET
   0725  19            2238            ADD  WL,DE                  ;HL NOW  POINTS   TO  LOCATION   HOLDING  ADDRESS
                       2239                                        cOF  FRAME
   0726  5E            2240            LD E, (HL)                  ;GET  ADDRESS   INTO  DE
   0727  23            2241            INC WL
   0728  56            2242            LOO,  (HL)
   0729  EB            2243           EX  DE, WL                   ;HL  := ADDRESS   OF  FRAME
   072A  C5            2244           PUSH   BC
   0728  01            2245           POP  DE                      ;0E <=  YPAT  POS   &  XPAT_POS
   072C  4E            2246           LD C,  (HL)                 ;C  :=  K_EXTENT
   0720  23            2247            INC WL
   O72E  46            2248           LD  B, (HL)                 7B :=   YEXTENT
   O72F  23            2249            INC HL                     7HL  POINTS   TO  FIRST  WAME  IN  LIST
                       2250   ;
   0730  007E05        2253           LD  A, (1X+5)               *GET   HIGH  BYTE  OF OLD  SCREEN  ADDRESS
   0733  CB7F          2254           BIT  7,A                    sTEST   BIT  15 OF  OLD_SCREEN   ADDRESS
   0735  2804          2255           JR  2,S OLD SCRN
                       2256   ;
   0737  CD0808        2257           CALL  PUTFRAME
   O73A  C9            2258           RET
                       2259
   0738                2260  S OLD SCRN
                       2261
    0738 C5             2262           PUSH  BC          ;SAVE  REGS
    073C 05             2263           PUSH DE
    0730 E5             2264           PUSH  HL
                        2265
    O73E FE70           2266                    cp                70H
    0740 2802           2267                    JR                Z,EQUAL_TO
    0742 3807           2268                    JR                C,ELSE 1
                        2269
                        2270  ;        IF  (.A,GE,70H)            ;THEN  OLDSCREEN    IN CPU RAM
    0744                2271  EQUAL_TO
    0744 67             2272             LD H,A                                        .
    0745 DO6E04         2273             LDL,  (1X4)                ;HL  := OLD SCREEN   ADDRESS
    0748 7E             2274             LDA,  (WL)
                        2275
    0749 1835           2276                    4R                ENDIF 1
    0748                2277  ELSE_1
                        2278
                        2279  ;        ELSE                       jOLD_SCREEN   IN VRAM
    0748 2A8006         2280             LD HL, (WORK_BUFFER)       ;GET  ADDRESS  OF FREE  BUFFER  SPACE
    074E 005605         2281             LD D, (1X+5)               ;DE  := OLD SCREEN  ADDRESS
    0751 DOSEO4         2282             LD E, (1X4)
    0754 €5             2283             PUSH  HL                   ;SAVE  2 COPIES  FREE  BUFFER  ADDR
    0755 05             2284             PUSH DE                    ;SAVE  OLDSCREEN   ADOR
    0756 £5             2285             PUSH  HL
    0757 010004         2286             LD BC,4                    ;READ  4 BYTES  (X,Y PAT POSs,   X,Y EXTETNs)
   O75A  CDID3E        2287              CALL VRAM READ
   O75D  E1            2288              POP HL                     sWL :=  FREE BUFFER  ADDR
   O75E  7E            2289              LD A,  (HL)
   O75F  FE8O          2290              cP  80H
   0761  2003          2291              JR  WZ,GET OLD
   0763  D1            2292              POP  DE
   0764  1819          2293              JR  SKIP_OLD
   0766  23            2294  GET OLD     INC ML
   0767  23            2295              INC HL
   0768  46            2296              LDB,  (WL)                 38 := X_EXTENT   OF OLD SCREEN
   0769  23            2297              INC HL
   O76A  5E            2298              LO E, (HL)                 ;E := Y_EXTENT
   0768  1600.         2299              LD D,0
   076D 23             2300              INC HL
   O76E EB             2301             EX  DE,HL                   sMULTIPLY  X_EXTENT*Y EXTENT    IN HL                                                                            ,
                       2302
   O76F  1801          2303                    JR                MXY+1
   0771 29             2304  MXY:              ADD               HL,HL
   0772 10FD           2305                    DJNZ              M_XY
                       2306
                       2307  ;          OJNZ  M.XY
   0774 £5             2308             PUSH  HL
   0775 C1             2309             POP  BC                    ;BC  := NUMBER  OF BYTES   TO READ
   0776 EB             2310             EX  DE,HL                  ;HL  := FREE  BUFF ADDR  +  4
   0777 01             2311             POP  DE                    ;DE  := OLD SCREEN  ADDR.
   0778 13             2312             INC  DE                                                                                                                  ;
   0779 13             2313             INC  DE
   O77A 13             2314             INC  DE
   0778 13             2315             INC  DE
   O77C CD1D3E         2316             CALL  VRAM READ             ;READ  SAVED  NAMES  FOR BACKGROUND
   O77F E1             2317  SKIP OLD   POP  HL                    ;HL  := FREE BUFF  ADDR.
                       2318  ;        ENDIF
                        2319
    0780                2320   END iF_1
                        2321
    0780  7E            2322           LD  A, (HL)                 7A  := KXPAT POS
                        2323
                        2324
    0781  FEBO          2325                     cP                80H
    0783  280F          2326                     JR                Z,END_IF  2
                        2327
                        2328   ;       IF  [.A,WE, 80H)            7THEN  THERE   IS ANOLD  SCREEN
    0785  5E            2329             LD E,  (WL)                 ;E  :=  XPAT  POS
    0786  23            2330              TwC WL
    0787  56            2331             LO  D, CHL)                 ;D  :=  Y_PAT_POS
    0788  23            2332              INC WL
    0789  4E            2333             LO  C, (Hi)                 3C  := X_EXTENT
    076A  23            2334              INC WL
    078B 46             2335             LD  B, (WL)                 7B  := Y_EXTENT
    078C 23             2336              INC WL                     sHL  POINTS  TO  FIRST  NAME  IN LIST
                        2337
   078   DDES           2338                   PUSH                Ix                 ;SAVE  OBJECT  POINTER
                        2339
   078F  CD0808        2340              CALL  PUTFRAME              RESTORE   OLD  SCREEN   TO  DISPLAY
                       2341
   0792  DDE1          2342                    POP                 IX                 ;RESTORE   OBJECT  POINTER
                       2343
   a7,                 2344   END IF 2
                       2345
                       2346   ;        ENDIF
   0794  E1            2347   Sv1:     POP WL                      sHL  := ADDR  OF  FIRST  NAME  IN ERAME
   0795  D1            2348            POP DE                      ;DE :=  Y,X PAT _POSs
   0796  C1            2349            POP BC                      ;BC :=  Y,X EXTENTs
   0797  cS            2350            PUSH  BC
   0798  DS            2351            PUSH  DE
   0799  £5            2352            PUSH  HL
   O79A  006605        2353            LD H, [IX+5)                sHL :=  OLD SCREEN   ADDRESS
   O79D  DD6E04        2354            LDL,  (1X+4)
                       2355
   O7A0  3€70          2356                     LD                A,70H
   O7A2  BC            2357                     cP                H
   O7A3  3803          2358                     JR                C,END  IF 3                                                                                                            >
                       2359
                       2360   ;        IF (.4,LT,  70H)           ;THE  OLD SCREEN   NOW  IN  FREE  BUFFER
   O7A5  2A8006        2361              LD HL, (WORK BUFFER)        ;THEREFORE,   MOVE  BACKGROUND   TO  BUFFER
                       2362
   O7A8                2363   END_IF3
                       2364
                       2365   ;       ENDIF
   O7A8  73            2366           LD  {HL),E                  ;OLD SCREEN   +    0  := X_PAT_POS
   O7A9  23            2367           INC  WL
   O7AA  72            2368           LD  (HL),D                  ;         "        1  := Y_PAT POS
   O7AB  23            2369           INC  HL                                                                                                                        ‘
   O7AC  71            2370           LO  (WL},C                  ;         "        2  := X_EXTENT
   O7AD  23            2371           INC  HL
   O7AE  70            2372           LO  (HL1,8                  :         "        3  := Y_EXTENT
                       2374
   0780  DDES          2375                     PUSH              1x                 sSAVE  OBJECT  POINTER
                       2376
    07B2   CD0898      2377          CALL  GETBKGRND
                       2378
    07B5   DDE1        2379                   POP              IX                 sRESTORE  OBJECT POINTER
                       2380
    0787   E1          2381          POP  HL                   ;WHERE  NAMES  ARE  IN CPU  RAM
    0788  D1           2382          POP DE                    ;WHERE  TO  MOVE THEM  TO  IN VRAM (NAME TABLE)
    0789  C1           2383          POP BC                    SHOW  MANY  TO MOVE
                       2384
    O7BA  DDES         2385                   PUSH             IX                 ;SAVE OBJECT  POINTER
                       2386
    O7B8C CD0808       2387          CALL  PUTFRAME
                       2388
    O7BF  DDE1         2389                   POP              IX                 ;RESTORE  OBJECT POINTER
                       2390
    07C1  005605       2391          LD D, [1X+5)              ;SEE  IF SAVED  BACKGROUND   TO BE MOVED TO VRAM
                       2392
    07C4  3E70         2393  SV2:             LD               A,70W
    07C6  BA           239%                   cp               D
   O7C7   2B1E         2395                   JR               Z,EMD IF 4
   07C9   381C         2396                   JR               C,EMD IF 4
                      2397
                      2398   ;SV2::   IF  (.0,L1,70H)
   07CB   DDSE04      2399             LD E, [1X+4)              ;DE  := OLD SCREEN   ADDR
   O7CE   D9          2400             EXX                       SUSE  "REG  FOR CALCULATION
   O7CF   2A8006      2401             LD HL, (WORK_BUFFER)      ;WHERE  NEXT  OLD SCREEN   DATA IS
   O7D2   £5          2402             PUSH HL
   07D3   23          2403             INC WL
   07D4   23          2404             INC HL
   0705   5E          2405             LD E, (HL)                jE  := XEXTENT
   0706   1600        2406             iD 0,0
   07D8   23          2407             INC HL
   0709   46          2608             LD B, (HL)                3B  := YEXTENT
   O7DA   EB          2409             EX DE,WL                  sHL  2= X_EXTENT
   O7DB   1801        2410             JR M_XY2+1
   0700   29          2411  M_XY2:    ADO  WL,HL                 sHL  := X_EXTENT*Y  EXTENT
   O7DE   10FD        2412            DJNZ  M_XY2
   O7EO  €5           2413             PUSH HL
   O7E1  09           2414            EXX
   O7E2  C1           2415            POP  BC                    ;BC  := NUMBER  OF BYTES  TO WRITE                                                                          >
   O7E3  E1           2416            POP  WL                    ;HL  := FREE  BUFFER ADDRESS
   O7E4  cD1D01       2417            CALL VRAM  WRITE
                      2418
   07E7               2419  END _I4
                      2420
                      2421  ;       ENDIF
   O7E7  C9           2422          RET
                      2423
                      2426  RERKAAAKERKKEKRKARKE  PX.TO.PTRN.POS RaERRAKARARAKAKARKAKAEKAEKAARRAKKEKAERKRKKEKEE
                      2425  ;DESCRIPTION:     DIVIDES  REG DE BY 8,  IF SIGNED   RESULT  > 127 THEN E := MAX  SIGNED
                      2426  ;                POSITIVE  NUMBER.  IF RESULT  < -128,  THEN  E := MIN NEGATIVE NUM                                         ‘
                      2427  ;INPUT:           DE  = 16 BIT SIGNED  NUMBER
                      2428  ;OUTPUT:          DE/8  < -128     E =  -128
                      2429  ;       -128  <= DE/B  <=+127     E = DE/8
                      2430  ;       +127  <  0E/8             E = +127
                      2431  RRARAKARAKAKRERAKEARREEEKRAAKKEKRKAKKRAREEAHKAKEAAAAAKAKRKKAKRKARARKKKEKAAKERAHEK
                      2432 ;
                            2433
                            2434                       GLB                PX TO  PTRN   POS
      07E8                  2435  PX_TO_PTRN_POS
                            2436
      O7E8  £5              2437            PUSH   HL                     ;HL  USED   TO  TEST   MAGNITUDE
      O7E9  CB2A            2438            SRA  D                        316  BIT   SHIFT   LEFT
      O7EB  CB18            2439            RR  E                          :
     O7ED   CB2A            2440            SRA  D
     O7EF   CB1B            2441            RR  E
     O7F1   CB2A            2442            SRA  D                        ;                    x3
     07F3  CB1B             2443            RR E
     O7F5  CB7A             2444            BIT  7,0         |            71S  RESULT    NEGATIVE
     O7F7  2009             2445            JR  WZ,WEGTV
     O7F9  21F FBO          2446            LD  HL,OFF8OH                 ;SEE   IF  RESULT   <  127
     O7FC   19              2447            ADD  HL,OE.
     O7FD  £1               2448            POP  HL
     O7FE  DO               2449            RET  WC
     O7FF  1E7F             2450            LD  E,7Fu                     sIF  >  128,   THEN  E  :=  MA)   u(GNED   + NUM.
     0801  C9               2451            RET
                            2452  ;XXXXX
     0802  210080           2453  NMEGTV:   LD  HL,O80N                   s1S  RESULT    > -128
                            2454  3XXX
     0805  19               2455            ADD  WL,DE
     0806  £1               2456            POP  HL
     0807  08               2457            RET  C
     0808  1£80             2458            LO  E,80H                     ;IF  <  -128,   THE  E  :=  MIN  SIGNED    - NUM.
     080A  C9               2459            RET
                            2460  &
                           2661   SRRARAAERAAKAAAARERERERARK        PUT  FRAME   SRATTARKRCARAAKRAKKARAARAAAERAKKEKERKEKKEKEEEE
                            2462  ;DESCRIPTION:        THE  WAMES  WHICH   CONSTITUTE     A FRAME   ARE   MOVED   TO  TWE  WAME  TABLE
                           2463   ;                   IM  VRAM.   THE  UPPER   LEFT   HAND  CORNER   OF   THE  FRAME   IS  POSITIONED
                           2664   ;                   AT  XPAT  _POS,  YPAT   POS.
                           2465   ;INPUT:              WL  = ADDRESS   OF  LIST  OF   NAMES   [IN  CPU  RAM)
                           2466   ;                    E  = X PAT POS
                           2667   ;                    0  = Y_PAT_POS
                           2468   ;                    C  = XEXTENT
                           2469   ;                    B  = YEXTENT
                           2470  SARAAASAARAARAEAAEARARAARRAAAAKAEAAERAAAAAEAEARAKAAERAAKKRERRARREREARERRREREEARE
                           2471   ;
                           2472                       GLB               PUT  FRAME                                                                                                                        >
     08608 C5              2473  PUTFRAME:     PUSH   BC                 ;COPY   PARAMETERS     INTO   PRIMED   REGISTERS
     O80C D5               2676            PUSH   DE
    08600  £5              2475            PUSH   HL                     ;AND   FRAME   ADDRESS    INTO  DE'
    O80E  D9               2476            EXX
    O80F  £1               2477            POP  HL
    0810  D1               2478            POP  DE
    0811  C1               2479            POP  BC
    0812  CDO8CO           2480            CALL  CALC  OFFSET
    0815  D9               2481            EXX
                           2482  ;XXXXX
                           2483  ;  TEST  FOR  THE  FOLLOWING    CONDITION:    (XPAT   POS   SLE  32)   AND  (X PAT  POS    + X EXTENT
                           2484  ;                                                  SGT  0)                                                                                         7
    0816  78               2485  PFI:      LO  A,E                       ;1S  X_PAT  POS    < 0?
    0817  CB7F             2486            BIT  7,A
    0819  2003             2487            JR  NZ,XP_NEG
    0818  FE20             2488            CP  32                        ;1S  X PAT  POS    < 32?
    081D  00               2489            RET  NC                       s1F  NOT,   RET
    O81E   81            2490   XP_NEG: ADD  A,C                     ;A  := X PAT POS   + X_EXTENT
    O81F   CB7F          2491           BIT  7,A                     31S A  NEG?
    0821   CO            2492           RET NZ                       YES,   RETURN
    0822   87           2493            OR A                         *A =  0?
    0823   C8           2694            RET  Z                       sRETURN   IF 0
                        2495    ;XXXKX
                        2496    ;X.1N.BOUNDS::
                        2497
   0824                 2498    X_IN_BOUNDS
                        2499
                        2500    ;       IF  (.£,1S, MINUS)           ;1F X_PAT_POS    < 0  , FRAME  BLEEDING   ON  FROM LEFT
                        2501
    0824   CB7B        2502                      BIT                 7,€
    0826   2820        2503                      JR                  Z,ELSE 8
                       2504                         .
    0828   79          2505               LD  A,C                      sCALCULATE   AMOUNT  OF  FRAME  ON  SCREEN
    0829   83          2506               ADD  A,E                     ;A  := X_EXTEWT   + X PAT  POS
    082A   D5          2507               PUSH  DE
                        2508    ;XXX
    0828   FE21        2509               cp  33                       IF   MUMBER  OF  NAMES  > 32
    082D   3802        2510               JR  C,LT33
    O82F   3E&20       2511               LD  A,32                     sTHEN  NUMBER   OF NAMES   := 32
    0831   5F           2512   L133:      LO  E,A                      SMUMBER  OF  NAMES  ON  SCREEN  EACH  ROW
                        2513    >XXXX
    0832   1600        2514               LD  D,0
    0834   05          2515               PUSH  DE                     3;GET COUNT  INTO  IY
    0835   FOE}        2516               POP  IY
    0837   D1          2517               POP  DE                      sRESTORE   DE
    0838   7B          2518               LD  A,E                      ;A  := X PAT _POS
    0839   09          2519               EXX                          sWOW  ADJUST  STARTING   POINTS   IN FRAME  LIST  AND
                       2520                                            sWAME  TABLE
    083A   C5          2521               PUSH  BC                     sSAVE  X AND  Y  EXTENT
   0838    ED44        2522              NEG                           72'S  COMPLIMENT   OF X PAT  _POS
   0830    4F          2523               LD  C,A
   O83E    0600        2524               LD  B,0
   0840   09           2525               ADO  HL,BC                   sADD  DISPLACEMENT   TO  FRAME  POINTER
   0841   EB            2526              EX  DE,HL
   0842   09           2527               ADD  HL,BC                   ;ADD  DISPLACEMENT   TO  WAME  TABLE  POINTER
   0843   EB           2528               EX  DE,WL
   0844   C1           2529               POP  BC             .                                                                                                                              ’
   0845   D9           2530               EXX
                        2531
   0846    181C        2532                      JR                  ENDIF  8
                        2533
                        2534   ;        ELSE
                        2535
   0848                 2536   ELSE 8
                        2537
   0848   7B            2538   PF2:       LD  A,E                      ;1S  XPAT  POS   + XEXTENT    > 31
   0849   81            2539              ADD  A,C
                        2540   ;          If  (.A,GT,31)                                                                                                              ‘
                        2541
   O84A   FEIF          2542                     CP                  31
   O84C   280F          2543                     JR                  2,ELSE 9
   084E   3800          2544                     JR                  C,ELSE 9
                        2545
   0850   3&20          2546                LD A, 32                     ;SUBTRACT   X PAT POS   FROM  31
    0882    D9                2604                      EXX
    0883    D1                2605                      POP  DE
    0884    Ci                2606                      POP  BC
                              2607    ;              ENDIF
                              2608    ;           ENDIF
                              2609
    0885                      2610   END  IF  10
                             2611
    0885    D9               2612                 EXX
    0886    C5               2613                 PUSH   BC
    0887    0600             2614                 LO  8,0                           ;INCREMENT     POINTER     INTO   FRAME   BY   X_EXTENT
    0889    09               2615                 ADD  Hi ,BC
    088A    EB               2616                 EX  DE, WL
    0888    010020           2617                 LD  BC, 32                        ;INCREMENT     OFFSET    BY  32
    O88E    09               2618                 ADD   HL,BC
    O88F    EB               2619                 EX  DE, WL
    0890    C1               2620                 POP   BC
    0891   D9                2621                 EXX
    08692   1C               2622                  INC  E
                             2623    ;         UNTIL    [.E,EQ,.B)               sUNTIL    Y=Y_EXTENT
                             2624
    0893    78               2625                         LO                     A,E
    0694   88                2626                         cp                     8
    0895   20cF              2627                         JR                    WZ,RPT_1
                             2628
    0897   C9                2629              RET
                             2630    ;
                             2631    ;          COMMENT     }
                             2632    SREKKARAERAERARE     GET.  BKGRND   SARERRAEAARERERAAKERAKAAAAAERERAEREERKKREKEKKERKEKE
                             2633    ;DESCRIPTION:          THIS   ROUTINE    GETS   THE  NAMES    FROM   THE  NAME    TABLE   WHICH    CONSTITUTE
                             2634    ;                    THE   BACKGROUND     ON  WHICH    AN  OBJECT    IS  TO  BE   MOVED
                             2635    ;INPUT:                HL  =  LOCATION    IN  CPU   RAM  TO   WHICH   THE   NAMES   ARE   MOVED
                             2636    ;                     D  =  Y PAT  POS     [TOP  ROW   OF  PATTERN)
                             2637    ;                      E—=  X_PAT_POS      [LEFT  HAND   COLUMN)
                             2638    ;                     B  =  Y EXTENT     OF  PATTERN
                             2639    ;                      C =  X EXTENT     OF  PATTERN
                             2640    SHAAAAAEAAEAAARAARAEARATARAARAAAKERAAAAARAREKARAEAKAEARAAERAEAKAAREAKREREKRAKEAKRKEKEREE
                             2641    ;
                             2642                         GLB                   GET  _BKGRND
   0898                      2643   GET  BKGRND:                                                                                                                                                                             d
   0898    CD08C0            2644              CALL   CALC_OFFSET               sOFFSET     INTO  NAME    TABLE   OF   POSITION    OF  UPPER   LEFT
   0898    C5               2645               PUSH   BC                        ;                                 HAND   PATTERN
   089C    0600             2646               LD  B,0                          ;GET   X EXTENT     INTO   IY
   O89E    C5               2647               PUSH   BC                        ;     NUMBER   OF   NAMES   PER   ROW
   OB9F    FDE1             2648               POP   IY
   O8A1    C1               2649               POP   BC
                            2650    ;          REPEAT                           7Y_EXTENT-1      TIMES
                            2651
   O8A2                     2652    RPT  2
                            2653
   O8A2   C5                2654                  PUSH   BC                                                                                                                                           ‘
   08A3   D5                2655                  PUSH   DE
   O8A4   E5                2656                  PUSH   HL
   O8AS   FDES              2657                  PUSH   IY
   O8A7   3€02              2658                  LD     A,2                    ; TABLE   CODE   FOR  PATTERN     NAME   TABLE
   O8A9   CD1IBA3           2659                  CALL   GET VRAM
   OBAC   FDE1              2660                  POP   IY
    OBAE   £1              2661                POP  HL
    OBAF   D1               2662               POP  DE
    0880   C1               2663               POP  BC
    0881   C5               2664               PUSH  BC
    0882   0600            2665                LO B,0                      ;BC  :=  X_EXTENT
    0884   09              2666                ADD  HL,BC                  sPOINT   HL  TO BEGINNING   OF  NEXT  ROW
    0885   010020          2667                LD 8C,32
    0888   EB              2668                EXDE,  HL
    0889   09              2669                ADD  HL,BC                  7INCREMENT    OFFSET  BY  32
    O8BA   EB              2670                EX DE, WL                                        .
    0888   C1              2671                POP  BC
    08Bc   05              2672                DEC  B
                           2673   ;        UNTIL    [.B,EQ,0)
                           2674
    O88D   20€3            2675                       JR.                 NZ,RPT  2
                           2676
    O8BF   C9              2677             RET
                           2678   ;
                           2679   ;          -COMMENT  )}
                           2680   SARARARAAASAAARR    CALC .OF FSET  SSRAAKAAAKAARKARKAARERAAARARAAAAAAAAEKRAARAAERAEKER
                           2681   ;DESCRIPTION:        THIS   ROUTINE  CALCULATES     THE  PROPER   OFFSET   INTO  THE  NAME  TABLE
                           2682   ;                   FOR  THE  PATTERN   POSITION    GIVEN   BY XPAT   POS,   YPAT  POS.     THE
                           2683   ;                   FORMULA   USED  IS:  OFFSET    = 32*Y PAT_POS    +  XPAT  POS
                           2684   ;INPUT:              D  = Y PAT POS
                           2685   ;                   —  = X PAT POS
                           2686   ;QUTPUT:             DE  =  OFFSET
                           2687  SEKAASKKLAKARAKAAAAEATAAAKAARAAAAKAARARAKARAARAAARAKAERKREKAAEEKAARAKERAARARAEKAAKEE
                           2688   ;
   08co                    2689  CALC_OFFSET:
   086CO  E5               2690             PUSH  HL
                           2691  ;          IF  (.0, 1S,MINUS)            EXTEND     SIGN
                           2692                      |
   08C1   CB7A             2693                       BIT                 7,0
   08C3   2804             2694                       JR                  Z,ELSE  11
                           2695
   08C5   26FF             2696                LD H,OFFH
                           2697
   08C7    1802            2698                       JR                  END IF  11
                           2699
                           2700  ;          ELSE
                           2701
                           2702  ELSE  11
                           2703
                           2704                LD H,0
                           2705  ;          ENDIF
                           2706        |
                           2707  END    IF_11
                           2708
                           2709             LD  1,0                       ;   OFFSET   =  32*Y PAT  POS   + XPAT  POS
                           2710             ADD HL, HL                    ;HL=2*Y  PAT  POS
                           2711             ADD HL,  HL                   +    4k                                                                                                      ‘
                           2712             ADD  HL,HL                    >    Be     om
                           2713             ADD  HL,HL                    ;   %4*
                           2714             ADD  HL,HL                    -   328     4
                           2715  :          IF  (.£,1S,MINUS)             -EXTEND   SIGN
                           2716
   081    CB78             2717                       BIT                 7,E
    0803 2804          2718                   JR               2,ELSE12
                       2719
    0805 16FF          2720             LO D,OFFH
                       2721
    0807 1802          2722                   UR               END_IF12
                       2723
                       2726  ;        ELSE
                       2725
                       2726  ELSE12
                       2727
    08D9 1600          2728             LO 0,0
                       2729  ;        ENDIF
                       2730
                       2731  ENOIF  12
                       2732
    0808 19            2733           ADDHL ,DE                ;HL=32*Y PAT _POS  + XPAT POS
    O8DC EB            2734           EX DE,HL
    080  £1            2735           POP WL
    O8DE C9            2736           RET
                       2737
                       2738  BRARAAAAAAAAAERAAAERARKER   EXTERMALS SRASSSRALARRAAARARAARERARARAKAEERE
                       2739
                       2740  ;EXT   GET VRAM_
                       2741  ;EXT   PUT_VRAN_
                       2742  ;EXT   RAM  READ
                       2743  ;EXT   VRAM WRITE
                       2744  ;EXT   WORKBUFFER
                       2745   PROG
                            2747
                            2748   * THIS  MODULE   CONTAINS    CODE   FOR  THE   PUTISPRITE    AND  PUTOSPRITE
                            2749   * ROUTINES.    THESE   ROUTINES    TURN  OUT   TO  BE ESSENTIALLY     THE  SAME   CODE
                            2750   * WITH  TWO   SLIGHTLY   DIFFERENT     ENTRY   POINTS
                            2751
                            2752
                            2753  *  IT  IS CALLED   WITH   THE  ADDRESS    OF  THE   SPRITE   OBJECT   IN  THE  IX  REGISTER.
                            2754
                            2755  *  THE  FORMAT   FOR  SPRITE   OBJECTS    IS
                            2756
                            2757  * SPRITE   OBJECT    = RECORD
                            2758  *  GRAPHICS:     “SPRITE  GRAPHICS
                            2759  *    STATUS:“SPRITE  STATUS
                            2760  *   SPRITE    INDEX:BYTE                          {SPRITE   NAME  TABLE    INDEX  OF  THIS   SPRITE)
                            2761  *  END  SPRITE  OBJECT
                            2762
                            2763  * SPRITE   GRAPHICS    =  RECORD
                            2764  *  OBJECT    TYPE:BYTE
                            2765  *    FIRST  GEN   NAME :BYTE                      (WAME   OF  FIRST   SPRITE  GENERATOR)
                            2766  *    PTRN _POINTER:“PATTERN      GENERATOR        (POINTER    TO  ROM'ED   GENERATORS)
                            2767  *    WUMGEN:BYTE                                  (WUMBER   OF  ROM'ED   GENERATORS)
                            2768  *    FRAME  TABLE   PTR:“ARRAY[O..nn)        OF  FRAME   {TABLE   OF ANIMATION    FRAMES)
                            2769  * END   SPRITE  ROM  GRAPHICS
                            2770
                            2771  *  SPRITE_STATUS      =  RECORD
                            2772  *    FRAME:BYTE                        {CURRENT    ANIMATION    FRAME)
                            2773  *    X_LOCATION:    INTEGER
                            2774  *    Y_ LOCATION:   INTEGER
                            2775  *   WEXT  GEW:BYTE                     CINDEX   OF  FREE   SPACE   IN  GENERATOR   TABLE)
                            2776  * END  SPRITE    STATUS
                            277
                            2778  *  FRAME  =  RECORD
                            2779  *                                      {SPRITE'S    COLOR   FOR  THIS   FRAME)
                            2780  *                                      (THIS   FRAME'S   OFFSET    FROM  NAME  FROM   FIRST  GEN NAME)
                            2781  * END   FRAME
                            2782
                            2783  * SPRITE   =  RECORD
                            2784. *    Y:BYTE
                            2785  *    X:BYTE
                            2786  *    WAME:BYTE                                                                                                                                                             >
                           2787   *    COLOR_AND_TAG:BYTE
                            2788  * END  SPRITE
                           2789
                           2790   *keedenaaaTanasadeeeeeeeeNAAeeneeAeKAeeeeAeeeehaeeeteeeeeeeeeanteene
                           2791
                           2792   Sheeneaewnnnenenneeeeeenete         DICTIONARY     **teeeeneeeneneneeeneneeeanee
                           2793
                           2794  ;                    EXT                 WORK   BUFFER
                           2795   * WORK BUFFER     IS  A POINTER    IN  CARTRIDGE    ROM,   LOCATED   AT  8006H,   TO THE
                           2796   * FREE   BUFFER   AREA  TO  BE  USED   BY  THE  GRAPHICS    ROUTINES.
                           2797
               <OO0F>      2798   SPRITE PTR          EQu                   ly                                                                                                          .
                           2799   * SPRITE   PTR   IS A  POINTER   TO  THE   NEW  SPRITE   NAME   TABLE  ENTRY   BEING
                           2800   * BUILT   BY  THIS  ROUTINE.
                           2801
               <OOOE>      2802   THIS SPRITE         EQu                   Ix
                           2803   * THIS  SPRITE    IS A  POINTER    TO  THE  SPRITE   OBJECT   BEING   PUT
                        2804
               <0000>   2805  GRAPHICS         EQU                0
               <0002>   2806  STATUS           EQU                2
               <0004>   2807  SPRITE_INDEX   § EQU                4
                        2808  * FIELD OFFSETS  FOR SPRITE  OBJECT    RECORDS
                        2809
               <0000>   2610 OBJECT TYPE       EQU                0
               <0001>   2811  FIRSTGEN  NAME   EQU                1
               <0002>   2812  PIRN POINTER     QU                 2
               <0004>   2813  NUMGEN           EQU                4
               <0005>   2814  FRAMETABLE PTR   EQU                5
                        2815  * FIELD OFFSETS  FOR SPRITE   GRAPHICS   RECORDS
                        2816
               <0000>   2817  FRAME            EQU                0
               <0001>   2818  X_LOCATION       EQU                1
               <0003>   2819  YLOCATION        EQU                3
               <0005>   2820 WEXT GEN          EQU                5
               <0000>   2823  COLOR            EQU                0
               <0001>   2824  SHAPE            EQU                1
               <0000>   2827  Y                EQu                0
               <0001>   2828  x                EQU                1
               <0002>   2829  NAME             EQu                2
               <0003> 2830    COLOR AND TAG    €&QU               3
                        2831  * FIELD OFFSETS  FOR SPRITE   RECORDS
                        2832  SEARARAAEKAARARAARKAARE   EXTERNAL  PROCEDURES     RRAAERAEAEAKKAEEARKAREAEE
                        2833
                        2834  ; EXTPUT  VRAM,GET  VRAM
                        2835  * EXTERNAL PROCEDURE PUT   VRAMP   (TABLE CODE:BYTE;     START_INDEX,SLICE:BYTE;
                        2836  *                                  VAR  DATA: BUFFER;  ITEMCOUNT:   INTEGER);
                        2837
                        2838  * EXTERNAL PROCEDURE GET  VRAMP    (TABLE CODE:BYTE;     START INDEX,SLICE:BYTE;
                        2839  *                                  VAR  DATA: BUFFER;  ITEM COUNT:  INTEGER);
                        2840
                        2841  *PUT VRAM  SENDS  A BLOCK  OF  DATA  TO  THE  TABLE  SPECIFIED    BY TABLE CODE.
                        2842  * THE SLICE, START  INDEX,  AND   ITEM COUNT   ARE  TABLE  DEPENDANT.  GET  _VRAM
                        2843  * DOES THE INVERSE OPERATION.                                                                                                                                      :
                        2844
                        2845  *   - TABLE CODE  IS PASSED   IN A
                        2846  *   - STARTINDEX,SLICE    IN  DE
                        2847  *   - DATA BUFFER  ADDRESS   IW HL
                        2848  *   ~-BYTE COUNT  PASSED  IN  IY
                        2851
                        2852                   PROG
                        2853    GLB PUTOSPRITE,PUTISPRITE
                        2854                                                                                                                                               ‘
                        2855  * BEGIN PUTOSPRITE
               <O8DF>   2856  PUTOSPRITE       EQU                $
                        2857
                        2858  *   SPRITE_PTR  :=WORK  BUFFER
    O80F  FD2A8006      2859                   LD                 SPRITE PTR,   (WORK BUFFER]
                        2860
                         2861   *   WITH THISSPRITE*,SPRITE     PTR®   DO
                         2862
                         2863   *     IF (STATUS*.X  LOCATION    >  -8)  AND (STATUS*.X LOCATION    <  256) AND
                         2864   *        (STATUS*.Y  LOCATION    >  -8)  AND (STATUS*.Y LOCATION    <  192) THEN
     O8E3   DD6E02       2865                    Lo                  L, (THIS.SPRITE+STATUS)
     OBE6   DD6603       2866                    LO                  H, [THISSPRITE+STATUS+1)
     O8E9   110001       2867                    LD                  DE,X LOCATION
     O8EC   19           2868                    ADD                 HL ,DE            ;  (HL) =  XLOCATION
     OBED   4E           2869                    TT                  C, (HL)
     O8EE   23           2870                    INC                 HL
     OBEF  46            2871                    Lo                  B, (HL)           ; BC  = X LOCATION
     O8FO   78           2872                    LO                  A,B               ; COMPARE   BC  WITH -8
     O8F1   FEOO         2873                    cP                  0
     O8F3   2808         2874                    JR                  Z,0K_ 1
     O8F5   FEFF         2875                    cP                  -4
     O8F7  C2054         2876                    JP                  NZ,DONT PUT
     O8FA   79           2877                    LD                 A,C
     OBFB   FEF9         2878                    cP                  -7
     OBFD  FAOAS4        2879                    JP                 N,DONT  PUT
    0900                 2880 OK  1
     0900  23            2881                    INC                HL                 ; [HL]  =  Y_LOCATION
     0901  4e            2882                    LD                 C, (HL)
     0902  23            2883                    INC                HL
     0903  46            2884                    LD                 B, (HL)            ; BC  = YLOCATION
     0904  78            2885                    LO                 A,B                ; COMPARE   BC WITH  -8
     0905  FEOO          2886                    cP                 0
     0907  2808         2887                     JR                 2,0K_  2
    0909   FEFF         2888                    cp                   -1
    0908   C20A54       2889                     JP                 N2,DONT  PUT
    O90E   79           2890                     LD                 A,C
    O90F   FEF9         2891                    cP                   -7
    0911   FAQAS4       2892                     JP                 M,DONT  PUT
   0914                 2893  OK  2
                        2894
                        2895   *        IF STATUS*.X  LOCATION    < 0  THEN
    0914   28           2896           |        DEC                 HL
    0915   28           2897                    DEC                 HL                 ; (HL)  = HIQX_LOCATION)
    0916   7E           2898                    Lo                  A, CHL)            ; COMPARE  WITH   0
    0917   FEOO         2899                    cP                  0
    0919   CAOSCA       2900                    JP                  2, CONTINUE
                        2901
                        2902   *          X := BYTE(STATUS*.X    LOCATION)    + 8
    091C   28           2903                    DEC                 HL                 ;(HL)  = *X_LOCATION
    0910   4E           2904                    LD                  C, (HL)
    O91E   23           2905                    INC                 WL
    O91F  46            2906                    LD                  B, (HL)
    0920  210008        2907                    LO                  HL,8
    0923  09            2908                    ADD                 HL, BC
    0924  7D            2909                    LD                  A,L
    0925   FD7701       2910         |          LD                  [SPRITE  PTR+X},A
                        291                                                                                                                                           ‘
                        2912   *         COLOR  AND TAG    :=GRAPHICS*.   FRAME TABLE (STATUS*.FRAME)]  .COLOR  OR 80H
    0928  DD6E00        2913                    LD                  L, {THISSPRITE+GRAPHICS)
    0928  006601        2914                    LD                  H, [THIS SPRITE+GRAPHICS+1)
    092E   110005       2915                    LD                  DE, FRAME TABLE PTR
    0931   19           2916                    ADD                 HL,DE             (HL)   =  FRAME TABLE PTR
    0932  EB            2917                    EX                  DE,HL
    0933   1A              2918                      LD                  A, (DE)
    0934  6F               2919                      LD                  L,A
    0935   13              2920                      Inc                 OE
    0936   1A              2921                      LD                  A, (DE)
    0937  67               2922                      Lo                  H,A                  ; [HL] =  FRAME   TABLE   PTR*
    0938  E5              2923                      PUSH                 HL
    0939  DD6E02           2926                      LD                  L, (THIS SPRITE+STATUS)
    093C  006603           2925                      LD                  H, (THIS SPRITE*STATUS*1)
    O93F  110000           2926                      LD                  DE ,FRAME
    0942  19              2927                       ADD                 HL ,DE               ;CHL]  =  FRAME
    0943  7E              2928                       LD                  A, (HL)              ;CALCULATE    OFFSET    OF
    0944  CB27            2929                       SLA                 A                    ;COLOR  ENTRY
    0946  010000         2930                        LD                  BC,0
    0949  4F              2931                       LO                  C,A
    O94A  E1             2932                       Pop                  ML
    0948  09             2933           |           ADD                 HL ,BC                ;(HL)  =  COLOR
    O94C  7E              2934                       LD                  A, (HL)              ;OR  IN BOH
    0940  F680            2935                      OR                   80H
    OF    FD7703          2936                       LD                  (SPRITE_PTR+COLOR_AND      TAG)  ,A
                          2937                                      _-
    0952  C30A00         2938                        JP                 PUT_Y_AND    NAME
                          2939   *         ELSE
                         2960    REKARRERAE  CONT  1NUE BELOW
                          2941
                          2942
                          2943   *  BEGIN  PUTISPRITE
               <0955>     2944   PUTISPRITE         EQU                 $
                         2945                       |
                          2946   *    SPRITE_PTR    := WORK  BUFFER                                 |
   0955   FD2A8006        2947                )     LD                  SPRITE_PTR,    (WORK  BUFFER)
  |                       2948
                          2949   *    WITH  THIS SPRITE*,   SPRITE  PTR*   DO
                          2950
                          2951   *      IF  (STATUS*.X  LOCATION     > -32)  AND   (STATUS*.X   LOCATION     < 256)   AND
                          2952   *          (STATUS*.Y_  LOCATION    > -32)  AND   (STATUS*.Y   LOCATION     <  192)  THEN
   0959  DD6E02           2953                      LD                  L, (THIS  SPRITE*STATUS)
   095C  006603           2954                      LD                  H, (THIS SPRITE*STATUS+1)
   095F  110001           2955                      LD                  DE ,X_LOCATION
   0962  19               2956                      ADD                 HL ,DE               ;  CHL] =  X_LOCATION
   0963  4E             2957                        LD                  C, (HL)                                                                       |                                                     ,
   0964  23               2958                      INC                 HL
   0965  46               2959                      LD                  B, (HL)              ; BC  = X_ LOCATION
   0966  78              2960                       LO                  A,B                  ; COMPARE   BC   WITH   -32
   0967  FEOO            2961                       cP                  0
   0969  2808           2962                        JR                  Z,0K_ 3
   0968  FEFF           2963                        cP                  -1
   0960  C20A54          2964                       JP                  NZ,DONT  PUT
   0970  79              2965                       LD                  A,C
   0971  FEE1           2966                        cP                  -31
   0973  FAOAS4          2967                       JP                  M,DONT  PUT
  0976                   2968  OK   3                                                                                                                                               .
   0976  23              2969                       INC                 HL                  ;  CHL]  =  YLOCATION
   0977  4E              2970                       LD                 C, (HL)
   0978  23              2971                       INC                HL
   0979  46              2972                       LD                 B, (HL)              ;  BC =  YLOCATION
   O97A  78              2973                       LD                 A,8                  ;  COMPARE   BC  WITH   -32
   097B  FEQO            2974                       Cp       |         0
                097D   2808           2975                       JR                   Z,0K_ 4
                OO7F   FEFF           2976                       cP                   4
                0981   C20A54        2977                        JP                  NZ,DONT_PUT
                0984   79             2978                       LD                  a,C
                0985  FEE1           2979                        cP                   -31
                0987  FAOAS4          2980                       JP                  M,DONT   PUT
               098A                   2981  OK   4
                                      2962
                                      2983   *         IF  STATUS*.X  LOCATION     < O  THEN
                O98A  2B             2984                       DEC                  HL
                0988  28              2985                       DEC                 HL                    ; (HL)   =  HI(X_LOCATION)
                098C  7E              2986                       LD                  A, (HL)               ; COMPARE    WITH  0
                098D  FEO             2987                       cP                  0
                O98F  CAOSCA          2988                       JP                  Z, CONTINUE
                                     2989                           ;                            |
               |                      2990   *           X  := BYTE(STATUS*.X     LOCATION)     +  32
                0992  28              2991                       DEC                 HL                    ;(HL)  =  *X_LOCATION
                0993 4E   .          2992                        LO                  C, (HL)
               0994   23             2993                        INC                 HL
               0995   46              2994                       LD                  B, (HL)
               0996   210020         2995                        LO                  HL ,32
               0999   09             2996                       ADD                  HL ,BC
               099A   7D             2997                        LO                  A,L
               0998   FD7701         2998                        LD                  [SPRITE_PTR+X]    ,A
                                     2999
                                     3000    *           COLOR  AND  TAG   :=  GRAPHICS*.FRAME    TABLE   [STATUS*.FRAME]     .COLOR   OR  80H
               O99E  DD6E00          3001                       LD                   L, (THIS SPRITE+GRAPHICS)
               O9A1  006601          3002                       LD         |         H, (THIS SPRITE+GRAPHICS+1)
               O9A4   110005         3003                       LO                   DE, FRAME  TABLE  PTR
               O9A7   19             3004                       ADD                  HL ,DE               ; (HL)  =  FRAME  TABLE  PTR
               O9AB  EB              3005                       EX                   DE,HL
               O9AD   1A .           3006                       LO                   A, (DE)
               O9AA  6F              3007                       LD                   LA
               O9AB   13            3008                         INC                 DE
               OPAC   1A            3009                        LD                   A, (DE)
               O9AD  67              3010                       LO                   H,A                  ;(HL]   = FRAME   TABLE  PTR*
               OOAE  E5              3011           |           PUSH                 HL
               O9AF  DDSED2          3012                       LD                   L, (THIS SPRITE+STATUS)
               0982  0D6603          3013                       LD                   WH,(THIS SPRITE+STATUS#1)
               0985  110000         3014                        LD              |   DE , FRAME
               0988  19              3015                       ADD                  HL,DE                ;(HL)   = FRAME
               0989  7E              3016                       LD                  A,  (HL)              ;CALCULATE    OFFSET   OF
               O9BA  CB27            3017                       SLA                 A                     ;COLOR   ENTRY
               O9BC  010000         3018                        LO                  BC ,0
               OOBF  4F              3019                       LO        .         C,A
               09CO  E1              3020                      POP                  HL
               09C1  09              3021                       ADD                 HL ,BC                ;(HL)   = COLOR
               09C2  7E              3022                       LD                  A, (HL)               :OR  IN  80H
               09C3  F680            3023                       mR                  80H
                                      02
               O9CB  1836            3026                       JR                  PUT_Y_AND_   NAME                                                                                           .
                                     3027   *         ELSE
              |                      3028   ****eeaees    CONTINUE   FROM  HERE
               O9CA                  3029   CONTINUE                  |
                                     3030
                                     3031
{             ‘           f                                                 ;                                                             |                                                 f                                      4
                           3032
                           3033   *         X := BYTE(STATUS*.XLOCATION)
        O9CA  DD6E02       3034                   LO              L,{THIS SPRITE+STATUS)
        O9CD  006603       3035                   i)              H, (THIS SPRITE+STATUS+ 1}
        0900   110001      3036                   LD              DE,XLOCATION
        0903   19          3037                   ADO             HL,DE             ; (HL)  = X_LOCATION
        0904  7E           3038                   LD              A, (HL)
        0905  F07701       3039                   LO               (SPRITEPTR+X) ,A
                           3040
                           3041   *         COLOR AND TAG := GRAPHICS*.FRAME TABLE [STATUS*.  FRAME] .COLOR
        0908  DD6E00       3042                   LD              L, {THISSPRITE+GRAPHICS)
        0908  DD6601       3043                   tb              H, (THISSPRITE+GRAPHICS+1)
        O9DE  110005       3044                   LD              DE,FRAME TABLE PTR
        O9E1  19           3045                   ADD             WL,DE             7(HL) =  FRAME TABLE  PTR
        O9E2  EB           3046                   EX              DE,HL
       -Q9€3   1A          3047                   LO              A, (DE)
        O9E4  6F           3048                   LO              L,A
        0965   13—i«       3049                   INC             DE
        O9E6  1A           3050                   LD              A, (DE)
        O9E7  67           3051                   Lo              H,A              ; (HL) =  FRAME TABLE  PTR*
        O9E8  £5          -3052                   PUSH            HE
        O9E9  DDGE02       3053                   LD              L, (THISSPRITE+STATUS)
        O9EC  DD6603       3054                   LO              H, (THISSPRITE*STATUS+1)
        O9EF  110000       3055                   LO              DE,FRAME
        O9F2  19           3056                   ADD             HL DE             s(HL) =  FRAME
        O9F3  7E          .3057                   LO              A,CHL)           sCALCULATE   OFFSET  OF
        O9F4  CB27         3058       |           SLA             A                >COLOR   ENTRY
        09F6  010000       3059                   LO              BC,0
        O9FO  4F           3060                   LO              C,A
        OOFA  E1           3061                  PoP              WL
        O9FB  09           3062                   ADD             ‘WL,BC           ; (HL) =  COLOR
        O9FC  7E           3063                   LD              A,(HL)
        O9FD  FO7703       3064                   LO              (SPRITE _PTR+COLORAND  TAG)  ,A
                           3065
                           3066  *        ENDIF
        0a00               3067  PUT_Y_AND NAME
                           3068
                           3069  *        Y := BYTE(STATUS*.YLOCATION)
        OAOO  DD6E02       3070                   LO              L,{THISSPRITE+STATUS)
        OA03  DD6603       3071                   LD              H,(THIS SPRITE*STATUS+1]                                                                                         ’
        OA06  110003       3072                   LD              DE,YLOCATION
        OA09  19           3073                   ADD             HL,DE            ;  (HL) =  Y_LOCATION
        OAOA  7E           3074                   LO              A,(HL)
        Oads  FD7700       3075                   LD              (SPRITE PTR+Y],A
                           3076
                           3077  *        NAME := GRAPHICS*.FRAMETABLE [STATUS*. FRAME) .SHAPE
                           3078  *                + GRAPHICS*.FIRSTGEN NAME
        OAOE  DD6E00       3079                   LO              L,(THISSPRITE+GRAPHICS)
        0A11  DD6601       3080                   LO              H,(THISSPRITE+GRAPHICS+1)
        0A14  110005       3081                   LO              DE,FRAMETABLE  PTR
        OA17  19           3082                   ADD             HL,DE            ;(HL)  =  FRAMETABLE  PTR                                                  ‘
        0A18  £B           3083                   EX              DE,HL
       OA19   1A           3084                   LO              A,(DE)
       OA1A  6F            3085                   LO              LA
        OA18  13           3086                   INC             DE
        OAIC  1A           3087                   LO              A,(DE)
        OA1D  67           3088                   LO              H,A              7(HL)  = FRAME TABLE  PTR*
    OAIE  E5            3089                     PUSH              HL
    OA1F  DD6E02        3090                     Lo                L, (THIS SPRITE+STATUS)
    QA22 006603         3091                     LD                H, (THIS SPRITE+STATUS+1)
    0A25  110000        3092                     LD                DE,FRAME
    0A28  19            3093                    ADD                HL ,DE             ; (HL)=  FRAME
    0A29  7E            3094                    LD                 A, (HL)            CALCULATE   OFFSET  OF
    OA2ZAC827           3095                    SLA                A                  SHAPE   ENTRY
    OA2C 010000         3096                    LD                 BC,0
    OA2F 4F             3097                    Lo                 C,A
    OA30 E1             3098                    poe                HL
    0A31 09             3099                    ADD                HL,BC
    OA32 23             3100                     INC               HL                 ;(HL) =  SHAPE
    0A33 7E             3101                    LD                 A, (HL)
   0A34  DD6E00         3102                    LD                 L, (THISSPRITE+GRAPHICS)
   0A37  006601         3103                    \0.                H, (THISSPRITE+GRAPHICS+1)
   OA3A  110001         3104                    Lo                 DE,FIRST  GEN NAME
   0A30  19             3105                    ADD               HL  ,DE             ;(HL] =  FIRST GEN NAME
   OA3E  86             3106                    ADD                A, (HL)                 |
   OA3F  FD7702         3107                    LD                 [SPRITE  _PTR+NAME) ,A
                        3108
                        3109  *        PUT VRAM   (0,THIS SPRITE*.SPRITE_INDEX,     SPRITE _PTR,1)
   OA42  AF             3110                    XOR                A
   0A43  1600           3111                    Lo                 D,0
   OA45  DDSEOS         3112                    LD                 E, [THISSPRITE+SPRITE_   INDEX)
   OA48  FDES           3113                    PUSH               SPRITE PTR
   OAGA  E1             3114                    pop                HL
   OA4B  FD210001   =   3115                    LO                 1Y,1               COUNT  OF  ONE  ITEM
   OAGF  CDIFBE         3116                    CALL               PUT_VRAM
                        3117
   OA52  1832           3118                    JR                 EXIT_PUT_SPR
                        3119  *      ‘ELSE
   0A54                 3120  DONT PUT    ; PUT SPRITE  OFF  THE  SCREEN  BY SETTING   ITS X AND  EARLY  CLOCK
                        3121
                        3122  *        GET VRAM   (0,THIS SPRITE*.SPRITE_INDEX,SPRITE      PTR, 1)
   OAS4  FDES           3123                    PUSH               SPRITE PTR         ; SAVE INDEX  REGS.
   0AS6  DDES           3124                    PUSH               THISSPRITE
   OAS8  FDES           3125                    PUSH               SPRITE PTR
   OASA  FOES           3126                    PUSH               SPRITE PTR
   OASC  AF             3127                    OR                 A
   ASD   1600           3128                    LD                 D,0                                                                                                                ,
   OASF  DDSEOS  ©  =   3129                    LD                 E,(THIS SPRITE*SPRITE_INDEX]
   OA62  E1             3130                    PoP                HL
   0A63  FD210001       3131                    LD                 1Y,1              ;COUNT  OF ONE  ITEM
   0A67  CD1FBB         3132                    CALL
                        3133
                        3134  *        SPRITE_PTR.X  :=  0
   OA6A  3€00           3135                    LD                 A,0
   OA6C  FDE1           3136                    Pop                SPRITE PTR
   OASE  FO7701         3137                    LD                 [SPRITE PTR+X},A
                         138
                       3139   *        SPRITE_PTR.COLOR  AND  TAG   := 80H                                                                                        ,
   0A71  3€80          3140                     LO                A, 80H
   OA73  FO7703        3141                     LD                 [SPRITE PTR+COLOR_AND_  TAG) ,A
                       3142
                       3143   *        PUT VRAM   (0,THIS SPRITE*.SPRITE_INDEX,     SPRITE PTR, 1)
   OA76  AF            3144                     XOR               A
   0A77  1600          3145                     LD                D,0
       a          i                                             {          \  |       ee         1          4       ee i          4ee         i                       {           ‘            q
    OA79   DDE1           3146                       PoP                 THIS   SPRITE
    OA7B   DD5E04         3147                      LD                   E, (THIS  SPRITE+SPRITE    INDEX]
    OA7E   1              3148                      PoP                  HL       -                -
    OA7F   FD210001       3149                      LD                   1Y,1                ;COUN POF  ONE   TEN
    OA83   CDIFBE         3150                      CALL                 PUT  _VRAM
                          3151                                               ~
                          3152   *      END _IF
                          3153
                          3154   * END  PUTOSPRITE,PUTISPRITE
   OA86                  3155   EXIT  PUT SPR
   0A86   C9             3156                       RET
                         3157     PROG
                      3159   ;
                      3160   eRSERRRKRAARE  MODIFIED    VERSION    TO RUN  ON   He ASSEMBLER    SRACACACAACAAAAAKKEARERRERREK
                      3161   ;
                      3162   ;                                                                      4/16/82
                     3163    ;                                                                      13:50:00
                     3164    osvadneesearasesenns     PUT  MOBILE    RERERAKEARAAAAKAAERARAAAKRARRAERAARAEKAARAREKRAREKREEK
                     3165    ;
                     3166    ;DESCRIPTION:       THIS  PROCEDURE    PLACES   A MOBILE   OBJECT   ON  THE  PATTERN   PLANE
                     3167    ;                  AT  THE  X,Y   PIXEL  LOCATION    SPECIFIED    IN THAT   OBJECT'S   RAM  STATUS
                     3168    ;                  AREA_
                     3169    ;
                     3170    ;                  A  BUFFER   AREA  OF  204  BYTES   (GRAPHICS    MODE  II)  OR  141  BYTES
                     3171    ;                   (GRAPHICS   MODE   1)  IS REQUIRED    FOR  FORMING   THE  NEW  GENERATORS
                     3172    ;                  REPRESENTING     THE  OBJECT   ON  IT'S  BACKGROUND       THE  PROCEDURE
                     3173    ;                  USES   RAM  STARTING   AT  (F BUF  SPACE)    FOR  THIS   BUFFER
                     3174    ;
                     3175    ;INPUT:             IX =  ADDRESS   OF  OBJECT   TO  BE PROCESSED
                     3176    ;                  HL  =  ADDRESS   OF  OBJECT'S   GRAPHICS    TABLES   IN  ROM
                     3177    ;                    B =  SELECTOR   FOR  METHOD   OF  COMBINING    OBJECT   GENERATORS
                     3178   ;                          WITH  BACKGROUND    GENERATORS
                     3179    ;
                     3180   :                          1 =  OBJECT   PATTERN   GENS  ORed   WITH  BACKGROUND    PATTERN   GENS
                     3181   ;                               COLOR1   OF  BACKGROUND    CHANGED   TO  MOBILE  OBJECT'S    COLOR
                     3182   ;                               IF  CORRESPONDING     PATTERN   BYTE  NOT  ZERO
                     3183;
                     3184   ;                          2 =  REPLACE   BACKGROUND    PATTERN   GENS   WITH  OBJECT  PATTERN    GENS
                     3185   ;                               TREAT  COLOR   SAME   AS #1
                     3186   ;
                     3187   ;                          3 =  SAME  AS  #1  EXCEPT   COLORO   CHANGED   TO  TRANSPARENT
                     3188   ;
                     3189   ;                          4 =  SAME  AS  #2  EXCEPT   COLORO   CHANGED   TO  TRANSPARENT
                     3190   ;
                     3191   gRARARAEAAEAREAEREREAAEERAREREEARAAEEREEAEREEERREERREREAREEAREERARERRERER                   REARS
                     3192   ;                                                               .
                     3193   ;)
                     3194   ;         EXT       READ VRAM,WRITE     VRAM,WORK   BUFFER,GET    VRAM,PUT    VRAM
                     3195   ;         EXT       PX TO  PTRN  POS,GET   BKGRND,   VDP MODE   WORD,  PUTFRAME
                     3196             GLB       PUT  MOBILE
                     3197   ;  THE  FOLLOWING   ARE OFFSETS    FROM   THE  START  OF  THE   FREE  BUFFER   AREA
                     3198   ;  THESE  LOCATIONS    USED  TO  STORE  VARIABLES    AND  PATTERN   AND  COLOR   DATA
            <0000>   3199   YDISP     EQU       0         7Y  DISPLACEMENT
            <0001>   3200   XDISP     £QU       1         7X  DISPLACEMENT
            <0002>   3201   COLR      QU        2         +COLOR
            <0003>   3202   FLAGS    QU         3         ;BITS   0,1  = SELECTOR    #,  BIT  X =  GRAPHICS   MODE   [1/11]
            <0004>   3203   FRM       EQU       *         ;FRM  =  TO  BE  DISPLAYED
            <0005>   3204   FGEN     €EQU       5         ;NAME   OF  FIRST  GENERATOR    IN  OBJECT'S   GEN  TABLE
            <0007>   3205   YP_OS    E&QU       7         ;¥ PAT  POS   OF  OLD SCREEN
            <0006>   3206   XP  OS   EQU        6         ;X_PAT_POS    OF  OLD  SCREEN
            <0012>   3207   YP_BK    £QU        18        7Y_PAT_POS    OF  BACKGROUND
            <0011>   3208   XP BK    £QU        17        ;X_PAT_POS    OF  BACKGROUND
            <001C>   3209  BK   PIN  EQU        28        ;START   OF  BACKGROUND    PATTERN   GENERATORS                                                                    ‘
            <0064>   3210  08/  PIN  EQU        100       ;START   OF  OBJECT'S   PATTERN   GENERATORS
            <0084>   32117 BK   CLR  EQU        132       ;START   OF  BACKGROUND    COLOR  GENERATORS
   0A87              3212  PUT  MOBILE
                     3213   ; GET  X AND   Y LOCATIONS,    CONVERT   TO  X  AND  Y PATTERN   POSITIONS    AND  X AND  Y
                     3214   ; DISPLACEMENTS     (AMOUNT   BY  WHICH  OBJECT   SHIFTED   OFF  PATTERN    POSITION   BOUNDARY)
   O0A87FD2A8006     3215            LD  IY, (WORK  BUFFER}         ;GET  START   OF  FREE  BUFFER   AREA
                                                                                                        q                                               q                        4            ql           \            \
    Oa8B8 3A73C3       3216            LD  A, {VOP_MODE WORD)          sFIND  OUT  WHICH  GRAPHICS   MODE  WE  ARE  IN
    OABE  CB4F         3217            BIT  1,A
                       3218   ;         IF (PSW,1S, ZERO)           ;THEN  MODE   I
    0A90  2004         3219            JR  WZ,ELSE1
    OA92  CBBS         3220              RES  7,8
    Gas   1802         3221            JR  END1
                       3222 ;          ELSE                         ;MODE   II
    OA96  CBFS         3223   ELSE1       SET 7,8
                       3224   ;        ENOIF
    0A98  FD7003       3225   END1     LD  {I¥+FLAGS) ,B            ;SAVE  SELECTOR
    OA9B  E5          3226             PUSH  HL                     ;SAVE  GRAPHICS   ADDRESS
    OQA9SCDD6603       3227            LD  H,(1X+3)                 sHL  3= ADDR    OF  STATUS
    OA9SF DD6ED2       3228            LD  L,(IX+2)
    OAA2  7E           3229            LD A, (WL)                   ;GET  FRAME  #
    OAA3  FO7704       3230            LD  (IY+FRM) A             3AND  SAVE
    OAA6  EEBO         3231            XOR  80H                     ;COMPLEMENT    TABLE  INUSE    FLAG
    OAAB  77           3232            LD  (HL),A                   sSAVE  BACK   IN STATUS   AREA
    OAAD  23           3233            INC  WL                      “POINT   TO XLOCATION
    OAAA  5E           3234            LO  E,(HL)                   E   := LOW  __LOCAT  ION
    OAAB  78           3235            LO  A,E
    QAAC  £607        3236             AND  7                       A   := @PIXELS   TO  RIGHT  OF  PATTERN   BOUNDARY
    OAAE  £044         3237            NEG
    OaB0  C608         3238            ADD  A,8                     ;AMOUNT   TO SHIFT   PATTERN   LEFT FROM  NEXT   PAT   BOUNDARY
    OQAB2 FD7701       3239            LD  (IY¥*XDISP),A            3SAVE
    OAB5  23           3240            EWC  OWL
    OAB6  56           3241            LD D, (HL)                   ;DE :=  X  LOCATION
   OaB7   CDO7E8      3242             CALL  PX_TO  PTRN POS        *CALCULATE   X_PAT_POS    OF BACKGROUND
   QABA   FD7311       3243            LD  {IY+XP BK)   ,E-         >AND  SAVE
   OABD   23           3244            INC  WL                      sPOINT  TO  YLOCATION
   OABE   5E           3245            LD E, (HL)                   ;E  := LOW  YLOCATION
   OABF   7B           3246            LD A,E         |
   OQACO  £607         3247            AND  7                            = #PIXELS   TO  RIGHT  OF  PATTERN  BOUNDARY
   OQAC2  FD7700      3248             LD  (1¥+YDISP] ,A           . SAVE
   OACS   23          3249             INC  WL
   OAC6  56           3250             LD D, (WL)                   ;DE  := YLOCATION
   OAC7  CDO7ES8      3251             CALL  PX_TO  PTRN_POS        ;CALCULATE   Y_PAT POS
   OACA   FD7312      3252             LD  (IY+¥P_BK),€
                      3253
                      3254   ;  WOW  GET THE  NINE  NAMES  THAT  CONSTITUTE    THE BACKGROUND    ON  WHICH  THE  MOBILE   OBJECT
                      3255   ;  WILL  BE SUPERIMPOSED                                                                                                                                       ,
 ' QACD  2A8006       3256   PM        LD HL, (WORK BUFFER)
   QADO  110013       3257             LD DE, YP_BK+1               ;POINT  TO  SPACE  FOR  BACKGROUND   NAMES
  OAD3   19           3258             ADD HL,DE
   OAD4  FD5612       3259             LD D, (1Y+yP  BK)            ;D :=  Y PAT POS
   OAD7  FDSE11       3260             LD E, (1Y*XP BK)             ;E :=  X PAT POS
 ~ OADA  010303       3261             LO BC,303                   38  :=  YEXTENT,    C :=  X“EXTENT
   OQADD CD0898       3262             CALL  GET_BKGRNOD           3GET   BACKGROUND   NAMES
                      3263 ;   READ   OLD_SCREEN   INTO BUFFER  AND   GET  COLOR  AND  FIRST GEN  NAME
   OAEO  005605       3264   PM2       LDD,  (1X+5)}               ;DE   := OLD  SCREEN  ADDRESS
   OAE3  DD5E04       3265             LD E, [1X+4]
   OAE6  DD7E06       3266             LDA,  (1X+6)                ;GET   FIRST  GEN  NAME                                         |                                    ‘
   OAE9  DOE1         3267             POP IX                      7 1X :=  ADDRESS   OF GRAPHICS
   OAEB  FD2A8006     3268             LD IY, (WORK BUFFER)
   OAEF  FD7705       3269             LO {IY+F GEN)  ,A           7SAVE   IN BUFFER
   OAF2  05           3270             PUSH DE                     ;SAVE   OLDSCREEN    ADDRESS
   OAF3  2A8006       3271             LD HL, (WORK  BUFFER)       ;HL  z=  ADDR  OF  START  OF  BUFFER
   OAF6  010006       3272             LD BC,XP OS                 ;SPACE   TO MOVE  OLD SCREEN    10
    OAF9  09             3273            ADD  HL ,BC
    OAFA  010008         3274            LD  BC, 11                     sGET  9  NAMES  FROM   VRAM
                         3275  ;         IF  (D,LT,   70H)              >THEN  OLD SCREEN     1S IN  VRAM
    OAFD  7A             3276            LD  A,O
    OAFE  FE70           3277            CP  70H
    0800  3005           3278            JR  WC,ELSE2
    0802  CDIFE2         3279               CALL  READ  VRAM
    0805  1803           3260               JR END2
                         3281  ;         ELSE                           ;OLD SCREEN    IN  CPU  RAN
    0807  EB             3282  ELSE2        EXDE,  WL
    0808  EDBO           3283               LDIR
   OBA                   3284  END2    ;ENDIF
                         3285
                         3286 ;  AT  THIS  POINT,    IX  = GRAPHICS,    [SP] =   OLDSCREEN
                         3287 ;  BACKGROUND    PATTERN   POSITION    AND  NAMES   STARTING   AT  YP  BK
                         3268 ;  OLD   SCREEN  PATTERN    POSITION   AND  WAMES   STARTING   AT  YP OS
                         3289 ;  FIND   ALL  NAMES   IN BACKGROUMD     WHICH  BELONG   TO  THIS  OBJECT'S    PATTERN   GENERATORS
                         3290 ;  AND   REPLACE  WITH   NAME   FROM  OLD  SCREEN   WHICH  CORRESPONDS     TO  THAT  PATTERN   POSITION
   OBOA   2A8006         3291  PMS       LD  HL, (WORK BUFFER)          SHL  :=  BUFFER  BASE
   0800   110013         3292           LD   DE,YP  BK+1
   0810   19             3293            ADD  WL ,DE                    sPOINT   TO FIRST   OF  BACKGROUND    NAMES
   0811  D9             3294             EXX
   0812  €D5B8006       3295             LD  DE, [WORK BUFFER)          sDE*  :=  BUFFER  BASE
   0816  210008         3296             LD  WL,YP _OS+1
   0819   19            3297            ADD   HL, DE
   OB1A  EB             3298             EX  DE,WL                      ;POINTS   TO FIRST   OF  OLD SCREEN    NAMES
   0818  D9             3299             EXX
   OB1C  FD2A8006       3300             LD  IY, (WORK BUFFER)
   0820  FD4E05         3301          .  UO  C,CIY+F_GEN)               ;C  := FIRST  GEN  NAME
                        3302   ;         00 8,9
   0823  0609           3303             LD 8,9
   0825  7E             3304  DLP          LD A,  (WL)                    *GET  A  NAME
   0826  91             3305               Sus                            -SUBTRACT   FIRST  GEN  NAME
                        3306   ;           IF  (_A,LT,  18)               *THEN  NAME   FALLS   INRANGE    OF  NAMES   FOR OBJECT
   0827  FEI2           3307               cP  1      |
   0829  300€           3308               JR  WC, END3
                        3309   >;             Ff  t A,GE,9)                  sTHEN  SUB  9 TO  FIND   CORRECT
   0828  FEO9           3310                  cP 9°
   0B2D  3802           3311                  JR C,END4
   082F  0609           3312                    sus  9                      ;    POSITION    IN OLD  SCREEN                                                                                         ,
   0831                 3313  END4            sENDIF
   0831  D9             3314                 EXX
   0832  6F             3315                  LD L.A                      ;FORM  A  POINTER   INTO  OLD SCREEN    NAMES
   0833  2600           3316                  LD H,0
   0835  19             3317                 ADD   HL,DE
   0836  7E             3318                 LD  A, CHL}                  ;GET  OLD SCREEN    NAME
   0837  09             3319                 EXX
   0838  77             3320                 LD   {[WL),A                 ;REPLACE   BACKGROUND    NAME  WITH   OLD SCREEN    NAME
  0839                  3321  END3         sENDIF
   0839  23             3322             INC WL                        -POINT   TO NEXT   NAME  IN  BACKGROUND
                        3323  ;         ENDDO
   083A  10€9           3324            DJNZ   DLP1                                                                                                                            ‘
                        3325
                        3326  ;  NOW  NEW  VERSION   OF  BACKGROUND    NAMES  WILL   NOT  CONTAIN   ANY  WAMES   OF  THIS  OBJECT
                        3327  ;  REPLACE   PREVIOUS   VERSION   OF  OLD SCREEN    WITH  THIS   NEW  BACKGROUND
   OB3C  01             3328  PMG       POP  DE                        ;DE  :=  OLD  SCREEN  ADDRESS
   0830  2A8006         3329            LO  HL, (WORK  BUFFER)         ;HL  :=  BUFFER  BASE
    0844  010008         3332             LO BC,11                      ;WUMBER   OF  BYTES   TO MOVE
                         3333   ;         IF  {.D,LT,  70H)             ;THEN  MOVE   DATA   TO VRAM
    0848  FE7O           3335             CP 70H
    0859  210013         3348             LD WL,YP  BK+1                sDISPLACEMENT     TO  BEGINNING   OF  BKGND  NAMES
    0@5E  010014         3351             LD BC,BK  PTN-8               sHL  POINTS   TO  BACKGROUND   PAT   GEN STORAGE   AREA   -8
                         3353   ;         DO B,9
    0862  0609           3354             LD 8,9
   0867   110008        3358:               LD DE,8                       ; INCREMENT   BUFFER   POINTER
   0860   1600          3362                LO D,0
   0871  3£09           3365                LD A,9                        ADD    [B-9]/3   TO  YPBK   TO  FIND
   0874  0600           3367                LD B,0
   0876  0603  .        3368   PM52         suB  3
   0878  3803           3369               JR  C,PMS1
   087B  18F9           3371                JSRPM52
   0885  FOCBO37E       3375                BIT7,   (IY+FLAGS}            TEST   GRAPHICS    MODE
   0889  FO210001       3376                LD 1Y,1                       *WUMBER   OF  ELEMENTS   TO  READ
   0880                 3377   PMS          1F   (PSW, 1S, ZERO)          >THEN  MODE   1
   OB8F  3E03           3379                  LD  A,3                     ;CODE  FOR  PATTERN    GENERATOR   TABLE
    OB9E    CB38            3387                  SRL E                       ;DIVIDE    NAME  BY  8
    OBAO    CB38            3388                  SRL E
    O8A2   CB38             3389                 SRL  E
    OBA4    1600            3390                 LD  D,0
    OBA6   3E09             3391                 LD  A,9                      ;CALC   POSITION    IN  BUFFER    TO  MOVE   GEN  TO
    OBAS   90               3392                 SUB  B
    OBAD   4F               3393                 LD  C,A
    OBAA   0600             3394                 LO  8,0
    OBAC   09               3395                 ADD  WL ,BC
    OBAD    FD210001        3396                 LD   1Y,1
    0881   3604             3397                 LD  A,4                      ;COLOR   GENERATOR     TABLE   CODE
    0883   CD1FBB           3398                 CALL  GET  VRAM
    0886    1821            3399                 JR  END6
   0888                     3400   ELSE6       7ELSE                          ;MUST   BE  MODE   I]
    0888   CB2F            3401                  SRA  A  |                    ;DIVIDE    YPOS    BY 8
    OBBA   CB2F            3402                  SRA  A
    OB8C   CB2F            3403                  SRA  A                       sA :=   THIRD   OF  TABLE,   O=1ST,    1=2ND,    2=3RD
   OBBE                     3404   PHM7           lf   (_A,LT,3)              slf  A  > 2,  THEN   Y“POS   >  23  ANO   THEREFORE     OFF  SCREEN
    OBBE   FES              3405                 cp  3
   0BCc0   3017             3406                 JR  NC, END7
    0BC2   57               3407                    LD  0,A                   sDE  :=  256*A   +  MAME
    08c3   05              3408                     PUSH  DE
    oBc4   €5              3409                     PUSH   WL
    0ecS   3€03            3410                     LD  A,3                   ;PATTERN    GENERATOR    TABLE   CODE
    0BC7   CD1FBB         3611                      CALL  GET  VRAM
    OBCA   £1              3412                     POP  HL                   ;HL  :=  PATTERN    BUFFER   ADDRESS
    0BCB   110068          3413                     LO  DE,BK  CLR-BK_PTN     ;DISPLACEMENT     BETWEEN    PATTERN    AND   COLOR   BUFFERS
    OBCE   19              3414                     ADD  HL ,OE               sHL  :=  POINTER    TO  COLOR   BUFFER
    OBCF   D1               3415                    POP  DE
    0800   F0210001         3416                    LD  IY,1
    0B8D4  3£04            3417                     LD  A,4                   ;CODE   FOR  COLOR   TABLE
    0806   CD1FBB         3418                      CALL  GET_VRAM
    0BD9                    3419   END7          sENDIF
    0809                    3420   ENDS        sENDIF
    0809   C1              3421                POP  BC                        sRESTORE    REGISTERS
    OBDA   E1               3422               POP  HL
    O8DB   D1               3423               POP  DE
                            3424   ;        ENDDO
    OBDC   1086             3425            DJNZ   DLP2
                            3426                                                                                                                                                                                 ,
                            3427   ; NOW  THE PATTERN    AND  COLOR   GENERATORS    ARE   IN THEIR   RESPECTIVE      BUFFERS
                            3428   ; SO  GET THE   FOUR  GENERATORS    FOR  THIS   FRAME   OF  THE  OBJECT
                            3429
    OBDE   DDE1           3430                       POP                   Ix                   ;RESTORE    GRAPHICS     POINTER
                            3431
    OBEO   D9               3432   PM8      EXX
    OBE1   0D5603           3433            LD  D, [1X+3)
   OBE4    DD5SE02          3434            LD  E, (1X+2)                  ;DE'  :=  NEW  GEN
   OBE7    004605           3435            LD  B, (IX+5]
   OBEA    DD4E04           3436            LO C,  CIX+4)                  ;BC'  :=  PTRN  POINTER
   OBED    D9               3437            EXX                                                                                                                                            .
   OBEE    DOES             3438            PUSH   IX
   OBFO    £1               3439            POP  HL                        sHL  :=  ADDRESS    OF  GRAPHICS
   OBF1    FD2A8006         3440            LD  IY, (WORK BUFFER]
   OBF5    FD7E04           3441            LD  A, [1Y+FRM}             sA  :=  FRM  #
   OBF8    87               3442            ADD  A,A                       7X2
   OBF9    4F               3443            LD  C,A
    OBFA   0600          3444          LD B,0
    OBFC   110006        3445          LD DE,6                     cFRAME POINTERS START AT  THIS  OFFEST
    OBFF   19            3446          ADD HL,DE
    0c00   09            3447          ADD WL,BC                   ;HL := POINTS TO FRAME POINTER   FOR FRAME
    0CO1   5E            3448          LD E,CHL)
    0co2   23            3449          INC HL
    0C03   56            3450          LOD, CHL)                   ;DE := ADDRESS OF  FRAMENAMES
    0C04   2A8006        3451          LD HL, (WORKBUFFER)         ;HL >= BUFFER BASE ADDRESS
    0cO07 01007C         3452          LD BC,0B8JPTN+24            USE  LOCATION FOR LAST GEN  TO  STORE NAMES
    OCOA  09             3453          ADD HL,BC
    ocoB  £5             3454          PUSH HL                     ;SAVE FOR LATER USE
    ococ  CS             3455          PUSH BC                     ;SAVE OFFSET
    OCOD  010005         3456          LD BC,5
                         3457  ;       IF ({_0,tT,70H)             ;THEN WAMES ARE IN VRAM
    0C10   7A            3458          LD A,O
    OC11   FE70          3459          CP 70H
    0C13  3005           3460          JR WC,ELSES
    0C15  COIFE2         3461            CALL READ VRAM               ;GET THE 4 NAMES
    0C18   1803          3462            JR ENDS
    OCIA                 3463  ELSES                               ;NAMES IN CPU MEMORY SPACE
    OCIA  £8             3464            EX DE,WL
    0C1B  £080           3465            LDIR
    0C10                 3466  ENDS    sENDIF
    OC10  FD2A8006       3467          LO IY, (WORKBUFFER)         GET  COLOR BYTE
    0c21  C1             3468          POP BC                      ;OFFSET TO FIRST NAME
    0C22  FDO9           3469          ADD IY,8C
    0C24  FD7E04         3470          LD A,[1Y+4)                 sA := COLOR BYTE
    0C27  FD2A8006       3471          LD IY,(WORK BUFFER)
    Oc2B  FO7702        3472           LD [1Y¥+COLR),A             sCOLR := COLOR BYTE
    OC2E  D1             3473  PMO     POP DE                      DE  := ADDRESS OF FIRST NAME  IN  BUFFER
    OC2F  2A8006         3474          LD HL,(WORK BUFFER)         HL  := BUFFER BASE ADDRESS
    OC32  010064         3475          LD BC,08J PTM               START  OF OBJECT'S PATTERN  BUFFER
    0c35  09             3476          ADD HL,BC
                         3477  ;       00 B,4                      ;GET 4 PATTERNS CORRESPONDING   TO THE FOUR  NAMES
    0C36  0604           3478          LD B,4
   0C38   1A             3479  DLP4    LO A,(DE)                     GET  NAME
    0C39  DDBEO1         3480            CP [IX+1}                   sCOMPARE TO NUMGEN
    Oc3c  D5             3481            PUSH DE                     *SAVE POINTER TO NAMES
                         3482  ;         IF [PSW,1S, CARRY]          *THEN NAME < NUMGEN, THEREFORE
    OC30  3016           3483            JR WC,ELSE9
    OC3F  D9             3484              EXX                       ;     PATTERN PART OF GRAPHICS   TABLES
    0C40  87             3485              ADD A,A
    0C41  87             3486              ADD A,A
    0C42  87             3487              ADD A,A                   7A := B*NAME
    0C43  6F             3488              LD L,A
    0044  2600           3489              LD H,0
    0046  09             3490              ADD HL,BC                 sHL :  POINTER TO PATTERN
   0C47   £5             3491              PUSH HL
   0C48   09             3492              EXX
   0C49   D1             3493              POP DE                    sDE :
   OC4A   EB             3494              EX DE,HL
   0c4B   C5             3495              PUSH BC
   OC4C   010008         3496              LD BC,8                   ;NUMBER OF BYTES TO MOVE
   OC4F   EDB0          3497               LDIR
   0c51   C1             3498              POP BC
   0C52   EB             3499              EX DE,HL
   0C53   1830           3500              JR ENDY
     0c55                  3501   ELSE9   —_    ELSE                           ;NAME   =>  NUMGEN,     THEREFORE     NOT  PART   OF  ROMED    GENS
    0c55   009601          3502                   SUB   [1X+1]                    ;SUBTRACT     NUMGEN    FROM   NAME
    0c58   D9              3503                   EXX
    0c59   87              3504                   ADD  A,A
    OCSA   87              3505                   ADD  A,A
    0c5B   87              3506                   ADD  A,A                        7A  :=  B*NAME
    OCSC   6F              3507                   LD  L,A
    C50    2600            3508                   LO  4,0
    OCSF   19              3509                   ADD UL  ,DE                    ;HL   :=  POINTER    TO   PATTERN
    060    £5              3510                   PUSH   W
    0C61   D9              3511                   EXX
    0c62   01              3512                   POP  DE
    0c63                   3513   PM10            ;1F   (0,LT,    70H)           ;THEN   PATTERN     IN  VRAM
    0C63   7A              3514                   LD  A,D
    0C64   FE70            3515                   cP  704
    0C66   3014            3516                   JR  WC,ELSE10
    0C68   C5              3517                     PUSH   BC
    0C69   E5              3518                     PUSH    HL                   ;SAVE   BUFFER    ADDRESS
    OC6A   DS              3519                     PUSH   DE                    ;SAVE   GENERATOR     ADDRESS
    0C6B8  010008          3520                     LO  BC,8                     ;MUMBER    BYTES    TO  MOVE
    OC6E   CDIFE2          3521                     CALL   READ   VRAM                         }
    0C71   010008          3522                     LD  BC,8                     ;INCREMENT     POINTERS     BY  8
    OC74   E1              3523                    POP    HL
    0Cc75  09              3524                     ADD  HL ,BC                  ;GEN   ADDR   :=  GEN   ADDR   +  8
    0c76   EB              3525                     EX  DE,  WL
 _ 0C77    £1              3526                     POP   HL
   0C78    09              3527                     ADD HL,   BC                 ;BUF   ADDR   :=  BUF   ADDR   +  8
   0c79    C1              3528                     POP   BC
   OC7A    1809            3529                     JR  END10
  oc7c                    3530   ELSE10          ;ELSE                           ;PATTERN    IN  CPU   RAM
   Oc7c   EB              3531                      EX  DE, HL
   0c7D   C5              3532                      PUSH   BC
   OC7E   010008          3533                      LO  BC,8
   0C81   EDB0            3534                      LOIR
   Oc83   C1              3535                      POP  BC
   OCs    EB              3536                      EX  DE, HL
   0ces                   3537   END10          ENDIF
   oc85                   3538   ENDD   =;    ENDIF
   Oc8S   D1              3539                POP  DE
   0C86   13              3540                INC  DE
                          3541   ;         ENDDO
   OC87   10AF            3542             DJNZ   DLP4
                          3543
                          3544   ;  COMBINE   OBJECT    PATTERN    GENERATORS      WITH   BACKGROUND
   OC89   FD2A8006     =  3545   PM11.—s   LD‘ TY,  [WORK  BUFFER}                                       .
   OC8D   ED5B8006        3546             LD  DE,  (WORK  BUFFER)           ;DE   = BUFFER    BASE   ADDR_
   0C91   21001C          3547             LD  WL,BK  PTW                                                   :
   0C%    19              3548             ADD  HL ,DE                       ;HL   POINTS   TO   START   OF  BACKGROUND      GENERATORS
   0C95   FD4E00          3549             LD C,  (1Y+YDISP)                 >BC=
   0C98   0600            3550             LD  6,0                           ;   DISPLACEMENT      OF   OBJECT    BELOW   PATTERN    BOUNDARY
   OC9A   09              3551             ADD  HL, BC                       ;HL  POINTS    TO   FIRST   ROW   IN  BACKGROUND     TO  BE   OVERLAYED
   OC9B   £5              3552             PUSH   HL
   OC9C   DDE1            3553             POP  IX                           ;1X   :=  POINTER    TO  ROW   IN  PATTERN    BUFFER
   OC9E   210064          3554             LD  HL,OBJ  PTN
   OCA1   19              3555             ADD  HL,DE                        ;HL  POINTS    TO  FIRST    BYTE   IN  OBJECT'S     PATTERN    GENS
   OCA2   €5              3556             PUSH   HL
   OCA3   3£10            3557             LD  A,16                          ;USE   A‘  AS  LOOP   COUNTER
                                                                                                                    ‘|                                                  I                1                            é             4             4
    OcAS   08            3558            EX AF,AF!
    OCAS                 3559   COMBINE LOOP
    OCA6   E1            3560            POP  HL                      ;POINT  TO OBJECT   PATTERN  BYTE
    OCA7   56            3561            LO D, (HL)                  ;GET  PATTERN   BYTE
    OCA8   23            3562            INC  HL
    OCA9  E5             3563            PUSH  HL
    OCAA  01000F         3564            LD BC, 15
    OCAD  09             3565            ADD  WL,BC                  ;POINT   TO ADJACENT   PATTERN  BYTE
    OCAE  5E             3566            LD E, {WL}
    OCAF  EB             3567            EX DE,HL                    HL   HAS  16  BIT ROW  OF OBJECT'S  PATTERN
    OCBO   FD4601        3568            LD B, [I1Y*XDISP)           SHIFT    LEFT  PATTERN  BY  THIS AMOUNT
    OCB3  AF             3569            XOR  A                      CLEAR
    A     05             3570   SHFLP    DEC  B
    OcBS   FAOCBC        3571            JP M, SHFEX
    0CB8  29             3572            ADD  HL,HL .
    ocB9   17            3573            RLA
    OCBA   18F8          3574            JR SHFLP
    OCBC  5F             3575   SHFEX    LD E,A                      ;SAVE  LEFT  BYTE   IN E
    OCBD  CDOE2F         3576            CALL  COM PAT COL
    OCCO  FO7E00         3577            LO A, {1Y*YDISP)            INCREMENT    YDISP
    0cc3  3C             3578            INC A
    Occé  FD7700         3579            LD  [1Y¥+YDISP},A
            |            3580   ;        IF  {_A,EQ,8),OR,  {_A,EQ, 16)
    OCC7  FEO8           3581            ce 8
    OCC9  2804           3582            JR Z,1F11
    OccB  FE10           3583            CP 16
    OCCD  2005           3584            JR WZ,END11
    OCCF  010010         3585   IF11       LD  BC,16
   Ocb2   DD09           3586              ADD  1X,BC                   ;BEGINNING   OF NEXT  ROW
    OcD4                 3587  END11  =;  ENDIF
   OCb4   DD23           3588            INC  IX                     ;POINT  TO  NEXT  GEN  BYTE
   0CD6   08             3589            EX AF,AF*
   0CD7   30             3590            DEC A                       ;DECREMENT   LOOP  COUNTER
   OcD8   2803           3591            JR Z,C_LP EXIT
   OCDA   08            3592             EX AF,AF®
   OcoB   1809          i(tié3593        JR COMBINE  LOOP
   ocoD                 3594   C_LP EXIT
   OcDD   1             3595             POP HL                     POP    POINTER  OFF  STACK
   OCDE   FOCB037E      3596             BIT7,  [IY+FLAGS)           TEST   FOR  MODE  1_
                        3597   ;         IF {(PSW,1S,ZERO)           ;THEN  UPDATE  MODE   1 COLOR GENs                                                                                   ,
   OCE2   201F          3598            JR  NZ,END12
   OCE4   2A8006        3599               LD HL, (WORK BUFFER)
   OCE7   010084        3600               LD BC,BK CLR                OFFSET    FOR COLOR  BUFFER
   OCEA   09            3601               ADD HL,BC                   HL   POINTS  TO  START  OF COLOR BUFFER
   OCEB   FD5602        3602               LD D, [IY+COLR)             GET   OBJECT  COLOR
   OCEE   FDCBO34E      3603               BIT  1,[IY*FLAGS)           =COLORO   = BACKGROUND   OR TRANSPARENT ?
                        3604   ;           IF  (PSW,1S, ZERO}          THEN   USE  BACKGROUND   COLORO
   OCF2   2004          3605               JR NZ,ELSE13
   OCF4   OEOF          3606                 LD  C,OFH                   -MASK   FOR COLORO  OF  BACKGROUND
   OCF6   1802          3607                 JR END13
   OcF8                 3608   ELSE13—;    ELSE
   OCF8   O£00          3609                 iD C,0                      ;MASK  REPLACE   COLORO  WITH TRANSPARENT                                                   .
   OCFA                 3610   END13.   ss  ENDIF
                        3611;              00 8,9                      ;CHANGE  ALL  9  COLOR BYTES
   OCFA  0609           3612               LD B,9
   OCFC   7E            3613   OLPS          LD A, CHL]                ;GET  BACKGROUND   COLOR  GEN
   OCFD  Al             3614                 AND  C                    ;MASK  OUT  COLORI
    OCFE   82           3615                OR  D                      ;ADD OBJECT   COLOR1
    OCFF   77           3616                 LD  {HL},A               ;UPDATE   COLOR  GENERATOR
    0000   23           3617                 INC WL                   ;POINT   TO WEXT  COLOR  GEN
                         3618   ;         ENDDO
    0001   10F9         3619              DJNZ  DLPS
   0003                  3620  END12  =; ENDIF
                         3621
                         3622  ; DECIDE  WHICH  PART  OF  OBJECT'S  PATTERN  AND  COLOR  TABLES   TO USE
    0003   FD7E05       3623            LD A, (IY+F GEN)            ;GET  NAME  OF FIRST  GENERATOR    IN OBJECT'S   TABLE
    0006   FDCB047E     3624            BIT 7, (IY+FRM)           TEST  WHICH   PART OF  TABLE  TO  USE
             |           3625  ;        IF  (PSW,1S,NZERO)          -THEN  USE  UPPER  HALF  OF TABLES
    OD0A   2802          3626           JR 2,END14
    op0c  C609          3627              ADD  A,9
   0D0€                  3628  END14    ENDIF
                         3629  ; CHANGE  NAMES  IN BACKGROUND    BUFFER TO  THOSE  OF  THE OBJECT'S   PATTERNS
                         3630  ; THIS  WILL THEN  CONSTITUTE    A NEW FRAME  DISPLAYING   THE  OBJECT   AT PATTERN   PLANE
                         3631  ; LOCATION   {YP_BK], (XP_BK]
    OD0E  4F            3632            LD C,A                      ;SAVE  INDEX
    OD0F  2A8006        3633            LD HL, [WORK BUFFER)        HL   := BUFFER  BASE
    0012   110013       3634            LD DE,Y¥P_BK+1              ;POINT  TO  FIRST BACKGROUND    NAME
   0015   19            3635            ADD HL,DE
                         3636  ;        DO 8,9
   0016   0609          3637            LB B,9
   0018   77             3638  DLP6       LD  (WL],A
   0019   3c            3639              INC  A
   OO1A   23            3640              INC  WL
                         3641  ;        ENDDO
   0018   10FB          3642            DJNZ DLP6
                         3643  ; MOVE  NEWLY FORMED   GENERATORS   TO OBJECT'S   PATTERN  AND  COLOR  GEN  TABLES
   0D1D   FDCBO37E       3644  PMI2     BIT 7, (IY+FLAGS)           7TEST  WHICH  MODE
                         3645  ;        IF [(PSW,1S, ZERO)          7THEN MODE   1
   0021   2073          3646            JR WZ, ELSEOS
   0023   59            3647              iD E,C
   0024   1600          3648              LD 0,0                      ;DE  := INDEX  INTO  PATTERN   GENERATOR   TABLE
   0026   2A8006        3649              LD HL, (WORK BUFFER]
   0029   01001C        3650              LD BC,BK PTN
   Oo2c   09            3651              ADD HL,BC                   sHL POINTS   TO FIRST   GENERATOR
   002D   FD210009      3652              LD 1Y,9                     39 ELEMENTS   TO  SEND
   0031   3&03          3653              LO A,3                      ;CODE  FOR  PATTERN  GENERATOR   TABLE
   0033   CDIFBE        3654              CALL PUT VRAM
                        3655   ; SET  UP POINTERS  TO  OBJECT'S   PATTERN WAMES   AND TO  COLOR  GEN  BYTES
   0036   FO2A8006      3656              LO 1Y, (WORK BUFFER]
   OD3A   2A8006        3657              LD HL, (WORK BUFFER)        sHL  := BUFFER  BASE
   0030   010084        3658              LD BC,BK CLR                ;OFFSET  TO  COLOR  BUFFER
   0040   09            3659              ADD HL ,BC                  sHL POINTS   TO COLOR  BUFFER
   0041  002A8006       3660              LD IX, (WORK BUFFER)        3;1X := BUFFER  BASE
   0045  010013         3661              LD BC, YPBK+!               sOFFSET  TO  FIRST  NAME  FOR  OBJECT
   0048  D009           3662              ADD 1X,BC                   31X POINTS   TO FIRST  NAME
   004A  0609           3663              LD B,9
  004C                  3664   RPT1       ;REPEAT                     sMOVE  COLORS  TO  COLOR  GENERATOR   TABLE
   004c  DD7E00         3665                LD  A,(1X+0)                ;GET  NAME
   004F  DD23           3666                INC  IX                     sPOINT  TO  NEXT  NAME
   0051  CB3F           3667                SRL  A                      :DIVIDE   BY 8
   0053  CB3F           3668                SRL  A
   0055  CB3F           3669                SRL  A
   0057  5F             3670                LD  E,A
   0058   1600          3671                LO 0,0                      ;DE  := OFFSET   INTO  COLOR  GEN  TABLE
    005AC5       3672            PUSHBC              ;SAVECOUNTER
    00583&09     3673            LDA,9               “TESTWHETHERTHIS PATTERPOSITIONIS
    YP.BK0       3674            susB                >   ONTHE SCREENORNOT (I.E.IS
        0600     3675            LD8,0               -   + (B-9)/BETWEENO AND23, ANDIS
   0060 FEO3     3676 DVLP       cp3                 >         +(B-9)/3MOD 3 BETWEEO AND 31)
   0062 3805     3677      |     JRC,DVEX                    |
   0064D603      3678            sus3
   0066 04       3679            INCB
   0067 18F7     3680            JRDVLP
   0069 FD8611  ——«-36~DVEX     ADDA, L1Y+XP_BK)     A  z=XPOS  +(B-9)/3MOD 3
   0p6c FEZ0     3682            cP32
   006E3017      3683            JRWC,WOTOS
   007078        3684            LDA,B
   0071FDB612    3685            ADDA,[1veY6K)       sh :=Y_POS+ (B-9)/3
   0074 FE18     3686            CP26                “1S THISPOSITIONONSCREEN?
   0076300F      3687            JRNC,NOTOS
   0078DDES      3688            PUSHIX              ;     AND POINTERS
   OO7AES        3689            PUSHHL                                   :
   00783E04      3690            LDA4                CODE FOR COLORGENERATORTABLE
   007DFO210001  3691            LD1Y,1              ;WUMBEROF ITEMSTOSEND
   0081CD1FBE    3692           CALLPUT_VRAM
   008 £1        3693           POP HL               RESTORE POINTERS
   0085DDE!      3694           POP IX
   0087C1        3695 MOTOS     POP BC               ;    AND COUNTER
   008823        3696            INCHL               *INCREMENTPOINTERS
   008913        3697            IWCDE
   008A05       3698            DEC B                ;DECREMENTCOUNTER
   008878       3699           LDA,B
   OD8CFEOO      3700          cp0
   QDs 2086   0——(iti‘é8SCt;éw=JRWZ,RPTI
                 3702 ;        UNTIL{B,£Q,0)       ,
   0090FD2A8006  3703        LD IY(WORKBUFFER] ;RESTOREBUFFERADDR
   009%1854    — 3704         JREND04
   0096          3705 ELSEO4
   0096          3706 PM13—_;ELSE
   00960600      3707          LDB,0
  0098           3708 RPT2     REPEAT
   0098C5        3709           PUSH BC           SAVE COUNTERANDINDEX
   009979        3710           LD A,C            “ADD3xCOUNTETO INDEX,WHERENEXTGENsTO BE MOVED
   009A80        3711           ADD A,B
   009880        3712           ADD A,B
   009C80        3713           ADD A,B
   00904F        3714           LD C,             -C:= INDEXTOTABLELOCATIONFORNEXT 3GENs
   009E210000    3715           LD WL,O           “CALCULATOFFSETSFROMSTARTOF PATTERN
   0DA1110018    3716           LD DE24          :  AND COLORGENERATOTABLES
   ODA478        3717           LD A,B
   ODAS30        3718AD LP      DEC A
   ODA6FAODAC    3719           JP M,AEXIT
   ODA919        3720           ADD HL,DE
   ODAA18F9      3721           JRADLP
                 3722                            sHL :=OFFSETFROMSTART OFPTRN ANDCOLORBUFFERS                             .
   ODACFD2A8006  3723 ADEXIT    LD IY,(WORBUFFER)
   0080FD7E12    3724           LD A,{IY*YBK)    ;GET YPAT POSTO SEEWHICHTHIRDOF TABLESTOUSE
   008380     .  3725           ADDA,8           ;EACHGROUPOF THREEIN NEXTPATTERNPLANEROW
                 3726 ;         IF (A,LT,24]     ;'A*MUST CONTAINVALIDYPATPOS  [0-23]
   00B4FE1B      3727           cP 24
   0DB63028      3728           JR NC,END15
     ODB8  CB3F          3729                     SRL  A                    ;THIS   NUMBER  /  8  INDICATES   WHICH   1/3 OF
     ODBA  CB3F          3730                     SRL  A                    ;     TABLES   TO  USE
    ODBC   CB3F          3731                     SRL  A
    OoBE   57            3732                     LD  D,A
    ODBF   59            3733                     LD  E,C                   ;DE  :=  INDEX   INTO  PATTERN   AND  COLOR  TABLES
    0DC0  D5             3734                     PUSH   DE                 SAVE    INDEX
    00c1  01001C         3735                     LD  BC,BK  PIN            ;FORM  POINTER    TO GENERATORS     IN HL
    00c%  09             3736                     ADD HL,  BC
    ODC5  £D488006       3737                     LO  BC, (WORK  BUFFER]    ;GET  BUFFER   BASE  ADOR
    ODc9  09             3738                     ADD  HL,BC
    ODCA  E5             3739                     PUSH   HL                 SAVE   THIS  POINTER
    QOCB  FD210003       3740                     LD  1Y,3                  ;NUMBER   OF ELEMENTS    TO  MOVE
    ODCF  3£03           3741                     LD  A,3                   ;PATTERN   GENERATOR    TABLE   CODE
    0DD1  CD1FBE         3742                    CALL   PUT  _VRAM
    ODD4  £1             3743                     POP  HL                   ;GET  POINTER   BACK|
    0005  110068         3744                     LD  DE,BK _CLR-BK_PTN     ;OFFSET   BETWEEN   BUFFERS
    0008  19             3745                     ADD HL ,DE                ;HL  POINTS  TO  START   OF  NEXT  3  COLOR  GENERATORS
    0009  01             3746                     POP  DE                   ;GET  INDEX  INTO   GEW  TABLES
    ODDA  FD210003       3747                     LD  1Y,3
    ODDE  3€04           3748                     LD A,4                    ;CODE  FOR  COLOR   GENERATOR    TABLE
    ODEO  CD1FBE         3749                     CALL PUT   VRAM
  ODE3                   3750  END15           ENDIF
    ODES  C1             3751                  POP  BC                   ;RESTORE   COUNTER   AND   INDEX
   ODES   06             3752                  INC  8
   ODES   78             3753               LD  A,B
   ODE6   FEO3           3754               cP  3
   ODEB   20AE          3755                JR  NZ,RPT2
                        3756   ;            UNTIL   {8,£0,3)       | ;REPEAT   3  TIMES
  ODEA                  3757   END04   «=; ENDIF                  |
                  :     3758
                        3759   ; RESTORE    OLD SCREEN     IF  IT'S  Y_PAT_POS   AND  X PAT  POS   DIFFERS    FROM  THE
                        3760   ;  YPAT   POS   AND  X PAT  POS   FOR  THE  OBJECT
   ODEA   FD2A8006      3761   PM14      LD   LY, (WORK BUFFER)
   ODEE   FD4606        3762             LO  8, [1Y+XP  OS)              ;TEST  FOR  VALID   OLD SCREEN    DATA
                        3763   ;          IF  {8,WE,  80H)               ;THEN  THERE   IS VALID   DATA
   ODF 1  78            3764             LD  A,B
   ODF2   FEBO          3765             cP  80H
   ODF4  2821           3766             JR  2,END16
   QDF6  FD4E07         3767                LO C,  [1¥+YP_OS)              ;TEST   IF OS  POSITION   SAME   AS  CURRENT  POSITION
   ODF9  FD6611         3768                LD H,  [IY+XP_BK)
   OOFC  FD6E12         3769                LD L,  (1Y+¥P_BK)
   ODFF  87             3770                OR  A                          ;CLEAR   THE CARRY
   0E00  ED42           3771                SBC  HL,BC                     1S   THERE  ANY  DIFFERENCE?
                        3772 ;              IF  [PSW,1S,NZERO}             ;THEN  POSTION   HAS  CHANGED
   002   2813           3773                JR  2,END17
   0E04  248006         3774                  LO  HL,  [WORK BUFFER)         ;GET  BUFFER   BASE
   0€07  110008         3775                  LD  DE, YP OS+1
   OE0A  19             3776                  ADD  HL ,DE                    ;POINT   TO OLD  SCREEN    NAMES
  OE08   FDSE06         3777                  LD E,  [1Y+XP_ OS)
  OEOE   FD5607         3778                  LD  D, [1Y+¥P  OS)             ;DE  :=  X AND  Y  PAT POS
  0£11   010303         3779                  LD  BC,0303H                   ;BC  :=  X AND  Y  EXTENT
  0E14   cD0808         3780                  CALL  PUTFRAME                                                                                                                   .
 0£17                   3781  END17    ~—s  sENDIF
  0E17                  3782  END16   =;  ENDIF
                        3783  ;  PLACE   OBJECT   ON  SCREEN
  0E17   FD2A8006       3784             LD 1Y,  (WORK BUFFER)
  0E1B   2A8006         3785             LD  HL, (WORK BUFFER)          ;HL  :=  BUFFER  BASE   ADDR
    OE1E   110013        3786            LD  DE,YP_BK+1              ;POINT   TO NAMES   FOR  OBJECT
    0E21   19            3787            ADD HL, DE
    0E22   FOSE11        3788            LD E,  {1¥*XP_BK)
    0E25   FD5612        3789            LDD,  [1Y*YP  BK)           ;DE  :   X AND  Y PAT _POS
    0E28   010303        3790            LD BC,0303H                 sBC  :   X AND  Y EXTENT
    0&28   CD0808        3791            CALL  PUTFRAME
                         3792   SARARAAAAAAAERARAEE  END OF  PuT  MOBILE  RRAERKARAARAEKAARARARAKKAAKAARKKERARARRARKKEKKKKKE
    OE2E   C9            3793            RET
                         379%
                         3795   ; REGS  A, H  AND  L CONTAIN   24 BIT PATTERN   TO  BE COMBINED   WITH  BACKGROUND    GENERATORS
                         3796   ; IX  POINTS  TO THE  FIRST   OF THREE GENERATOR   BYTES   TO  BE COMBINED   WITH  A,  H AND L
   0E2F                  3797   COMPAT  COL
    OE2F   FDCB0346      3798            BIT  0, [IY+FLAGS)          "OR    GENS  OR  REPLACE
                         3799   ;        IF  (PSwW1S, ZERO)          -TWEN  "OR!
    0E33   2016          3800            JR NZ, ELSEI8
    0€35   008600        3801              OR  [1X+0)                   ;'OR*  LEFT  BYTE  WITH  BACKGROUND
    0£38  007700         3802              LD  {1X+0),A                 AND  SUBSTITUTE    FOR  THAT  GENERATOR   BYTE
    0E38   7C            3803              LD  A,H                      ;NOW DO  MIDDLE   BYTE
    OE3C  0DB608         3804              OR  {1X+8)
    OE3F  007708         3805              LD  [1X8]  ,A
    0€42   7D           3806               LD  A,L                     ;RIGHT   HAND  BYTE
    0£43  008610         3807              OR  [1X+16]
    0E46  007710        3808               LD  [1X+16},A
    0E49   1814          3809              JR  EW018
   0E48                  3810  ELSE18    ;ELSE                       REPLACE    BACKGROUND   WITH  NON-ZERO   BYTES
    0E48  87            3811               OR  A                       71S  BYTE  NON-ZERO
                         3812  ;           IF  (PSW,1S,NZERO)
   0E4C   2803          3813               JR  Z,END19
   OE4E   007700        3814                 LD  [IX+0},A              7VES,   THEN REPLACE   BACKGROUND   WITH   OBJECT
   0651                 3815   END19   «=;  ENDIF
   0€51   7C            3816               LO  A,W                     sSAME   FOR MIDDLE   BYTE
   0€52   87            3817               OR  A
                        3818   ;           IF  (PSW,1S,NZERO)
   0E53   2803          3819               JR  2,€N020
   0E55   007708        3820                 LD  (IX+8),A
  0€58                  3821   EWD20   2s;  ENDIF
   0€58   7D            3822               LD A,L                      7SAME  FOR  RIGHT  HAND   BYTE
   0€59   87            3823               OR A
                        3824   ;           IF  [PSW,1S,NZERO)
   OESA   2803          3825               JR 2,END21
   OE5SC  007710        3826                 LD  (IX+16),A
  OE5F                  3827   END21       ENDIF
  OESF                  3828   END1B  =;  ENDIF
   OESF   FOCBO37E      3829   PM15 =    BIT7,  (IY*FLAGS]           ;FIND OUT  WHICH   GRAPHICS   MODE USED
                        3830   ;         IF (PSW, 1S, NZERO)         ;THEN MODE   2 (MODE   1 COLORS  DONE  AFTER  COMBINELOOP]
   0€63   283C          3831             JR 2,E022
   OE65  DDES          3832                PUSH  IX                    ;SAVE  BACKGROUND   POINTER
   0E67  010068         3833               LD BC,BK  CLR-BK  PIN       ;CHANGE   IX TO POINT   TO  COLOR GENERATORS
   OE6A  D009           3834               ADD  1X,BC
   OE6C   FD4602        3835               LDB,  [IY#COLR)             ;GET OBJECT   COLOR
   OEGF   FOCBO34E      3836               BIT  1,[1Y*FLAGS}           ;COLORO  = BACKGROUND    OR  TRANSPARENT   ?
                        3837   ;           IF  (PSW,1S, ZERO}          THEN   USE BACKGROUND    COLORO
   0E73  2004           3838               JR NZ,ELSE23
   0E75  OEOF           3839                 LD  C,OFH                   ;MASK  FOR  COLORO   OF BACKGROUND
   0E77   1802          3840                 JR  END23
   0E79                 3841  ELSE23       ELSE
   0E79  0£00           3842                 LD  C,0                     ;MASK  REPLACE   COLORO  WITH  TRANSPARENT
   078           3843END23   sENDIF
   0€7878       3844         LOA,E              ;GETFIRSTOBJECT'PATTERNBYTE
   OE7C87       3845         ORA                gARETHEREANY‘1'BITS?
                3846  ;      IF (PSW,1S,NZERO)
   OE7D2808     3847         JR2,END24
   OE7FDD7E00   3848          LDA, (1X+0]         7;GEBACKGROUNCOLOGEN
   OE82Al       3049   —.     AND C               ;MASKOUTCOLOR1
   0€83BO       3850          OR B                ;ADDOBJECCOLOR1
   0E84DD7700   3851          LD [IX+0,A          ;UPDATCOLORGENERATOR
   0€87         3852 END24   sENDIF
   0€877C       3853         LDA,H              ;SAMEFORMIDDLEBYTE
   OE8887       3854         ORA
        .       3855 ;       IF(PSW,1S,NZERO)
   O0E82808     3856  |      JRZ,END25
   OE8BDD7E08   3857          LD A,[1X+8)
   OEBEAi       3858          AND C
   OESFBO       3859          OR B
   0€90DD7708   3860          LD [1X+8,A
  0E93         _3861 END25   sENDIF
   0E937D    .  3862         LDA,L              RIGHT HANDBYTE
   0E9B87       3863         ORA
                3864 ;       IF(PSW,1S,NZERO)
   0E92808      3865         JR2,END26
   0G9DD7E10  . 3866          LD A,(1X+16)
   OE9Al |      3867          AND C
   OE9BO        3868          OR B
   OE9007710    3869          LD (1X+1,A)
   COE9F        3870 END26   ENDIF
   OE9DDE1      3871         POPIX              RESTOREBACKGROUNPOINTER
  OEA1      .   3872 END2=; ENDIF                |
   OEAC9        3873       RET
                3874 ;     END          ;PUMOBILE
                3875  PROG
                       3877   ;         .IDENT  PUTCOMP
                       3878   ;         .20P
                       3879   ;         .EPOP
                       3880   ;         .1F1  ,.INSERT   8:SPZ80.ASM
                       3881   ;         -COMMENT   }
                       3882   ;                                                                               4/15/82
                       3883   ;                                                                               10:40:00
                      3884    stananenaeaneeenasee    PUT_  COMPLEX   SRACAACAAAAREKAKARAARARAAAAEAKEKAAARARRAARARKERKEE
                       3885   ;                                                                                        |
                      3886    “DESCRIPTION:      THE  POSITION   AND  FRAME   NUMBER  OF  EACH   OF  A COMPLEX   OBJECT'S
                       3887   ;                  COMPONENT   OBJECTS   IS  UPDATED.     THEN  PUT  OBJECT    IS CALLED   FOR
                       3888   ;                  EACH  OF  THE  COMPONENT   OBJECTS.
                       3889   ;
                       3890   ;INPUT:            IX  = ADDRESS   OF OBJECT    TO BE  PROCESSED
                       3891   ;                  HL  = ADORESS   OF OBJECT'S    GRAPHICS    TABLES   IN ROM
                       3892   ;                   B  = SELECTOR   FOR  METHODE   OF  COMBINING    OBJECT   GENERATORS
                       3893   ;                        WITH  BACKGROUND    GENERATORS
                       389%   ;
                       3895   ;            |           1  = OBJECT  PATTERN    GENS  ORed   WITH  BACKGROUND    PATTERN   GENS
                       3896   ;                             COLOR1  OF  BACKGROUND    CHANGED    TO  MOBILE  OBJECT'S   COLOR
                       3897   ;                             IF  CORRESPONDING    PATTERN   BYTE   NOT  ZERO
                       3898   ;
                       3899   ;                        2  = REPLACE   BACKGROUND    PATTERN   GENS   WITH  OBJECT   PATTERN   GENS
                      3900    ;                             TREAT  COLOR   SAME  AS  #1
                       3901   ;
                      3902    ;                        3  = SAME  AS #1  EXCEPT   COLORO   CHANGED    TO TRANSPARENT
                       3903   ;
                      3904    ;                        4  = SAME  AS #2  EXCEPT   COLORO   CHANGED    TO TRANSPARENT
                      3905    ;                   |
                      3906    .                   C  = OBJECT   TYPE,  AND  NUMBER   OF  COMPONENTS
                      3907    ;
                      3908    gARSERARERAESEAHESO    REAHAERAAHAREE  AAA ARA AEE RAEEAAAEAERER    ERA  AKAENEASRASR   AAA EEETE
                      3909    ;)
                      3910    ;        EXT
                      3911             GLB       PUTCOMPLEX
                      3912    ;
  OEA2                3913   PUTCOMPLEX
                      3914    ; UPDATE  THE  FRAME   NUMBER  AND  THE  X AND  Y  LOCATION    IN EACH   OF THE   COMPONTEN
                      3915    ; OBJECT'S   STATUS  AREAS
   OEA2 C5            3916             PUSH  BC                     ;SAVE   SELECTOR   AND   COMPONENT   COUNT   [COMP CWT)
   OEA3 09            3917             EXX                          ;USE  PRIMED   REGS   FOR  XLOC    AND  YLOC
   OEA4 0D6603        3918             LD H, [IX#3)                 “HIGH   BYTE  OF  STATUS
   OEA7 DD6EO2        3919             LDL,  [1X+2)                 *LOW  BYTE   OF  STATUS
   OEAA 7E            3920             LD A, (HL)                   cA  :=  FRAME
   OEAB 23            3921             INC  HL
   OEAC 4E            3922             LDC, [HL}                    BC’    := XLOCATION
   DEAD 23            3923             INC  HL
   OEAE 46            3924             LD B, (HL)
   OEAF 23            3925             INC  HL
   OEBO 5E            3926             LDE,  {HL}                   :DE'   := YLOCATION
   OEB1 23            3927             INC HL
   0EB2 56            3928             LD D, (HL)                                                                                                                           :
   0EB3 09            3929             EXX
   0EB4 87            3930             ADD  A,A                     *FRAME   :=  4*FRAME
   0E85 87            3931             ADD  A.A
   OEB6 5F            3932             LD E,A                       >FORM  POINTER    TO  FRAME  AND  OFFSET   POINTERS
   0EB7 1600          3933             LD D,0
    OEB9    23               3934              INC  WL                        sPOINT    TO  FIRST   OF   FRA_OFFSET    PNIR   PAIRS
    OEBA    19               3935              ADD HL  ,DE                    ;POINT    TO  FRAME   POINTER
    OEBB    4E               3936              LD  C, (HL)
    OEBC    23               3937              INC  HL
    OEBD    46               3938              LD B,  (WL)                    ;BC   :=  FRAME   POINTER     (POINTER   TO   LIST  OF  FRAME   #'S)
    OEBE    23              3939               INC  HL
    OEBF    SE              3940               LO  E, (HL)
    OECO    23              3941               INC  WL
    0EC1    56              3942               LDD,   (HL)                    ;DE   := OFFSET    POINTER     [PNTR   TO  LIST  OF  OFFSETS)
    OEC2    60              3943               LO  H,B
    OEC3    69              3944               LO  L,C                        ;HL   :=  FRAME   POINTER
           .                3945    ;        |
                            3946    ;  DE‘  =  YLOC,    BC'   = XLOC,    HL  = PNTR   TO  FRAME   LIST,    DE  =  PWTR   TO  OFFSET   LIST
                            3947    ;  IX  = ADDR   OF  OBJ,   [SP]  =  COMP CNT   &  SELECTOR
                            3948    ;  FOR  n=0  TO  COMP  _£NT-1:  COMP  OBJ  IN)   FRAME   :=  FRAME#(N]     FROM   FRAME   LIST
                            3949    ;                               COMP  |OB J(N)   X_LOCATION     :=  CMPLX  OBJ   X LOCATION     +  XOFFSET   IN)
                            3950    ;                                COMP OBJ(M)     YLOCATION      :=  CMPLX  OBJ    YLOCATION     +  YOFFSET    (WN)
    OEC4   C1               3951              POP   BC
    OECS    79              3952              LD   A,C                        ;GET   COMPONENT    COUNT    INTO   B
    OEC6   48               3953              LO   C,8                        SAVE    SELECTOR    IN   C
    OEC7   CB3F             3954              SRL   A                         ;GET   COUNT   INTO   LOW  NIBBLE
    OEC9   CB3F             3955              SRL   A
    OECB   CB3F             3956              SRL   A
    OECD   CB3F             3957              SRL   A            :
   OECF    47               3958              LD    8B,A                      3B  :=  component     count
                            3959                                                                                   ON  STACK
   0ED1    ODES             3960              PUSH   IX                       ;SAVE   ADDR   OF  OBJ
   OED3    £5               3961   LP1        PUSH   HL                       *SAVE   PNTR   TO  FRAME   LIST
   OED4    D5               3962              PUSH   DE                       ;SAVE   PNTR   TO  OFFSET    LIST
   OEDS    DD6E04           3963              LD  L,  [1X+*4)
   0ED8    DD6605           3964              LD  H, CIX*5)                   sHL  :=  ADDR   OF  COMPONENT     OBJ
   OEDB    0023             3965              INC   IX                        sPoint   to  next   object    pointer
  -QEDD    DD23             3966              INC   IX
   OEDF    23               3967              INC   HL
   OEEO    23               3968              INC   WL                        7HL  POINTS    TO  STATUS   POINTER
   O£E1    5E               3969              LD  E, (HL)
   OEE2    23               3970              INC   HL
   OEE3    56               3971              LD D,  (HL)                     ;DE  :=  ADDR   OF  STATUS    FOR  COMPONENT     OBJECT
   OEE4    D5               3972              PUSH   DE
   O£ES    FDE1             3973              POP   IY                        7;1¥ <=  ADDR   OF  STATUS    FOR  COMPONENT     OBJECT                                                                               >
   OEE7.  01                3974              POP   DE                        ;DE  :=  PNTIR  TO  OFFSET    LIST
   OEES    £1              3975               POP   HL                        ;HL  :=  PWIR   TO  FRAME   LIST
   OEED    7E              3976               LD  A, (HL)                     °GET  FRAME   NUMBER
   OEEA    FOCBOO7E        3977               BIT   7, (1Y+0)                 Preserve     bit  7  of   frame
   QEEE    2802            3978               JR    2,T8L0                    “used  by  mobile    objects     to  indicate    which
                           3979                                              ;VRAM    tables   in  use.
   OEFO    CBFF            3980               SET   7,A
  OE  F2                   3981    TBLO:
   OEF2    FD7700          3982               LD  []¥+0),A                   ;MOVE    TO COMPONENTS      STATUS   AREA
   OEF5S   23              3983               INC  HL                        ;POINT    TO  NEXT   FRAME   NUMBER
   OEF6    1A              3984               LD A,  (0E)                    ;GET   X_OFFSET                                                                                                 ,
   OEF7   09               3985               EXX
   OEF8   OF               3986               LD  L,A
   O€F9   2600             3987               LD  4,0                        ;HL*   :=  XOFFSET
   OEFB   09               3988               ADD  HL,BC                     ;HL*   :=  X  OFFSET   +  X LOCATION
   OEFC    FD7501          3989               LD  C(1Y+1),L                              7
   OEFF    FO7402          3990               LD  (1¥+*2),H                  ;COMPONENT'S      XLOCATION      :=  X_OFFSET    +  XLOCATION
    OFO2  D9              3991          EXX
    OFO3   13             3992          INC DE                     :POINT TO YOFFSET
    OFO4   1A             3993          LD A, (DE)
    OFOS  09              3994          EXX
    OFO6  6F              3995          LD L,A
    OFO7  2600            3996          LD ,0                      sHL := Y_OFFSET
    OFO9  19              3997          ADD HL,DE                  HL  := Y_OFFSET + YLOCATION
    OFOA  FD7503          3998          LD  (1¥+#3),L
    OFOD  FD7404          3999          LD  {1Y+4),H               ;COMPONENT'S YLOCATION   := YOFFSET   + YLOCATION
    OF10  D9              4000          EXX
    OF11  13              4001          INC DE                     ;POINT TO NEXT OFFSET PAIR
    OF12  108F            4002          DJN2ZLP1
                          4003  ;
                          4004  ; CALL PUTOBJECT    FOR EACH  OF THE COMPONENT OBJECTS, PASS  SELECTOR  IN B
    OF14  FDE1            4005          POP  IY                    ;GET OBJECT ADDRESS BACK
    0F16  010004          4006          LD BC,4
    0F19  FDO9            4007          ADD  1Y,BC                 :1Y POINTS TO POINTER TO  FIRST COMPONENT  OBJECT
    OF1B  1               4008          POP DE                     sDE := COUNTER AND SELECTOR
    OFIC  FO6E00          4009  LP2     LDL,  (1Y+0)
    OF1F  FD6601          4010          LOH,  [1Y+1]               sHL := ADDRESS OF COMPONENT  OBJECT
    OF22  FD23            4011          INC IY
    OF24  FD23            4012          INC IY                     s1Y POINTS TO NEXT COMPONENT  OBJECT  POINTER
    OF26  £5              4013          PUSH HL                                                                    :
    OF27  DEI             4014          POP IX                     ;1X := ADDRESS OF COMPONENT  OBJECT
    OF29  FDES            4015          PUSH IY                    SAVE  POINTER              |
    OF28  05              4016          PUSH DE           |        SAVE  COUNTER AND.SELECTOR
    OF2C  43              4017       (<séitCBE                     7B := SELECTOR
    OF2D  CDIFFA          4018      i   CALL PUTOBJ
    OF30  D1              4019          POP DE                     ;GET COUNTER AND SELECTOR
    OF31  FDE1            4020          POP IY                     GET  ADDRESS OF NEXT COMPONENT  OBJECT  POINTER
    OF33  15              4021          DECD
    OF34  2066  -         4022          JR WZ,LP2
    OF36  C9              4023          RET
                          4024   PROG
                        4026
                        4027
                        4028    ;                   Ken     Lagace   and  Rob   Jepson    3/82
                        4029
                        4030                             GLB                     TIMER   TABLE   BASE           71S  THIS  NECESSARY    ??
                        4031                             GLB                     NEXT  TIMER   DATA    BYTE     ; OR  THIS???
                        4032
                        4033                            sEXT                     PARAM_        ;Parameter     passing   routine    needed
                        4034                                                                   :for   setting    up  pascal  interfaces
                        4035
                      — 4036                   |                         ;Global    routine    labels    are  the   routines   to  call
                        4037                                             ;from   pascal
                        4038                             GLB                     INIT  TIMER,
                        4039                             GLB                     INIT  TIMERQ
                        4040                             GLB                     FREE  SIGNAL
                        4041        |                    GiB                     FREE  SIGNALQ
                        4042                             GLB                     REQUEST   SIGNAL
                        4043                             GLB                    REQUEST   SIGNALQ
                        4044       |                     GLB                     TEST  SIGNAL_
                        4045                             GLB                     TEST  SIGNALQ
                        4046                             GLB                     TIME  _MGR_
                        4047                             GLB                     TIME_MGRQ
              <0007>    4048   DONE                      EQu                     7
              <0006>    4049   REPEAT                    EQu                    6
              <0005>    4050   FREE                      EQu                    5
              <0004>    4051   EOT                       EQU                    48
              <0003>    4052   LONG                      EQu                    3
                        4054   ;                                                                                                 ;
                        4056   ;     =  10  CWECK  BIT  =====     BIT ?    JR  Z  =  JUMP   IF  BIT   IS  0!                     ;
                       4057    ;                                                                                                ;
                       4059    ;           ;          ;           ;          33              ;            ;           ;         ;
                       4060    ;  DONE     ; REPEAT   ;   FREE    ;  EOT;;         LONG      ;            :           :         :
                       4061;        7      >;  6      >;   5      7     4    3;     3        ;    2          en|     ;    O     :
                       4062   COCO  TOEEOEEOOEEEEOHOEHEETHOOEEEHEEEEEEHEEHOEEEEEeeeeeseseneaEEOeneeeeEREsseseocceeeeoce    eka
                       4063
                       5064
                       4065                        PROG                                                                                                                                                       ,
                :      4066
  0F37                 4067   TIME  MGRQ
  0F37                 4068   TIME  MGR_
  OF37  2A7303         4069                        LO                     HL,  (TIMER  TABLE   BASE];Current        timer  addr.
  OF3A                 4070   NEXT  TIMERO
  OF3A  CB6E           4071                        BIT                    FREE,   (HL)           7Free?
  OF3C  CCOF49         4072                        CALL                   Z,DCR   TIMER          sIf  not,   decr.
 OFSF   CB66           4073                        BIT                    EOT,  (HL)             3End   of table?
 OF41   2005           4074                        JR                     NZ, SCRAM              ;  If  it  is,  we're  done.
 OF43   23             4075                        INC                    HL                     Otherwise      get  next  timer
 OF44   23             4076                        INC                    HL                    3  and   start   over.                                                                  «
 OF45   23             4077                        INC                    HL
 OF46   18F2           4078                        JR                     WEXT  TIMERO
 OF48                  4079   SCRAM
 OF48   C9             4080                        RET
                       4081
                       4082
                       4083
                       4085
    OF49               4086  DCRTIMER
    OF49  E5           4087                 PUSH               HL                ;Save  current  timer.
    OF4A  CBSE         4088                  BIT               LONG, (HL)        Long?
    OF4C  2828         4089                  JR                2,0CR_S MODE TBL;Short  ,non- repeating
    OF4E  CB76         4090                  BIT               REPEAT, (HL)      ;Repeat?
    0F50  2000         4091                  JR                WZ,O0CRt RPT  TBL;Long,   repeating
    OF52               4092  DCR_LMODE TBL                                     ;Longnon-  repeating
    OFS2  23           4093                  INC               HL
    OFS3  5E           4094                  LO                E, (HL)           s;Move counter  to DE
    0F54  23           4095                  INC               HL
    OF55  56           4096                  LO                D,(WL)
    OF56  18           4097                  DEC               DE                ;Decrement.
    OF57  7B           4098                  LD                A,E
   OF58   B2           4099                 OR                 D                 sCheck  if 0.
   OF59   2034         4100                  JR                NZ,SAVE_2 BYTES   ;If not,  save'm.
   OF5B   E1           4101                 POP                HL                sOtherwise,  get  mode byte
   OFSC   £5          4102                  PUSH               WL                ; and  set it's  done bit.
   OF5D   182C        4103                   JR               SET DOWE  BIT
   OFSF               4104  DCR _LRPT TBL                             |
   OF5F   23          4105                   INC               HL                ;Long-repeating   timer.
   OF60   5E          4106                   LO                E,(Wi)            slLoadaddr.  into  DE.
   OF61   23          4107                   INC               WL
   OF62   56          4108                   LO                0,(HL)
   OF63   EB          4109                   EX                DE,HL             Exchange   and
   OF64   5E          4110                   LD                E,(HL)            ; load  counter  into DE.
   OF65   23          4111                   INC               HL
   OF66   56          4112                   LD               D, (HL)
   OF67   18          4113                  DEC               DE                 ;Decrement.
   OF68   7B.         4114                   LO               A,E
   OF69   82          4115                  OR                D                  *Check  for 0.
   OF6A   2023        4116                   JR               NZ,SAVE  2 BYTES   ;Save  if not.
   OF6C   23          4117                   IMC              HL                 sOtherwise,  reload
   OF6D  5E           4118                  LD                E, (HL)            ; original  counter  #.
   OF6E  23           4119                   Inc              HL
   OF6F  56           4120                  LD                D, (HL)            ;Jockey  all over  to
   OF70  28           4121                  DEC               HL                 ; perform  said task!
   OF71  28           4122                  DEC               HL                                                                                                              ’
   OF72  72           4123                  LD                 (HL},D
   OF73  28           4124                  DEC               HL
   OF74  73           4125                  LD                 (HL),E
   OF7S  E1           4126                  POP               HL
   OF76  E5           4127                  PUSH              HL
   OF77   1812        4128                  JR                SET DONE BIT       ;Then set  done bit.
   OF79               4129  DCR_S MODE TBL
   OF79  23           4130                  INC               HL
   OF7A  35           4131                  DEC                (HL)
   OF7B  2010         4132                  JR                NZ, TIMER EXIT
   OF7D  £1           4133                  POP               HL                                                                                           .
   OF7E  €5           4134                  PUSH              HL
   OF7F  CB76         4135                  BIT               REPEAT,  (HL)     ;Repeat?
   0F81  2808         4136                  JR                Z,SET DONE  BIT   ;If  not,  leave.
   OFB3  23           4137                  INC               HL                ;Otherwise,   jockey
   OFB4  23           4138                  INC               HL                ; around  again  and
   OF85  7E           4139                  LO                A, (HL)           ; reload  original  &#.
  OFB6    28              4140                         DEC                     HL
  OF87    77              4141                         LD                      (HL ,A
  OF88   28               4142                         DEC                     HL
  OF89   £1               4143                         PoP                     HL
  OFBA   E5               4144                         PUSH                    HL
  OF88                    4145   SET DONE   BIT
  OF8B   CBFE             4146                         SET                     7,(HL)
  OF8D                    4147   TIMER  EXIT
  OF8    €1               4148                         pap                     HL
  OFBE   C9               4149                         RET
                          4150
                          4151
                          4152
  OFF                     4153   SAVE  2 BYTES
  OFBF   72               4154                         LD                      (WL),D
  0F90   28               4155                         DEC                     HL
  OF91   73               4156                         tb                      (WL),E
  OF92   18F9             4157                         IR        |             TIMER EXIT
                          4158
                          4159   ;Procedure     Init   Timer
                          4160   ;WL  has  address     of  Timer   Table
                          4161   ;0E  has  address     of  Timer   Data  Table
                          4162
                          4163   ;              COMN
                          4164   ; INIT TIME  DATA:
                          4165   ; TEMP1:
                          4166   ;             DEFS    2
                          4167   ; TEMP2:
                          4168   ;             DEFS    2
                          4169
                          4170                  PROG
  OF                      4171    IWITTIME   PAR:
  0F94   00020002         4172                 DEFW    2,2,2
                          4173
  OF9A                    4174   INIT  TIMERQ:
  OF9A   010F94           4175                  LD     BC,INIT  TIME   PAR
  OF9D   1173BA           4176                  LD     DE, INIT TIME   DATA
  OFAO   C00098           4177                  CALL   PARAM_
  OFA3   2A73BA           4178                  LD  ss WL, [TEMP 1)
  OFA6   ED58738C         4179                  LD    CODE(TEMP2)
  OFAA                    4180   INIT TIMER   :
  OFAA   227303           4181                 LO      (TIMER  TABLE   BASE)  ,HL                sStore  given   base  address  for   timer   table
  OFAD   3630             4182                 LD   =  (WL) ,30H                                 sSet  first byte    in timer  table   to  free  and  last  timer
  OFAF   EB               4183                 EX     ODE,HL
  OFBO   227305           4184                 LD      (NEXT TIMER   DATA   BYTE)  ,WL           ;Store  given   base  address  for  data   block
  OFB3   C9               4185                 RET
                          4186
                          4187   ;Procedure    Free    Signal
                          4188   ;Acc  has   signal   number    to  be  Freed
                          4189   ;No  output    is  generated    .                             |                                     :                                                      ‘
                          4190   ;             COMN                                              |
                          4191   ; SIGNAL NUM:
                          4192   ;             DEFS    1
                          4193
                          4194
                          4195                 PROG
     0FB4  00010001       4198                DEFW   1,1
     OFC8  47             4209                LD     «6B,A                                    sTimer offset  already   available
     OFC9  110003         4210                LD     OE,3                                     ;Setup offset  to  subsequent    timers
     OFCD  2808           4212                JR     2,FREE_MATCH                             ;1f so we  have  a match
     OFD1  206A           4216                JR     WZ, FREEEXIT                             ;1f so go  no further
     OFDS  20F8           4219                JR     WZ,FREE1                                 ;1f requested  signal   not  zero  then  go try  the  next
     OFD9  2062           4223                JR     WZ, FREESET.                            ;1f so then  just  reset  LONG
     OFDF  285C           4226                JR     2,FREE SET                               sIf mot  then go  free  it
                          4233  ;                           KENL  3/82
     OFF7  E648           4251                       AND                    48H                 ;Repeating  and  long?
     OFFO  FE4B           4252                       cP                     48H
    OFFB   201C         4253                     JR                    NZ,GET  NEXT       z1f NOT  we don't   want  it.
    OFFD   23           4254                     INC                   HL
    OFFE   23           4255                     INC                   HL
    OFFF   7E           4256                     LO                    A, (HL)
    1000   BA           4257                     cp                    D
    1001   3816         4258                     JR                    C,GET  NEXT        ;1f so  we don't  want   it.
    1003   2008         4259                     JR                    NZ,SUBTRACT   4    ;However,  if  larger,   change  it.
    1005   2B           4260                     DEC                   HL
    1006   7E           4261                     LO                    A, (HL)
    1007   88           4262                     cp                    E                  7Smaller?
    1008   380F         4263                     JR                    C,GET NEXT         ;1f so  we don't  want   it.
    100A   2831         4264                     JR                    Z,EXIT             ;Error  if equal!
    100C   23           4265                     INC                   WL                 ;Set up  HL for  SUBTRACT  4
    1000                4266   SUBTRACT 4
    1000   56           4267                     Lo                    D, (HL)
    100€   28           4268                     DEC                   HL
    100F   5E           4269                     LD                    E, (HL)
    1010   18           4270                     DEC                   DE                 ;Reduce  this  addr.  by  4.
    1011   18           4271                     DEC                   DE
    1012   18           4272                     DEC                   DE
    1013   18           4273                     DEC                   DE
    1014   73           4274                     LD                    (HL],E             ;Replace  reduced  addr.
    1015  23            4275                     INC                   HL                 ; back where   we got  it.
    1016  72          —4276                      LD                    (WL) ,D
    1017   1800        4277                      JR                    GET NEXT
    1019               4278    GET NEXT
   1019   E1           4279                      POP                   HL                 7Now we  can get  next  timer.
   101A   23           4280                      INC                   HL
   1018   23           4281                      Inc                   HL
   101C   23           4282                      IWC                   HL
   1010   £5           4283                     PUSH                  HL
   1O1E   18CE         4284                     JR                    NEXT
   1020                4285   MOVE IT
   1020   0600         4286                     LD                    B,0
   1022   87           4287                     OR                    A                   ;CLEAR CARRY
   1023   E1           4288                     POP                   HL
   1024   01           4289                     POP                   DE                 ;Get addr.   of timer   to delete.
   1025   €5           4290                     PUSH                  HL
   1026   2A7305       4291                     LO                    HL,  (NEXT TIMER DATA_BYTE)    ;Find  # of  bytes
   1029   E052         4292                     SBC                   HL ,DE             ;to move  by  subtraction.
   1028  4D            4293                     LD                    Ct                 ;Save  in counter   reg.
   102C  68            4294                     LD                    L,E                ;Copy  into HL.
   1020  62            4295       |             LD                    H,O
   102E  23            4296                     Inc                   HL                 ;Find source   addr.
   102F  23            4297                     IWC                   HL
   1030  23            4298                     Inc                   HL
   1031  23            4299                     INC                   HL
   1032  EDB0          4300                     LDIR                                     ;Move  it!
   1034  010008        4301                     LD                    8C,8               ;Adjust  Next  available   byte  by -4 from LDIR dest.
   1037  E042          4302                     SBC                   HL ,BC             ;(or -8& from  source  of  LDIR!  (saves instrs.]).
   1039  227305        4303                     Lo                    (NEXT  TIMER  DATA BYTE) ,HL                                                                  ‘
   103c  €1            4304                     PoP                   HL
   1030                4305   EXIT
                       4306   ;                 RET
                       4307
                       4308
   1030                4309   FREE SET:
                          4310    ;           RES  LONG,   (HL)                              sReset   repeat  bit   just  in case
     1030                 4311    FREEEXIT:                                                 ;Return
     1030   C9            4312                RET
                          4313
                          4314
                          4315    ;Procedure  Request   Signal
                          4316    ;WL pair has   length  of  timer
                          4317    ;Acc has  zero  for  repeating   timer   any  other  value   for  a non repeating      type
                          4318    ;Signal number   is  returned   in  the  Accumulator
                          4319    ;           COMN
                          4320    ;REPEATSIG  CODE:
                          4321    ;           DEFS  1
                          4322    ;TIMERLENGTH:
                          4323    ;           DEFS  2
                          4324
                          4325                PROG
                          4326
    103E                  4327   REQUEST SIG  PARAM:
    103€   00020001       4328                DEFW  2,1,2
                          4329
    1044                  4330   REQUEST SIGMALQ:
    1044   01103€         4331                LD    8C,REQUEST   SIG  PARAM
    1047   11738F         4332                LD    DE,REPEAT   SIG  CODE
    104A   CD0098         4333                CALL  PARAM_
    1040   2A73C0         4334                LD  =soML,(TIMER  LENGTH)
                          4336                    :
    1053                  4337   REQUEST SIGNAL
    1053   4F             4338                iD  : C,A                                     ;Put  Repeat   Code   into  C  register
    1054   €8             4339                EX    DE,HL                                   ;Put  length   of  timer   into  DE
    1055   2A7303         4340                LD =  WL, (TIMER  TABLE  BASE)                ;Get  Timer   Base  Address
    1058   AF             4341                XOR   A                                       sInit   offset   to  First  Table   value
    1059   47             4342                iD    =B,A
    105A                  4343   TIMER1:
    105A   CB6E           4344                BIT  FREE,  (HL)                              s;See if  current    timer  free
    105C   283E           4345                JR  = 2,WEXT_TIMER1                           sIf  not  go  get  the  next   timer
    105€   E5             4346                PUSH  HL
                          4347   ;            PUSH  AF
    105F   7E             4348                LD    A, CHL)                                                                                                                                             ,
    1060  £610            4349                AND   10H
    1062   F620           4350                OR    20H
    1064   77             4351                LD    {WL),A
    1065  AF              4352                XOR   A
                          4353   ;            POP   AF
    1066  B2              4354                oR   OD
    1067  2008            4355                JR    WZ,LONG  TIMER
                          4356   ;            RES   FREE, (HL)                              ;Reset   Free  bit
                          4357   ;            oR    O                                       ;Check   for  zero
                          4358   ;            JR             TIMER                          ;If  non_zero   then   its  a  long  timer
                          4359   ;            RES   REPEAT,  (HL)                           ;Set  for  a  NON Repeating     timer                                                 ‘
                         4360    ;            RES LONG,   (HL)
                          4361   ;            LD    =A,C                                    ;Check   for  a short   repeating    timer
   1069   B1             4362                 OR    oC
   106A   2802            4363                JR          A  REPEAT  TIMER                  ;Don't   reset  repeat   bit   in mode  byte   if  non_repeating
    106C  CBF6            4364                SET   REPEAT,  {HL}                           -Set  repeat   bit
    106€                 4365    NOT A REPEAT  TIMER:
    106E   23            4366                 INC   WL                                        ;Go to  next  table   location
    106F   73            4367                LD    s(WL) ,E                                   ;Store  timer   length
    1070  23             4368               /INC    HL
    1071   73            4369                LD     =(HL),€E                                 ;Store   timer   length  again   in  case  of  repeat
    1072   1842          4370                JR  =  IWIT_TIMER_   EXIT                         zAll  done  so  let's  exit
    1074.                4371   LONG TIMER:
    1074  CBDE           4372                SET   LONG,   (HL)                              sSet   long  timer  bit
    1076  79             4373                LD     3=6A,C                                   ;Check   for  a  long  repeat   timer
    1077  87             4374                QR     A
    1078  2818           4375                JR            _A_LONG  REPEAT                   ;If  zero  then   go to  section   for  non  repeating   timer
    107A  05             4376                PUSH   DE                                       ;Store   timer   length  temporarily
    1078  EB             4377                EX     DE,HL                                    ;Swap   regisers
    107C  2A7305         4378                LD   =WL,  (WEXT_TIMER   DATA_BYTE)             ;To  get  free  space   in  long  timer   table
    107F  EB             4379                EX     DE,HL                                    ;Then   swap  back
    1080  CBF6           4380                SET    REPEAT,  (HL)                            ;Set  mode  byte   to repeating
    1082  23             4381                INC    WL
    1083  73             4382                LD   =s(WL)  ,E                                 ;Store   low  byte  of  timer  address    into  the  value  word
    1084  23             4383                INC    HL
    1085  72             4384                LO  =  [WL] ,D                        |         7Store   high  byte  of  timer   address
    1086  EB             4385                EX     ODE,WL                                   ;Move  address    of data  area   into  HL
    1087  01             4386                POP   DE                                        ;Get  back  the   length  of  timer
    1088  73      |      4387                LO  =—-(WL) ,E                                  ;Store   that  in  the  data  table
    1089  23             4388                Inc    WL
    108A  72             4389                LD     =(WL),D.
    1088  23             4390                INC    WL
    108C  73             4391                LD   = (WL),E                                   ;Store   it again
    108)  23             4392                INC    HL
    108E  72            4393                 LD     =[(WL),0
    108F  23            439%                 InC    HL
   1090   227305        4395                 LD     (NEXT  TIMER  _DATA_BYTE),HL             ;Store   the next   available   data   area  for  future  use
   1093   1821          4396                 JR  =  IMIT_TIMER__EXIT
   1095                 4397   WOT_A_LONG   REPEAT:
   1095   23            4398                 INC   HL
   1096                 4399   TIMER2:                            |
   1096   73            4400                 LD  =s_(WL) ,E                                  ;Store   it again
   1097  23             4401                 Inc   WL
   1098   72            4402                 LD  =s (HL) ,D
   1099  23             4403                 INC   HL
   109A   181A          4404                 JR    IWIT  TIMER    EXIT
   109C                 4406   NEXT TIMER1:
   109C  CB66           4407                BIT    €0OT, (HL)
   109E  2006           4408                 JR              NEW  TIMER
   10A0  23             4409                 «EWC  OWL                                       ;Go  to next  mode  byte
   10A1  23             4410                 INC   WL                                        ;
   10A2  23             4411                 INC   WL                                        ;
   10A3  04             4412                 Inc  8B                                        ;Count   to next   offset
   10A4  1884           4413                JR                                              ;Go  back  up  to  init.  tomer
                        4414
   10A6                 4415  MAKE  _WEW TIMER:                         ;Maximum    of 255  signals   allowed
   10A6  DS             4416                PUSH   DE                                       ;Save  DE  for  a  work  register                                                    ‘
   10A7  E5             4417                PUSH   HL                                       ;Save  current    timer  address
   10A8  23             4418                INC    HL                                       ;Go  to  next  available   memory    location   in the  Timer  Table
   1OA9  23             4419                INC    HL
   10AA  23             4420                INC    HL
   10AB  04             4421                Inc    B                                        ;Increment    the  Signal  count
   10AC  3630           4422                LD     (HL)  ,30H                               ;Set  to  free  and  last  timer
                                                                                                                4                                                                                            en =
    10AE   EB             4423              EX   DE,HL                                 ;Save momentarily
    10AF   E1             4424              POP   HL      ,                            ;Get back original   timer
    1080   CBA6           4425              RES  €0OT, (HL)                            ;Reset previous   last  timer
    1082   EB             4426              EX   DE,WL                                 ;Get back  current  last  timer
    1083   01             4427              POP  ODE                                   sRestore DE  register
    1084   18A4           4428              JR    TIMER!         |                     ;Go back up  and  initialize   counter  for  use
                          4429
    1086                  4430  INITTIMER   EXIT:
    1086   £1             4431              POP   HL
    1087   CBAE           4432              RES   FREE, (WL)
    1089   78             4433              Lo   3=6—A,B              sPut the  offset into the Accumulator    for  the user  of  routine
    10BA   C9             4434              RET
                          4435
                         4436
                          4437  ;Procedure  Test  Signal
                          4438  “ACC has  the Signal   number   to be  tested
                          4439  A  value of  True(1)   or False(0)    is returned  in the Accumulator   for the   —
                         4440   |                 Signal  given.
                          4441  ;           Conn
                          4442  ;TESTSIG  NUM:
                          4443  ;           DEFS  1
                          44h
                          4445              PROG
    1088                  4446  TEST_SIG_ PARAM:
    1068   00010001       4447              DEFW  1,1
                   .      4448
    10BF                  4449  TEST SIGNALQ
    10BF   011088         4450              LO             SIG  PARAM
    10€2   11732          4451              LD    DE,TEST  SIG  NUM
   —10C5   c00096         4452              CALL  PARAM_
    10C8   3A73C2         4453              LD    A, (TEST _SIG_NUM)
          ;               4454
    10cB                  455   TEST SIGNAL_
    10c8   4F             4456              LD    C,A                                  ;Put Signal  Code  into  C register
    10CC   2A7303         4457              LO    HL, (TIMER  TABLE BASE)              ;Get Timer  Base Address
    10CF   47             4458              to    «6A,                                 ;Save Signal
    1000   110003         4459              LD   DE, 3                                 ;Set up offset  for  next  timer
    1003   87             4460              oR    A                                    ;See if first  timer   is a match
    1004   2808           4461              JR                                         s1f so go check   it
                          4462                                                                                                                                                              ,
    1006                  4463  TESTI:                                                 ;Loop to match  timer  table   to desired   timer
    1006   CB66           4664              BIT EOT,   (WL)                            ;Check for  end of  table
    1008   200C           4465              JR               FALSE                     ;If so then  return  a not  done
    100A   19             4466              ADD   WL,DE                                3;Nowindex  to next  timer
    1008   0D             4467              DEC   C                                    ;Decrement  to the  timer  desired
    100C   20F8           4468              JR  = WZ,TESTI                             sIf not a timer  desired   timer   then go  back
                          4469
    100€                  4470  SIGNAL_MATCH:                                          ;Here with  a timer  match
    100E   CB6E           4471              BIT   FREE, (HL)
    10€0   2004           4472              JR               FALSE
    10€2   CB7E           4473              BIT DONE,   (HL)                           ;Check for  timer  done
    10€4   2003           4474              JR    WZ,SIGMAL  TRUE                      ;1f so then  go return   a True                                                 ‘
    10€6                  4475  SIGNAL_FALSE:                                          ;Here to return  a  false  for  either
                          4476                       |       |                         sa not done  or non  existent   timer
    10E6   AF             4477              XOR   A                                    sPut a false  in Acc
    10€7   180A           4478              JR    TEST EXIT                            ;Go to the  exit
                        * 4479
    10E9                   4480   SIGNAL_TRUE:                                              ;Here when   timer  is  finished
    10€9   CB76            4481                 BIT REPEAT,    (HL)                         ;Check  for  repeating   timer
    10EB   2002            4482                 JR =  WZ,SIGNAL_TRUE1                       ;If so  then  just  return   True
    10E0   CBEE            4483                 SET   FREE,  (HL)                           ;free current    timer  since  not   repeating
    10E F                  4484   SIGNAL_TRUE1:
                           4485                                                             ;***** Start   add  4/30/82****
    1OEF   CBBE            4486                RES   DONE,  [HL]                            ;Reset current    timer  to  not  done
                           4487                                                             ;eeee® End   add  4/30/82****
    10F1   3E01           4488                 LD     sA,!1                                 sPut a True   in  the Acc
    10F3                   4489   TEST EXIT:                                                ;Return
    10F3   87              4490                OR     A
    10F4   C9              4491                RET
                           4492
                           4493                DATA
                           4494
    7303                   4495   TIMER TABLE   BASE:              2
   7305                   4496   WEXT  TIMER  DATA   BYTE:   DEFS  2
                          4497
                          4496     PROG
                        4500    ;CONTROLLER     SOFTWARE
              <0000>    4501    FIRE                 EQU                  0             ;BITS   IN  STATUS   WORD    TO  CHECK
              <0001>    4502    JOY                  EQU                  1             sWHETHER    DEVICE    IS  ACTIVE
              <0002>    4503    SPIN                 EQU                  2
              <0003>    4504    ARM                  EQU                  3
              <0004>    4505    KBD                  EQU                  4
              <0002>    4506    PLYR_O               EQU                  2             ;OFFSET    TO  CONTROLLER     MEMORY
              <0007>    4507    PLYR_1               EQU                  7
              <0007>    4508    SEG 0                EQU                  07H           7B1T   MASK  IN  PLAYER    STATUS
              <0018>    4509    SEG 1         .      EQU                  18H           FOR    SEGMENT   O  OR  1  DEVICES
              <0000>    4510    FIRE  OLD            EQU                  0             ;OFFSETS    TO  DEBOUNCE     STATUS
              <0001>    4511    FIRE  STATE          EQU                  1             ;BUFFER:    (OLD, STATE)
              <0002>    4512    JOY OLD              EQU                  2
              <0003>    4513    JOY STATE            EQu                  3
              <0004>    4514    SPIN  OLD            EQy                  4
              <0005>    4515    SPIN  STATE          EQU                  5
              <0006>    4516    ARM OLD              EQU                  6
              <0007>    4517    ARM STATE            EQU                  7
              <0008>    4518    KBD OLD              EQU                  8
              <0009>    4519   KBD  STATE            EQU                  9
              <OO00F>   4520   KBD  MASK             EQU                  OFH         MASK    FOR   INPUT   DATA   BYTE
              <0040>    4521    FIRE  MASK           EQU                  40H
              <0040>    4522   ARM  MASK             EQu                  40H
              <O000F>   4523   JOY  MASK             EQu                  OFH
              <0080>    4524   SPWR_MASK             EQU                  101100008
              <0005>    4525   NUM  DEV              EQU                  5           ;NUMBER    OF  POSSIBLE    DEVICES
                        4526s  STACK                  EQU                  73FFH
                        4527   ;MODE_  0 PORT         EQU                  OBEH          ;08
                        4528   ;MODE   1 PORT         EQu                  OBFH          09
              <O00F>    4529   KBD  NULL             EQU                  OFH
              <OOFF>    4530   CTRL_1   PORT         EQU                  OFFH
             <OOFC>     4531   CTRL_O   PORT         EQU                  OFCH
             <O0CO>    4532    STRB  RST   PORT      EQU                 OCOH                   STROBE    RESET   PORT
             <0080>    4533    STRB  SET   PORT     EQU                  080H                   ;STROBE   SET  PORT
             <0000>    4534    CONTROLLER     0     EQU             |     0
             <0001>    4535    CONTROLLER    1      EQU                 4
             <0000>    4536    STROBE   RESET       EQU                  0
             <0001>    4537    STROBE   SET         EQU                   1
                       4538    RERRAARARARAEAAAARAEKAKEKE       MACRO   RAKAKAKAKERAKKKAHEKKAEKREKKKKKKKKK
                       4539
                       4540
                       4541    DELAY   10     MACRO
                       4542                   CALL  DELAY
                       4543                   MEND
                       4544
                       4545    RARRAARARAKHAAAAAAAAARAREAHRKE)          ATARKRRKHARAERERAEKEKAAERERREREE
                       4546    *
                       4547   *    DECODER    TABLE   FOR  THE  KEYBOARD
                       4548    *
   10F5                4549   DEC_KBD_TBL
   10F5 OF             4550                   DEFB  KBD WULL             ;  NULL   ENTRY                                                                                                 ‘
   10F6 06             4551                   DEFB  6                    ;  6!
   10F7 01             4552                   DEFB  1                    ;  {1
   10F8 03             4553                   DEFB  3                    ;  ‘3!
   10F9 09             4554                   DEFB  9                    ;  '9!
   10FA 00             4555                   DEFB  0                    >  'QO!
   10FB OA             4556                   DEFB  10
              10FC  OF            4557                 DEFB  KBD NULL           ; NULL  ENTRY
              10FD  02            4558                 DEFB  2                  ; 2°
              10FE  08            4559                 DEFB  11                 ; RESET
              10FF  07            4560                 DEFB  7                    7
              1100  OF            6561                 DEFB  KBD NULL           ; NULL  ENTRY
              1101  05            4562                DEFB   5                  : 158
              1102  04            4563                 DEFB  4                  + 14s
              1103  08            4564                DEFB  8                   ; 8
              1106  OF            4565                DEF®  KBD  MULL           ; NULL  ENTRY
                                  4568                   |
                                  4569                      GLB                 CONTROLLER INIT
              1105                4570   CONTROLLER   INIT                     INITIALIZE    CONTROLLER  TO  STROBE  RESET
              1105  03c0          4571                QUT    [STRB_RST PORT],A
              1107  AF            4572                MOR   A
              1108  0D2A8008      4573                LD     1X, [CONTROLLER_MAP)
              110C 0023          4574                 Inc    IX
              110€  D023          4575      =i   (sstsé«i    EX
              1110  FD217307      4576                LD     _1Y,DBNCE_BUFF
              1114  060A      —   4577                LD    B,MUM  DEV*2
                “2               4578    *  CLEAR   CONTROLLER   MEMORY  AND  DEBOUNCE   STATUS  BUFFER
              1116                4579   CIMITI
             1116  007700     =   «4580               LO     LIX#0},A
             1119  DD23          4581                 INC    IX
             1118   FD7700       4582                 LD     [1¥#0),A
             111E   F023         4583                 Inc   1Y
             1120   FD7700       4584                 LO     [1¥#0],A
             1123   FD23         4585                 Inc   IY
             112505         ©    4586.                pec   B~
                                 4588   *  CLEAR  REMAINING    VARIABLES
             1128  327368        4589                 LD    {SPIN  SWO CT),A
             1128  3273EC        4590         |       LD    {SPIN  SW1_CT],A
             112E  3273EE        4591                 LD    [S0_CO),A
             1131  3273EF        4592                 LD    {S0_C1},A
             1134  3273F0        4593                 LD    [S1_CO),A
             1137  327361        4594                 LD    (S1_C1],A
             113A  C9            4595                 RET
                                 4596                                                                                                                                                                   ,
                                 4597
                                 4598
             1138  00            4599   DELAY        NOP                       ;DELAY  AFTER   STROBE, BEFORE  READ
             113C  C9            4600                RET
                                 4601   *                            ,
                                 4602   *   CONTROLLER    READ  ROUTINE
                                 4603   *   -               INPUT:                          |
                                 4604   *                         H  - CONTROLLER  NUMBER
                                 4605   *                   OUTPUT:
                                 4606   *                         A  - RAW DATA
                                 4607   *                                                                 |                                                                          ,
                                 4608
             1130                4609   CONT READ
             1130  7c            4610                 LD    A.W
             113&  FEOO          4611                 cp    CONTROLLER  0               71   CONTROLLER<>0
             1140  2004          4612                 JR    NZ,CONT  READ)              sTHEN  READ  PLAYER  1
             1142  DBFC          4613                 IN    A, (CTRL O PORT)            sELSE  READ  PLAYER  0
    1144 1802         4614              JR    CONT READX
    1146              4615   CONTREAD1
    1146 DBFF         4616              IN  =A,  {CTRL_1 PORT)
    1148              4617   CONTREADX
    1148 2F           4618              CPL                              ;COMPLEMENT  DATA   SO O=NO DATA
    1149 C9           4619              RET                                                    ;1= DATA
                      4620
                      4621
                      4622   *
                      4623   *  CONTROLLER  SCANNER  ROUTINE
                      4624   *
                      4625                    GLB               CONT SCAN
    114A              4626   CONTSCAN
    114A DBFC         4627              IN  =A, CCTRL_O PORT)            ;READ  SEGMENT  0, BOTH  PLAYERS
    114C 2F           4628              CPL
    1140 3273EE       4629              LD    [SO CO),A
    1150 DBFF         4630              IN  =A, (CTRL_1_ PORT)
    1152 2F           4631              CPL
    1153 3273EF       4632              LD    [SO C1),A
    1156 0380         4633              OUT   (STRB SET PORT],A          ;STROBE  SEGMENT  1
    1158              4634              DELAY 10                         ;WAIT  10 MICROSECS
    1158 OBFC         4635              IN   A, {CTRL_O PORT)            ;READ  SEGMENT  1, BOTH  PLAYERS
    1150 2F           4636              CPL
    115E 3273F0       4637              LD  = [(S1_CO),A
    1161 DBFF         4638              In  =A, (CTRL_1_ PORT]
    1163 2F           4639              CPL
    1164 3273F1       4640              LD    =[S1_C1},A
    1167 D3C0        4641              OUT    [STRB_RST PORT],A          ;RESET  TO SEGMENT  0
    1169 C9          4642              RET
                     4643
                     4644
                     4645   *
                     4646   *                UPDATE   SPINNER  SWITCH ROUTINE                       *
                     4647   *
                     4648   *
                     4649
                     4650
                     4651
                     4652                    GLB               UPDATE SPINNER  _
   116A              4653   UPDATE SPINNER
   116A DBFC         46546             IN    A, [CTRL_O PORT)           GET   DATA
   116C 2173E8       4655              LD    WL,SPIN  SWO CT            ADDRESS   OF  SPINNER   O COUNT
   116F CB67         4656              BIT   4,A                        7 IF INT BIT  SET
   1171 2008         4657              JR               S1              ; THEN SPINNER  1
                     4658   *  CHECK DIRECTION                          > ELSE  SPINNER  O
   1173 CB6F         4659              BIT   5,A                        ;  IF BIT 5  IS  SET
   1175 2003         4660              JR  = NZ, UPDATE RO              ; THEN  GOING  RIGHT
                     4661                                               - ELSE  LEFT
   1177 35           4662              DEC   [HL]                       ; DECREMENT  SPINNER   COUNTER
   1178 1801         4663              JR    UPDATE S1                  ; GO  CHECK SPINNER   1
                     4664   ***  RIGHT SPINWER   SWITCH
   117A              4665  UPDATE RO
   V17A 34           4666              INC   (HL)                       FRIGHT,  IENCREMENT  COUNTER
                     4667   * CHECK SPINNER  1
   117B DBFF         4668  UPDATE  S1  IN    A, {CTRL 1 PORT)           ;LOOK  AT SPINNER   1 DATA
   117D CB67         4669              BIT   4,A                        7IF  INT BIT  SET
     117F  2009           4670                JR  = NZ,UPDATE   SPINX             ;THEN  NOT  SPINNER   1
     1181  23             4671                INC   WL                            ;ELSE  SPINNER   1, BUMP  HL
                          4672  *   CHECK  DIRECTION
     1182  CBéF           4673                BIT   5,A                           ;  IF BIT  5 IS SET
     1184  2003           4674                JR  =-NZ, UPDATE R1                 ; THEN  GOING  RIGHT
                          4675                                                    3;ELSE  LEFT
     1186  35             4676               DEC    [WL)                          ; DECREMENT   SPINNER  COUNTER
    1187   1801           4677                JR    UPDATE  SPINX
                          4678  ***   RIGHT  SPINMER    SWITCH
     1189                 4679  UPDATE  R1
     1189  34             4680                INC   [HL]                          ;RIGHT,  INCREMENT   COUNTER
     118A                 4681  UPDATE  SPINX
     118A  C9             4682               RET
                          4683
                          4684
                          4685
                         4686   RRAATREREREAAAK     DECODER   ROUT IME   RRRARRARAARARAAAARARAKEKAREE
                          4687  *   THIS  ROUTINE   RETURNS   DECODED   RAW, UNDEBOUNCED    DATA                7
                          4688  *   AND  MAY OR  MAY  WOT  BE  REQUIRED   BY 0/S                      *
                          4689  *
                          4690  *          - [NPUT:
                          4691  *                   H -  CONTROLLER   WUMBER
                          4692  *                   L -  SEGMENT   WUMBER
                          4693  *            OUTPUT:
                          4694  *                                    SEGMENT   0         SEGMENT  1
                          4695  *                   H -  BYTE  1        FIRE               ARM
                          4696  *                  L  - BYTE   2        JOYSTK             KBD
                         4697   *                  E  - BYTE   3       SPINNER
                         4698   *
                         4699   *
                         4700                      GLB                 DECODER
    1188                 4701  DECODER_                                         _
    1188  7D             4702                iD    A,L
    118C  FEO            4703                CP    STROBE  SET                    ;1F L=1  THEN  DECODE  SEGMENT  1
    118E  261A           4704                JR    2,DEC  SEG1
                         4705  *
                         4706  *   SEGMENT   O  (FIRE  BUTTON,   JOYSTICK)
                         4707  *   RETURN   H=FIRE  BUTTON,    L=JOYSTICK,   E=SPINWER
                         4708  *
                         4709  *  DO  SPINNER  FIRST
    1190 01738           4710                LD    BC,SPIN  SWO  CT
    1193 7c              4711                to    A,H.
    119% FEOO            4712                CP    CONTROLLER   0                7TF  PLAYER=0  THEN  GO DECODE
   1196  2801            4713                JR  =2,DEC   PLYR   ©
    1198 03              4714                Inc   BC                            ;ELSE  INCREMENT   BC TO  SPINNER  1
    1199 OA              4715  DEC PLYR     LD   A,   (BC)                       ;GET  SPINNER  SWITCH  COUNT
   119A  5F              4716               LD                                   ;RETURN  IT  INE
   1198  AF              4717               XOR    A
                         4719
   1190  CD1130          4720               CALL   CONT READ                     ;GET  OTHER  DEVICE  DATA  FOR PLAYER
   11A0  57              4721               iD     OD,A                          7SAVE  IT
   11A1  E6OF            4722               AND    JOY MASK                      7MASK  OUT JOYSTICK   DATA
   11A3  6F              4723               iD     L,A                           ;RETURN  IT  INL
                         4724
   11A4  7A              4725               LD    =A,D                          ;RESTORE   DATA
   11A5  E640            4726               AND    FIRE MASK                    ;MASK   OUT FIRE  BUTTON  DATA
      11A7  67             4727                 LD     H,A                            *RETURN    IT IN  HH
      11A8  1816           4728                 JR     DECODERX
                           4729    *
                           4730    * SEGMENT   1  (ARM  BUTTON,    KEYBOARD)
                           4731    *  RETURN   H=ARM   BUTTON,    L=KEYBOARD
                           4732    *
      11AA                 4733   DEC  SEG1
      11AA  0380           4734                 QUT    {[STRB SET  PORT),A            ;STROBE   SEGMENT   1
      11AC  CD1130         4735                 CALL   CONT READ                      ;READ  SEGMENT    1 PLAYER   DATA
      1WAF  57             4736                 LD    D,A                             ;SAVE   IT
      1180  D3CO           4737                 OUT    {STRB  RST  PORT)  ,A          ;RESET   BACK  TO  SEGMENT   0
      1182  E60F           4738                 AND    KBD MASK                       ;MASK  OUT   KBD  DATA
      11B4  2110F5         4739                 LO    4HL,DEC  KBD  TBL               >GET  DECODER   TABLE   ADDRESS
      11B7  0600           4740                 LD     8,0
      1189  4F             4741                 LD     C,A
      118A  09             4742                 ADD    HL,BC                          ;COMPUTE   OFFSET
      1188  6£            a743                  LDL,   CHL)                           ;RETURN   KBD  DATA   IN L
                           4
      11BC  7A             4745                 LD    A,D                            ;RESTORE    DATA
     11BD   £640           4746                 AND   ARM  MASK                      ;MASK   OUT  ARM  BUTTON    DATA
     11BF  67              «747                 LD     H,A                           sRETURN    IT  INH
     11C0                  4748   DECODERK
     110    C9             4749                 RET
                           4750
                           4751
                           4752
                          4753
                          4754    *   POLLING   ROUTINE    FOR  ALL  DEVICES   IW  CONTROLLER    *
                          4755    *
                          4756    *
                          4757
                          4758                        GLB                  POLLER_
     11C1                 4759    POLLER_
     11C1  CD114A         4760                  CALL  CONT  SCAN                     ;GO  SCAN   ALL  THE  DATA   FIRST
     V1C4  FD217307       4761                  LD    1Y,DBNCE   BUFF                ;DEBOUNCE    BUFFER   POINTER
     11C8  DD2A8008       4762                  LD    1X,  (CONTROLLER   MAP)        >CONTROLLER    MEMORY    POINTER
     11CC  DOES           4763                  PUSH  IX
     11CE  DD7E00         4764                  LD   A,  {1X+0]            ;GET  PLAYER   O  STATUS
     11D1  CB7F           4765                  BIT   7,A                  IF   PLAYER   O NOT   ACTIVE
     11D3  281E           4766                  JR    2,CHK  PLYR    1     ;THEN  CHECK   PLAYER   1
                          4767    *   PLAYER   O IS  ACTIVE                ELSE
     11D5  47             4768                  LD    8B,A                 ;SAVE  STATUS
     11D6  110002         4769                  LD    DE,PLYR_O            ;COMPUTE   ADDRESS    OF PLAYER  0
     11D9  D019           4770                  ADD   IX,DE                ;CONTROLLER   MEMORY
     1108  £607           4771                  AND   SEG 0                ;1F  SEGMENT   O  IS  NOT ACTIVE
     11D0  2809           4772                  JR    2,CHK  SEG   01  =;   THEN  CHECK   SEGMENT    1
                          4773    *   SEGMENT   O ACTIVE                   +ELSE
     11DF  3A73EE         4774                  LO  A,{SO    CO}
     11E2  2173EB         4775                  LD    HL,SPIN   SWO  CT
     11E5  €D1220         4776                  CALL  DECODE  0            ;DECODE   DATA  FOR  SEGMENT    0
     1168                 4777   CHK  SEG  01
    11€8   78             4778                  LD    A,B                  ;RESTORE   PLAYER  O   STATUS
    11E9   £618           4779                 AND  SEG   1                :1F  SEGMENT   1  1S NOT  ACTIVE
    11EB   2806           4780                  JR    Z,CHK  PLYR   1  =;   THEN  CHECK   PLAYER   1
                          4781   *   SEGMENT    1 IS  ACTIVE               7ELSE
    11ED   3A73FO         4782                 LD     A, ($1 CO}
    11FO   CD123F         4783                 CALL   DECODE  1            ;DECODE  DATA   FOR  SEGMENT    1
      11F3                 4784   CHKPLYR   1
      11F3   DOE}          4785                POP   IX
      11f5   0D7E01        4786                LD   A, [1X#1)          7GET  PLAYER   1 STATUS
      11F8   CB7E          4787                BIT   7,A               >1F  PLAYER  1  1S NOT  ACTIVE
      11FA   2823          4788                JR   2, POLLER_X         sTHEN  EXIT,   ALL DOWE
                           4789   *  PLAYER   1 IS ACTIVE
      11FC  47             4790                LD   B,A                ;SAVE  PLAYER   1 STATUS
      11FD   11000A        4791                LD  DE,2*NUM   DEV      ;COMPUTE  ADDRESS   OF  DEBOUNCE  BUFFER
      1200   FD19          4792                ADD   1Y,DE             FOR   PLAYER   1
      1202   110007       4793                 LD   DE,PLYR_1          ;COMPUTE  ADDRESS   OF  CONTROLLER MEMORY
      1205  0019          4794                 ADD   IX,DE             FOR  PLAYER    1
      1207  £607          4795                 AND  SEG 0              -1F SEGMENT   0  1S NOT  ACTIVE
      1209  2809          4796                 JR          SEG  11     -THEN  CHECK  SEGMENT   1
            ~             4797   *   SEGMENT   0 IS ACTIVE             sELSE
      1208  3A73EF        4798                 LD   A, {S0_C1}
      120E  2173EC      = «4799                LD   HL,SPIN  Swi CT
      1211. CD1220        4800                 CALL DECODE  0          ;DECODE  DATA   FOR SEGMENT  0
      1214                4801   CHK SEG  11
      1214  78            4802                 LD   A,B                RESTORE   STATUS   FOR  PLAYER  1
      1215  £618          4803                AND   SEG 1              ;1F SEGMENT   1  IS NOT  ACTIVE
      1217  2806          4804                 JR   2, POLLER_X         ;THEN  EXIT,  ALL  DONE
                          4805   *   SEGMENT   1 IS ACTIVE             ;ELSE
      1219  3A73F1        4806                LD    A, £S1.C1)
      121C  CD123F        4807                CALL  DECODE  1          ;DECODE  DATA  FOR  SEGMENT  1
      121F                4808   POLLER  x
      121F  C9            4809                RET
                          4810
                          4811   *   DECODER  ROUTINE   FOR  SEGMENT 0
                          4812   *
                          4813   *             INPUT:
                          4814   *                  A  - DATA
                          4815   *                  B  - DEVICE  STATUS  BYTE  FOR  CURRENT  PLAYER
                          4816   *                 HL  - ADDRESS  OF SPINNER   DATA
                          4817   *                 IX  - POINTER  TO CONTROLLER   MEMORY
                          4818   *                 LY  - POINTER  TO DEBOUNCE   STATUS   BUFFER
                          4819   *
     1220                 4820   DECODE 0
     1220   4F            4821                LD    C,A               ;SAVE  DATA
     1221   CB48          4822                BIT   JOY,8             ;1&  JOYSTICK   NOT  ACTIVE
     1223   2804          4823                JR    2,DEC_FIRE        ;THEN  CHECK   FIRE  BUTTON
                          4824   *   JOYSTICK  ACTIVE
     1225   cD12B9        4825                CALL  JOY DBNCE         ;DEBOUNCE   JOYSTICK   DATA
     1228   79            4826                LD    AC
     1229                 4827   DEC_FIRE
     1229   cB40          4828                BIT   FIRE,B            ;EF  FIRE  BUTTON   NOT ACTIVE
     122B   2804          4829                JR.   2,DEC_SPWR        ;THEN  CHECK   SPINNER
                          4830   *   FIRE  BUTTON  ACTIVE             ELSE
     122D  cD 1289        4831                CALL  FIRE DBNCE        ;DEBOUNCE   FIRE  BUTTON
     1230   79            4832                LD    A.C
     1231                 4833  DEC  SPNR
     1231  cB50           4834                BIT   SPIN,8            IF   SPINNER   NOT  ACTIVE
     1233  2809           4835                JR    2,DECODE_OX       7THEN  EXIT  DECODER
                          4836   *   SPINNER  ACTIVE
     1235  7E             4837                LDA,     CHL}           =SAVE  SPINNER   COUNT
     1236  DD8602         4838                ADD  A,LIX*SPIN]
     1239  007702         4839                LD    (IX*SPIN],A       >IN  CONTROLLER   MEMORY
     123C  AF             4840                XOR   A
    1230   77            4841                LD                        sCLEAR  COUNTER
    123                  4842   DECODE OX
    123E   C9            4843                RET
                         4844
                         4845
                         4846   *  DECODER   ROUTINE   FOR SEGMENT   1
                         4847   *
                         4848   *            INPUT:
                         4849   *                 A  - DATA
                         4850   *                 B  - DEVICE   STATUS   BYTE  FOR  CURRENT   PLAYER
                         4851   *                 IX -  POINTER   TO CONTROLLER   MEMORY
                         4852   *                 IY -  POINTER   TO DEBOUNCE   STATUS   BUFFER
                         4853   *
    123F                 4854   DECODE 1
    1235   4F            4855                LD   =6CC,A              *SAVE   DATA
    1240   CB58          4856                BIT  ARM,8               s1F  ARM  BUTTON   NOT  ACTIVE
    1242  2804           4857                JR          KBD          sTHEN   CHECK  KEYBOARD
                         4858   *  ARM  BUTTON  ACTIVE                sELSE
    1244  CD12E9         4859               CALL  ARM  DBNCE          ;DEBOUNCE   ARM  BUTTON
    1247   79            4860                LD   sA,C
    1248                 4861   DEC_KBD
    1248  CB60           4862               BIT   KBD,B               s1F  KEYBOARD   NOT  ACTIVE
    124A  2803           4863                JR              1X       sTHEN  EXIT  DECODER
                         4864   * KBD  ACTIVE
    124C  (D1250         4865               CALL  KBD_DBNCE           ;DEBOUNCE   KEYBOARD
    124F           |     4866  DECODE  1X
    124F  C9             4867               RET
                         4868
                         4869
                         4870
                         4871   *  KEYBOARD  DEBOUNCE    ROUTINE    *
                         4872   *
                         4873  *             INPUT:
                         4874  *                  A  - RAW  DATA
                         4875  *                 IX  - CONTROLLER    MEMORY  POINTER
                         4876  *                 IY  - DEBOUNCE    STATE  BUFFER
                        4877   *
   1250                 4878   KBD OBNCE
   1250   C5            4879                PUSH  BC
   1251   D5            4880                PUSH  DE
   1252   £5            4881                PUSH  HL
   1253   E60F          4882                AND  KBD  MASK            sMASK  OUT  VALID  DATA
   1255   5F            4883                LD    E,A                 -SAVE  IT
   1256   FD4608        4884                LD    8,{IY+KBD   OLD)    ;GET  OLD  DATA  AND  CURREN  STATE
   1259   FO7EO9        4885                LO    A,(IY+#KBD  STATE)
   125C   FEOO          4886                cp    60                  s1F  STATE  <> 0
   125E   201A          4887                JR            ST1         *THEN  MUST  BE  STATE  1
                        4888   *   STATE  = 0                         ELSE
 - 1260   78            4889                LD    A,E                 *GET  CURRENT  DATA
   1261   88            4890                cP    6B                  >1F OLD=NEW
   1262   2805          4891                JR          REG           sTHEN  SAW  DATA  TWICE   IN SEQUENCE
   1264   F07308        4892                LO    {IY*KBD  OLD],E     ;ELSE  FIRST  TIME,   SAVE  CURRENT  DATA
   1267   181C          4893                JR    «BO EXIT
                        4894   *   SAW DATA  TWICE   IN SEQUENCE
   1269                 4895   KBD REG
   1269  3601           4896                LD    A,1                 >SET  STATE=1
   1268   FD7709        4897                LD             STATE),A
                      4898   *  DECODE   KEYBOARD   DATA
   126E  2110F5       4899                LD    WL,DEC  KBD  TBL     ;DECODE  TABLE   ADDRESS
   1271  1600         4900                iD    D,0                 ;D/E   RAW DATA
   1273  19           4901                ADD   HL,DE               ;COMPUTE   ADDRESS    INTO  TABLE
   1274  7E           4902                iD    A, {HL}             700  TABLE   LOOKUP
   1275  007704       4903                LD    {IX*KBD)  ,A        ;SAVE   IN  CONTROLLER   MEMORY  aKBD
   1278  1808         4904                JR    KBD EXIT
                      4905   *  STATE  =  1
   127A               4906   KBD_ST1         |
   127A  7B           4907                LD    A,E                 :GET  CURRENT   DATA
   1278  88           4908                CP   8B                   7 IF OLD=NEW
   127C  2807         4909                JR    2,KBD  EXIT         ;NO  CHANGE   IN  STATE
   127E  FD7308       4910                LO    C[1IY*KBDOLD],E     ;ELSE   SAVE  CURRENT   DATA
   1281  AF           4911                XOR   A                   sSET  STATE=0
   1282  FD7709       4912                LD    [1Y+#KBD_STATE],A
   1285               4913  K8D EXIT
   1285  €1           4914                POP   HL
   1286 D1            4915                POP   DE
   1287  C1           4916                POP   BC
   1288  C9           4917               RET
                      4918
                      4919  *   FIRE  BUTTON   DEBOUNCE   ROUTINE    *
                      4920  *
                      4921  *             INPUT:
                     4922   *                   A  - RAW  DATA
                     4923   *                  IX  - CONTROLLER    MEMORY  POINTER
                     4924   *                  IY  - DEBOUNCE   STATE   BUFFER
                     4925   *
  1289               4926   FIRE DBNCE
  1289  C5           4927                PUSH   BC
  128A  D5           4928                PUSH   DE
  1288  E640         4929                AND    FIRE MASK            7MASK  OUT   VALID  DATA
  1280  5F           4930        |       LO     E,A                 ;SAVE   IT
  128E  FD4600       4931                LD    8B,{IY+FIRE  OLD)     ;GET  OLD  DATA  AND  CURRENT   STATE
  1291  FD7E01       4932                LD     A,CIY+FIRE_  STATE)
  1294  FEOO         4933                cp     60                  sIF  STATE  <>  0
  1296  2013         4934                JR   =WZ,FIRE  ST1          ;THEN  MUST   BE STATE   1
                     4935   *   STATE  = 0                          sELSE
  1298  78           4936                iD    A,E                  ;GET  CURRENT   DATA
  1299  Bé  -        4937                CP    6B                   3iF  OLD=NEW                                                                                                             ’
  129A  2805         4938                JR    Z, FIRE REG           sTHEN  SAW  DATA  TWICE   IN SEQUENCE
  129C  FD7300       4939                LD     C(IY*FIRE OLD),E     ;ELSE  FIRST   TIME,  SAVE  CURRENT DATA
  129F  1815         4940                «SR   CFERE_EXIT
                     4941   *  SAW  DATA  TWICE   IN  SEQUENCE
  12A1               4942   FIRE REG
  12A1  3€01         4943                LD    A,1                  “SET  STATE=1
  12A3  FD7701       4944                LD     CIY+FIRE  STATE)  ,A
  12A6  DD7300       4945                LD     CIX+FIRE],E          sSAVE  IN  CONTROLLER   MEMORY  afIRE
  1209  1808         4946                JR    FIRE EXIT
                     4947  *   STATE  =  1
  12AB               4948  FIRE ST1                                                                                                                                        .
  12AB  7B           4949                LO    A,E                 *GET  CURRENT   DATA
  12AC  88           4950                cP    OB                  -1F  OLD=NEW
  12AD  2807         4951                JR    Z,FIRE  EXIT          ;NO CHANGE   IN  STATE
  12AF  FO7300       4952                LD    (1Y*FIRE  OLD),E      sELSE  SAVE  CURRENT   DATA
  12B2  AF           4953                KOR   A                   -SET  STATE=0
  1283  FO7701       4954                LD    CIY+FIRE  STATE)  ,A
     12B6                  4955  FIRE EXIT
     12B6  D1              4956              POP   DE
     12B7  C1              4957              pop   BC
     1288  C9              4958           -  RET      |
                           4959
                           4960  *  JOYSTICK  DEBOUNCE   ROUTINE    *
                           4961  *                              ee
                           4962  *           INPUT:
                           4963  *                 A  - RAW DATA
                           4964  *                IX  - CONTROLLER   MEMORY  POINTER
                           4965  *                IY  - DEBOUNCE   STATE  BUFFER
                           4966  *
     1289                  4967  JOYDBNCE
     1289  C5       |      4968              PUSH  BC
     12BA  D5              4969              PUSH  DE
     12BB  E60F            4970              AND   JOY  MASK           sMASK OUT  VALID  DATA
     1280  5F              4971              LD    €,A                 sSAVE  IT
     12BE  FD4602          4972              LD   B,{IY+JOY   OLD)     ;GET OLD  DATA AND  CURRENT   STATE
     12C1  FO7E03          4973              LD   A,  LIY+JOY STATE)
     12C4  FE0O            4974              cp    60                  s1F STATE  <> 0
     12C6  2013            4975              JR    WZ,JOY ST1          *THEN MUST  BE STATE  1
                           4976  *  STATE  = 0                         *ELSE
     12C8  78              4977              iD    A,E                 sGET CURRENT  DATA
     12C9  88              4978              cP    6B                  °1F OLD=NEW
     12CA  2805            4979              JR          REG           >THEN SAW  DATA TWICE  IN   SEQUENCE
     12CC  FD7302          4980              LO     {1¥+JOY OLD],E     ;ELSE FIRST  TIME,  SAVE  CURRENT    DATA
     12CF  1815 —          4981              JR    JOY_ EXIT                            .
                           4982  *  SAW  DATA TWICE   IN SEQUENCE
     1201                  4983  JOYREG                          .       .
     1201  3E01            4984              LD    A,1        |        sSET STATE=1
     12D3  FD7703          4985              LD             STATE),A                                 |
     1206  0D7301          4986              LD                        sSAVE  IN CONTROLLER  MEMORY   @JOY
     1209  1808            4987              JR
                           4988  *  STATE  = 1
     1208                  4989  JOYST1
     1208  78              4990              LD    A,E                 sGET CURRENT  DATA
     12DC  88              4991              cP    OB                  >1F OLD=NEW
     12D0  2807            4992              JR          EXIT          *NO CHANGE  IN STATE
     12DF  FD7302          4993              LO             OLD),E     ;ELSE SAVE  CURRENT  DATA
     12E2  AF              4994              XOR   A                   sSET STATE=0                                                                                                                   ,
     12E3  FD7703          4995              LO             STATE]  ,A
     12E6                  4996  JOYEXIT
     12E6  D1              4997              POP   DE
     12€7  C1              4998              POP   BC
     12E8  C9              4999              RET
                           5000
                           5001  *  ARM  BUTTON DEBOUNCE   ROUTINE     *
                           5002  *
                           5003  *           INPUT:
                           5004  *                 A  - RAW DATA
                           5005  *                IX  - CONTROLLER   MEMORY  POINTER                                                                                             ‘
                           5006  *                1Y  - DEBOUNCE   STATE  BUFFER
                           5007  *
     12E9                  5008  ARMDBNCE
     12E9  C5              5009              PUSH  BC
     12EA  DS              5010              PUSH  DE
     12EB  E640            5011              AND   ARM MASK            7MASK OUT  VALID DATA
   12ED  5F              5012                 LD    E,A                 SAVE    IT
   12EE  FD4606          5013                 LD    B,{IY+ARM  OLD)     ;GET  OLD  DATA  AND   CURRENT   STATE
   12F1  FD7E07          5014                 LD    A, [IY+ARM_ STATE)
   12-4  FEOO            5015                 cp    0                   SIF  STATE   <> 0
   12F6  2013            5016                 JR    NZ,ARM STI          >THEN   MUST  BE  STATE   1
                         5017   *   STATE   = 0                         ;ELSE
   12F8  7B              5018                 LD    A,E         _'            CURRENT   DATA
   12F9  B8              5019                 cP    B                   TF   OLD=NEW
   12FA  2805            5020                 JR    2,ARM_REG           ;THEN   SAW DATA   TWICE   IN  SEQUENCE
   12FC  F07306          5021                 LD    {IY*ARM  OLD],E     ;ELSE   FIRST  TIME,   SAVE   CURRENT   DATA
   12FF  1815            5022                 JR    ARMEXIT
                         5023   *   SAW  DATA  TWICE   1N SEQUENCE
   1301                  5024   ARM REG
   1301  3€01            5025                 LD    A,1                 ;SET  STATE=1
   1303  FD7707          5026                 LD    (IY*ARM_STATE],A
   1306  007303          5027                 LO    (IX*ARMJ,E          ;SAVE   IM CONTROLLER    MEMORY   @ARM
   1309  1808            5028                 JR   ARM  EXIT
                         5029   *   STATE   = 1
   1308                  5030   ARM ST1
   1308  78              5031                 LD   A,E                  GET   CURRENT   DATA
   130C  88              5032                 cp   B                    IF   OLO=NEW
   1300  2807            5033                 SR    2,ARM_EXIT          ;WO  CHANGE   IN STATE
   130F  FD7306          5034                 LD             OLD),E     ;ELSE  SAVE   CURRENT   DATA
   1312  AF              5035                 KOR  A                    SET   STATE=0
   1313  FD7707          5036                 LD    [IY+ARM STATE)   ,A
   1316                  5037   ARM EXIT
   1316  D1              5038                 POP  DE
   1317  C1              5039                 POP  BC
   1318  C9              5040                 RET
                         5041
                         5042
                         5043   ;                  EXT                  CONTROLLER  MAP
                         5044   * THIS   1S  AN EXTERNAL   POINTER   (  DEFINED   IN  THE CARTRIDGE)     TO  THE
                         5045   * CARTRIDGE    PROGRAMMER'S    CONTROLLER    MAP  AREA.
                         5046
                         5047   * THE  CARTRIDGE   PROGRAMMER    IS  RESPONSIBLE    FOR  MAINTAINING     THIS  AREA.
                         5048
                         5049                      DATA
                         5050   DBNCE BUFF         DEFS                 NUM DEV*4
                         5051   SPIN SwO  CT       DEFS                 1
                         5052   SPIN SW1  CT       DEFS                 1
                         5053   STROBE FLG         DEFS                 1
                         5054   $0CO               DEFS                 1
                         5055   sOC1               DEFS                 1
                         5056   $1CO               DEFS                 1
                         5057   $1 C1              DEFS                 1
                         5058    PROG
                      5062
                      5063   * EXTERNAL  ROUTINES  FROM OS
                      5064
                      5065                   EXT   INIT TABLE
                      5066                   EXT   PUT _VRAM
                      5067                   EXT   GAMENAME
                      5068                   EXT   WRITEREGISTER
                      5069                   EXT   READREGISTER
                      5070                   EXT   WRITE _VRAM
                      5071                   EXT  ‘START GAME
                      5072
                      5073   RIARARAAKAAEKERKRARAKKARARARRAEDEFINITIONS   RESKKRAAARAKERAHEAKAKEAKKAKKE
                      5074
             <OOBE>   5075  MODE O PORT       EQU  OBEH
             <OOBF>   5076  MODE 1 PORT       EQU  OBFH
                      5079
                      5080                    GLB  ASCII TBL                        ;POINTER  TO UPPERCASE   ASCII  GENERATORS
                      5081                    GLB  NUMBER TBL                       POINTER   TO 0-9  GENERATORS
                      5082                    GLB DISPLAY LOGO.                     :DISPLAY  COLECOVISION   LOGO
                      5083                    GLB  LOADASCII_                       ;LOAD PATTERN  GEN  TABLE   WITH FULL ASCII   SET
                      5084                    GLB  FILL VRAM_                       FILL  VRAM  WITH  A VALUE
                      5085                    GLB MODE  1_                          ;SET UP  MODE 1  GRAPHICS
                      5088  * DISPLAY                    THE  COLECO  LOGO  SCREEN  WITH  COLECOVISION
                      5089  *           LOGO   DISPLAYS    BACKGROUND.     THE  GAME
                      5091  *                  ANDA COPYRIGHT  YEAR  ARE OBTAINED    FROMLTHE MCARTRIDGEER,
                      5092  *                  AND  OVERLAYED  ONTO  THE  LOGO  SCREEN.   THE  LOGO  IS THEN
                      5093  *                  DISPLAYED  FOR  10 SECONDS   AFTER  WHICH  TIME  A JUMP  TO
                      50%   *                  THE  GAME START  ADDRESS   IS EXECUTED.
                      5095  *                    |
                      5096  *                  IF NO  CARTRIDGE  IS  PRESENT  A  DEFAULT  MESSAGE  1S
                      5097  *                  DISPLAYED,   INSTRUCTING   THE OPERATOR   TO:
                      5098  *
                      5099  *                          “TURN  GAME OFF"
                      5100  *                          “BEFORE  INSERTING   CARTRIDGE"
                      5101  *                          “HOREXPANSION   MODULE."
                      5102  *                          "[COPYRIGHT   SYMBOL]   1982 COLECO"
                      5103  *                  THIS  MESSAGE  IS DISPLAYED   FOR  60  SECONDS,  THE SCREEN
                      5104  *                  1S THEN  BLANKED  AND  FINALLY   A SOFT  HALT  (JP $)  IS
                      5105  *      |           EXECUTED  LOCKING  UP  THE  PROGRAM  UNTIL  THE  UNIT  IS
                     5106   *                  RESET.
                     5107   *                             |
                     5108   *                  DISPLAY LOGO   EXITS WITH   THE  VDP IN  MODE  1, THE  SCREEN
                     5109   *          |       BLANKED,  AND  THE ASCII  CHARACTER    SET IN  VRAM.
                     5110   *                  THE  MEMORY MAP  IS AS  FOLLOWS:            |                 |                                                        ‘
                     5111   *        |
                     5113   *                  3800H-3FFFH    SPRITE  GENERATOR   TABLE
                            *                  2000H-37FFH    PATTERN  COLOR  TABLE
                            *                  1BOOH-187FH    SPRITE  ATTRIBUTE   TABLE
                            *                  1800H-1AFFH    PATTERN  NAME  TABLE
                         5117   *                  OOOOH-17FFH     PATTERN  GENERATOR   TABLE
                         5122
                         5123                    PROG
                         5124
                         5125   *  FILL VRAM  WITH  O'S
    1319   210000        5126   DISPLAY LOGO     —sLDHL, 0
    131C   114000        5127                    LD DE,  16384
    131F   3€00          5128                    LD  A,O
    1321   CD18D4        5129                    CALL   FILL_VRAM_
                         5130
                         5131   *  SET UP  VDP WITH  MODE 1
    1324  CD1BE9         5132                    CALL   MODE 1_
                         5135
                         5136   *  WRITE OUT  ASCII  GENERATOR   TABLES
    1327  €D1927         5137                    CALL   LOAD_ASCII_
                         5138
                         5139   *  WRITE OUT  GRAPHICS   GENERATORS
    132A  2118A3         5140                    LO  HL,OBJ  TABLE               ;POINT   TO  TABLE  OF  PTN  GEN  NUMBERS
    132D  110060         5141                    LO DE, 60H         |            ITEM    LOCATION   IN  VRAM  PATTERN  GEN  TABLE
    1330  £5             5142   WRITE_LOOP       PUSH   HL                       ;SAVE   LOCATION   OF  CURRENT   CONSTRUCTION
    1331  D5             5143               _    PUSH  DE                        ;SAVE   VRAM  ITEM  #
                        5144    *  CALCULATE  GENERATOR   LOCATION     —
    1332  7E            5145                     LD  A,CHL)
    1333  FEFF          5146                     CP  OFFH                        ;HAVE  WE  PROCESSED    ALL  GENERATORS?
    1335  2818          5147                     JR  2,DONE  LOGO                ; YES.    WE'RE  ALL  DONE
    1337  47            5148                     LD  B,A                         ; NO.  B=NUMBER    FROM  OBJ TABLES
    1338  04            5149                     INC  B
    1339  2114C3        5150                     LD  HL,LOGO  GEN                ;POINT   TO ROM  GENERATOR    TABLE
    133C  110008        5151                     LD  DE,8                        ;WE'RE   GOING  TO  ADD  8  FOR  EVERY
    133F  1015          5152   ADDR ADJ       _  DJNZ  ADD_8                     ;GENERATOR    INTO  THE  ROM  GEN  TBL
                        5153
                        5154   *   DONE ADJUSTING  ROM   GENERATOR   ADDRESS
                        5155
   1341   D1            5156                     POP  DE                         ;RESTORE   ITEM  #  IN  VRAM                                                                               :
   1342   D5            5157                     PUSH  DE                        ;SAVE   IT
   1343   FD210001      5158                     LD  IY,1                        ;NUMBER   OF GENERATORS
   1347   3€03          5159                     LD A,3                          ;PATTERN  GEN  TABLE    CODE
   1349   CDIFBE        5160                     CALL  PUT _VRAM                 ;HL=ROM   ADDRESS
   134C   01            5161                     POP  DE                         RESTORE    ITEM  #  IN VRAM
   1340   E1            5162                     POP  HL                         ;RESTORE   CONSTRUCTION    ADDRESS
   134E   13            5163                     INC  DE                        ;SET   UP  FOR  NEXT  ITEM
   134F   23            5164                     INC  HL
   1350   18DE          5165                     JR WRITE  LOOP                 ;KEEP   GOING   UNTIL  DONE
                        5166
   1352   D1            5167   DONE LOGO         POP DE                         ;GOT   TO  POP  FOR  EVERY  PUSH                                                         .
   1353   £1            5168                     POP  HL
   1354   1803          5169                     JR WRITE  NAMES                ;HOP   AROUND  ADD 8
                        5170
   1356   19            5171   ADD 8            ADD HL  ,DE                     ;POINT   TO  NEXT  GENERATOR
   1357   1866          5172                     JR ADDR  ADJ
                        5173
                                                                                    f                                              é          ‘                       “             \                         4i
                                      5174   stteeteeaneteneewee     YRTTE  OUT  PATTERN    NAME TABLE   *****eeeenenenen
                                      5175
                                      5176   *  WRITE   OUT  PATTERN NAME  TABLE
                1359   211440         5177   WRITE  NAMES       LD  HL,LOGO NAMES                 WRITE   QUT  TOP  HALF
                135C   110085         5178                      LD DE, 133                       ;OF  COLCOVISION
                135F   FD210016       ©5179                     LO  1Y,22        |  |
                1363   3602           5180                      LOA,2     |
                1365   CD1FBE         5181                      CALL  PUT_VRAM
                                      5182
                1368   211463         5183                      LD HL,LOGO   NAMES+22            ;WRITE   OUT  BOTTOM   HALF
                1368   1100A5         5184                      LD DE, 165                       OF   COLECOVISION
                136E   FD210016  =:   5185                      LD  1Y,22
                1372   3602           5186                      LD A,2
                1374   CDIFBE        5187                       CALL  PUT VRAM
                                     5188                          |
                                      5189
                1377   211401         5190                      LD HL, TRADEMARK                 ;WRITE   OUT  TM
                137A   110098        5191                       LD DE, 155
                137D   FO210002  =:  5192                       LD  1Y,2
                1381  3602           5193                       LO A,2
                1383  CD1FBE         5194                       CALL  PUT _VRAM
                                     5195
                                     5196    * SET  UP  DEFAULT  COPYRIGHT   MESSAGE
                1386  211484         5197                       LO HL, LOGO NAMES+103            ;WRITE   OUT c  1982  COLECO
                1389  1102AA         5198                       LD DE, 682
                138C  FD210000       5199                       LO 1Y,13
                1390  3602           5200                       LD A,2
                1392  CD1FBE         5201                       CALL  PUTVRAM
                                         8   SRERRARARAKREARAEARRKEWRITE   OuT   COLOR   NAME  TABLE  RREAEAKKAERARKAREKRERE
                                     5204
               1395   211438         5205                       LD HL,LOGO  COLORS
               1398   110000         5206                       LD DE,0
                1398  3E04           5207                       LO A,4
                1390  FD210012       5208                       LD 1Y,18
               13A1   COIFBE         5209                       CALL  PUT_VRAM
                                     5212
                                     5213   *  ENABLE   DISPLAY
               13A4   0601           5214                       LD B,1
               13A6   OECO           5215                       LD C, 110000008
               13AB   CD1FD9         5216                       CALL WRITE  REGISTER
                                     5217
                                     5218   *  CARTRIDGE   TEST
               13AB   218000         5219                       LD HL, 8000H                     ;1F  A CARTRIDGE    IS PRESENT
               13AE   7E             5220                       LDA,  [HL)                       >LOCATION   8000H  WILL   = OAAH
               13AF   FEAA           5221                       CP OAAH                          AND   B001H  WILL  =  55H
               1381   204C           5222                       JR NZ,NO CARTRIDGE               ;     NOT  PRESENT
               1383   23             5223                       INC HL
               1384   7E             5224                       LD A, (HL)                                                                                                                  ‘
               1385   FESS           5225                       cp 55H
               1387   2046           5226                       JR NZ,NO CARTRIDGE
                                     5227                                                        ;     NOT  PRESENT
                                     5228   *  CARTRIDGE   PRESENT
                                     5229   *  DISPLAY   GAME  TITLE
               1389   218024         5230                       LO WL,GAME  NAME
    13BC CD1946         5231                       CALL  PARSE                 ;GET LENGTH  OF  STRING
    13BF  118024        5232.                      LO  DE,GAME  NAME           ;STARTING  LOCATION   OF  1ST  STRING
   13C2  210201         5233                       LD  HL,513                  ;LOCATION  (0767)    TO  START  PRINTING
   13C5  CD1951         5234                       CALL  CENTER  PRT           PRINT  IT
                        5235
                        5236   * DISPLAY   COMPANY   NAME
   13CB  218024         5237                       LD  HL,GAME  NAME           ;GET PAST  1ST  STRING
   13CB  CD1946         5238                       CALL  PARSE
   13CE  23             5239                       INC  HL
   13CF  54             5240                       LD  D,H                     ;STARTING  LOCATION   OF  2ND  STRING
   1300  5D             5241                       LO  E,L                     SAVED  IN  DE
   1301  CD1946         52462                      CALL  PARSE                 GET  LENGTH  OF  STRING
   1304  2101C1         5243                       LD  HL,449                  ;LOCATION  (0767)   TO   START  PRINTING
   1307  CD1951         5264                       CALL  CENTER  PRT           PRINT  IT
                        5245                         |
                        5246  *  CHANGE   DATE
   130A  218024         5247                       LD  HL,GAME  NAME           ;USE PARSE  TO  ADVANCE   HL TO
   1300  CD1946         5248                       CALL  PARSE                 ;COPYRIGHT  YEAR
   13E0  23             5249                       INC  HL
   13E1  CD1946         5250                       CALL  PARSE
   13E4  23             5251                       INC  HL
   13E5  1102AC         5252                       LD   DE, 684                ;SCREEN LOCATION
   13E8  FD210004       5253                       LD  I¥,4                    :# OF DIGITS
   13EC  3€02           5254                       LD A,2
   13EE  CD1IFBE        5255                       CALL  PUT _VRAM
                        5256
                        5257  * DISPLAY    10  SECONDS
   -13F1 001968         5258                       CALL  DELAY_ 10
.                       5259
                        5260  * TURN   OFF  DISPLAY
   13F4  0601           5261                      LO  B,1
   13F6  0E80           5262                      LD  C, 100000008
  13F8  CD1FD9         5263                       CALL   WRITE REGISTER
           |           5264
                       5265   * EXIT   LOGO
  13F8  2A800A         5266                       LD  HL, [START  GAME)                  ;A  CARTRIDGE   WAS  PRESENT
  13FE  E9             5267                       JP  CHL]                               ;SO  JUMP  TO  IT
                       5268
                       5269   *  WRITE   OUT  PATTERN   NAME  TABLE
  I3FF  211479         5270   NOCARTRIDGE         LD HL,LOGO   NAMES+44                  ;NO  CARTRIDGE   PRESENT
  1402  1101AA         5271                       LD  DE, 426                            DISPLAY    DEFAULT
  1405  FD210000       5272                       LO  1,13                               +MESSAGE
  1409  3602           5273                       LD  A,2                             |
  1408  CD1FBE         5274                       CALL  PUT  VRAM
                       5275
  1460E 211486         5276                       LD  HL, LOGO NAMES+57                  ;"TURN  GAME   OFF"
  1411  110164         5277                       LD DE,  484                            "TO   INSERT   CARTRIDGE"
  1414  FD21001A       5278                       LD  1Y,26                              "OR   EXPANSION   MODULE"
  1418  3E02           5279                       LD  A,2
  141A  CD1FBE         5280                       CALL  PUT  VRAM                      :
                       5281                                                                                                                                                       ‘
  141D  2114A0         5282               |       LD  HL,LOGO  NAMES+83
  1420  110227         5283                       LD  DE,551           :
  1423  FD210014       5284                       LD  1¥,20
  1427  3€02           5285               |       LD  A,2
  1429  CD1FBE         5286                       CALL  PUT VRAM
                       5287
    142C  218A00        5288                   LD HL,8A00H                          -DISPLAY 60 SECONDS
    142F  (01968        5289                   CALL TIMER 1
                        5290   * TURN OFF DISPLAY
    1432 0601           5291                   LD B,1                               *BLANK SCREEN
    1434 0€80           5292                   LD C,100000008
    1436  CDIFD9        5293                   CALL WRITE REGISTER
    1439  18FE          5294                   RS,                                  >SOFT HALT
                        5295
                        5296   BREWAEKASSATKAAREARAKAAARASERAERAAAAKARAAARARARAAAAKERAKRAARARAAREKAERAAKRAEEH
                        5297   *                                                                     *
                        5298   *                         DATA  TABLES                                *
                        5299   *                                                                     *
                        5300   SRREKCAACRAAREAAARARAAAARAEARAERAAAKKAARERAEKARKRARAKAARERKEKRAAERERARRERKRER
                        5301
                        5302   SRAKARAERAEAAAARAAHRAARAREKCOLOR MAME   TABLE  SRRARARAKAAAARAKAERKKRKEKKAR
                        5303                                     OO
    1438 OOOOOOFOFO     5304   LOGOCOLORS   =  HEX 00,00,00,F0,FO,FO,  FO, FO, FO,FO, FO,FO
    1447 0080908030     5305                   HEX DO,80,90,B0, 30,40
                        5306
                        5307   SRIERSRAAKAWTRAEETARASRAPATTERN  BARE  TABLE   SBRRLAAATKEREAEAARARRERAEKE
                        5308                                   SO
              <144D>    5309  LOGO NAMES       EQU $
                        5310
    144D 6061686970     5311                   HEX 60,61,68,69, 70,71, 78, 79,80,81,  88,89
    1459 64656C7475     5312                   HEX 64,65,6C, 74,75, 7C,84,85,  8C,8D
                        5313
    1463 62636A6872     5314                   HEX 62,63,6A,68,72,73,7A,7B,82,83,8A
   146€  8866676076     5315                   HEX 88,66,67,60,76,77,  7D ,86,87, 8E, BF
                       5316
   1479  5455524E20    5317                    DEFB “TURN GAME  OFF"                                                                                                                 ,
   1486  4245464F52    5318                    DEFB “BEFORE  INSERTING  CARTRIDGE”
   14A0  4F52204558    5319                    DEFB “OR EXPANSION  MODULE."
   1484  1020313938    5320                    DEFB 1DH," 1982  COLECO"
                       5321
   14C1  1E1F          5322   TRADEMARK        HEX  1E,1F
                     5323
                     5324
                     5325
                     5326
                     5327 REAARARAAAARARRARRAARAPATTERN GENERATOR  TABLES RRAREKRKERARARKERRKKEK
                     5328
             <14C3>  5329 LOGOGEN         Eus
                     5330
                     5331 *GRO
   14C3  0000000000  5332                 HEX             00,00,00,00, 00,00,00,00
                     5333 *GR1
   14CB  3F7FFFFFF3  5334                 HEX             3F,7F,FF,FF,F3,F3,FO, FO
                     5335 *GR2
   1403 OO8OCOCOCO   5336                 HEX             00,80,C0,C0,CO,C0,00,00
                     5337 *GR3
   1408 3F7FFFFFF3  5338                  HEX             3F,7F,FF,FF,F3,F3,F3, 3
                    5339  *GR4
   14E3 O0B8OCOCOCO 5340                  HEX             00,80,C0,C0,C0,cO0,c0,cO
                    5341  *GR5
  14EB  FOFOFOFOFO  5342                  HEX             FO,FO,FO,F0,FO,FO,FO,FO
                    5343 *GR6
  14F3  FFFFFFFOFO  5344                  HEX             FF,FF,FF,FO,FO,FF,FF,FF
                    5345 *GR7
  14FB  COCOCO0000  5346                  HEX            CO,CO,C0, 00,00,00,00,00
                    5347 *GR8
  1503  FIFIFI7B7B  5348                 HEX             F1,F1,F1,7B,7B,7B,3F,3F
                    5349 *GR9
  1508  EOEOEOCOCO  5350                 HEX             E0,£0,£0,C0,C0,CO, 80,80
                    5351 *GR10
  1513  VFSF7F7978  5352                 HEX             1F,3F,7F, 79,78,7F,7F,3F
                    5353 *GRi1
  1518  BOCOEQE000  5354                 HEX             80,C0,£0,£0,00,80,C0,E0
                    5355 *GRI2
  1523  F3F3FBFBFB  5356                 HEX             F3,°3,F8, FB,FB,FF,FF,FF
                    5357 *GR13
  152B  COCOCOCOCO  5358                 HEX             cO,C0,C0,C0,C0,c0,c0, co
                    5359 *GR14                                                                                                                       ‘
  1533  FSFSFFFF7F  5360                 HEX             F3,F3,FF,FF,7F,3F,00,00
                    5361 *GR15
  153B COCOCOCO80   5362                 HEX             cO,CO,CO,CO,80,00,00,00
                    “"*3 *GR16
             1543  FOFOFFFFFF  5364                   HEX                FO,FO,FF,FF,FF,FF,00,  00
                               5365   *GR17
             1548 O0O0COCOCO   5366                   HEX                00,00,C0,c0,C0,C0,00,00
                               5367  *GR18
             1553 3FIFIFIFOE   5368                   HEX                3F,1F,1F,1F,0E,0E,00,00
                               5369  *GR19
             1558 8000000000   5370                   HEX                80,00,00,00,00,00,00,00
                               5371  *GR20
             1563 FOFOFOFOFO   5372                   HEX                FO,FO,FO, F0,F0,F0,00,00
                               5373  *GR21
             1568 1FOI797F3F   5374                   HEX                1F,01,79,7F,3F,1F,00,00
                               5375  *GR22
             1573 EQEOQEOEOCO  5376                   HEX                E0,E0,E0,£0,C0,80,00,00
                               5377  *GR23
             157B FFF7F7F7F3  5378                    HEX                FF,F7,F7,F7,F3,F3,00,00
                              5379   *GR24
             1583 COCOCOCOCO  5380                    HEX                cO,cO,c0,C0,c0,C0,  00,00
                              5381
                       <156B> 5382   ASCTABLE         EQU $
                              5383   * c=1D
             1588 7EBIBDAIA1  5384                    HEX                7E,81,B8D,A1,A1,80,81, 7E       ;COPYRIGHT
                              5385   * t=1E
             1593 1F04040400  5386                    HEX                1F,4,4,4,0,0,0,0                ;tRADE
                              5387   * miF
            1598  446€545400  5388                    HEX               44,6C,54,54,0,0,0,0              ;MARK
                              5389   *   =20
            15A3  0000000000  5390   SPACE           DEFB               0,0,0,0,0,0,0,0
                              5391   * §=21
            15AB  2020202020  5392                   DEFB               20H, 20H,20H, 20H,20H,0,20H, OOH
                              5393   * "=22
            15B3  5050500000  5394                   DEFB               50H ,50H,50H,0,0,0,0,0
                              5395   * #=23
            15BB  5050F850F8  5396                   DEFB               50H, 50H,OF8H,50H, OF8H,50H,50H,0
                              5397   * $=24
            15C3  2078A07028  5398                   DEFB               20H, 78H,OAOH, 70H,28H,OFOH ,020H,0
                              5399   * %=25
            15CB  C0C8102040  5400                   DEFB               OCOH,OC8H, 10H, 20H,40H,98H, 18H,0
            1503  40A0A040A8  5402  *  &=26          DEFB               40H,OAOH ,OAOH 40H, OABH,90H, 68H,0
                     5403 *  '=27
   150B 2020200000   5404                   DEFB               20H,20H,20H,0,0,0,0,0
                     5405 * (=28
   15£3 2040808080   5406                   DEFB               20H,40H,80H,80H, 80H,40H,20H, 0
                     5407 * )=29
   15EB 2010080808   5408                   DEFB               20H,10H,08H,08H, O8H,10H,20H, 0
                     5409 * *=2A
   15F3 20A8702070   5410                   DEFB               20H,OA8H,70H,20H, 70H,OABH, 20H,0
                     5411 * +=28
   15FB 002020F820   5412                   DEFB               0,20, 20H,OF8H,20H, 20H,0,0
                     5413 * ,=2C
   1603 0000000020   5414                   DEFB               0,0,0,0,20H,20H,40H,0
                     5415 * -=20
   1608 000000F800   5416                   DEFB               0,0,0,0F8H,0,0,0,0
                     5417 * .=2E
   1613 0000000000   5418                   DEFB               0,0,0,0,0,0,20H,0
                     5419 * /=2F
   1618 0008102040   5420                   DEFB               0,8,10H,20H,40H,80H, 0,0
                     5421
            <1623>   5422 NUMBER_TBL        EQu  $
                     5423* 0=30
  1623  708898ABCB   5424                   DEFB               70H,88H,98H,OASH,OCBH, O88H, 70H,0
                     5425 * 1=31
  162B  2060202020  5426                    DEFB               20H,60H,20H,20H,20H, 20H,70H, 0
       |            5427  * 2=32                             ,
  1633  7088083040  5428                    DEFB               70H,88H,08,30H,40H,80H, OFBH, 0
                    5429  * 3=33
  1638  F808103008  5430                    DEFB               OF8H,08,10H,30H,08,88H, 70H,0
                    5431  * 4=34
  1643  10305090F8  5432                    DEFB               10H,30H,50H,90H,OFBH, 10H,10H, 0
     |              5433  * 5=35
  1648  FBBOFO0808  5434                   DEFB               OF8H, 80H,OFOH,O8H,08H, 88H,70H, 0
                    5435 *  6:36
  1653  384080F088  5436                   DEFB               38H, 40H,80H,OFOH,88H, 88H,70H, 0
                    5437 *  7=37
  1658  F808102040  5438                   DEFB               OFBH, O8H,10H,20H,40H, 40H,40H, 0
                    5439 *  8=38
  1663  7088887088  5440                   DEFB               70H, 88H,88H,70H,88H,88H, 70H,0
                      5441 * 9=39
    1668 7088887808   5442                     DEFB               70H,88H,88H,78H,08H,10H,OEOH,0
                      5443 * :=3A
    1673 0000200020   5444                     DEFB               0,0,20H,0,20H,0,0,0
                      5445 * ;=38
    1678 0000200020   5446                     DEFB               0,0,20H,0,20H,20H,40H,0
                      5447 * <=3C
    1683 1020408040   5448                     DEFB               10H,20H,40H,80H,40H,20H,10H,0
                      5449 * ==30
    1688 OOOOFB00F8   5450                     DEFB               0,0,0F8H,0,0F8H,0,0,0
                      5451 * >=3E
    1693 4020100810   5452                     DEFB               40H,20H,10H,08H,10H,20H,40H,0
                      5453 * 2=3F
    1698 7088102020   5454                     DEFB               70H,88H,10H,20H,20H,0,20H,0
                      5455 * a=40
    16A3 7088A88880   5456                     DEFB               70H,88H,OABS,OBBH OBOH,O80H,78H,0
                      5457
             <16AB>   5458 ASCIITBL            EQU $
                      5459 * A=41
    16AB 20508888F8   5460                     DEFB               20H,50H,88H,88H,OF8H,88H,88H,0
                      5461 * B=42                         |
    16B3 FO8888F08B8  5462                     DEFB               OFOH,88H,88H,OFOH,88H,88H,OFOH,0
                      5463 * C=43
    1688 7088808080   5464                     DEFB               70H,88H,80H,80H,80H,88H,70H,0
                      5465 * D=44
    16C3 FO88888888   5466                     DEFB               OFOH,88H,88H,88H,88H,88H,OFOH,0
                      5467 * E=45
    16CB FB8080F08O   5468                     DEFB               OFBH,80H,80H,OFOH,O80H,80H,OFBH,0
                      5469 * F=46
    1603 F88080F080   5470                     DEFB               OF8H,80H,80H,OFOH,80H,80H,80H,0
                      5471 * G=47
    1608 7880808098   5472                     DEFB               78H,80H,80H,80H,98H,88H,78H,0 |
                      5473 * W=4B
    16€3 888888F888   5474                     DEFB               88H,88H,88H,OF8H,88H,88H,88H,0
                      5475 * 1=49
    16EB 7020202020   5476                     DEFB               70H,20H,20H,20H,20H,20H,70H,0
                      5477 * J=4A
    16F3 0808080808   5478                     DEFB               8,8,8,8,8,88H,70H,0
                      5479 * K=4B
    16FB BB9OAOCOAO   5480                  DEFB               88H,90H,OAOH,OCOH,OAOH,90H, 88H,0
                      5481 * L=4C
    1703 8080808080   5482                  DEFB               80H,80H,80H,80H,80H,80H, OFBH,0
        |             5483 * M=4D
    1708 BSDBABAB88   5484                  DEFB        | |    88H, CD8HOABH,OASH,88H,88H, 88H,0
                      5485 * N=4E
    1713 BBB8CBA89B   5486                  DEFB               88H,88H,OC8H,OASH,98H,88H ,88H,0
                      5487 * O=4F
    1718 7088888888   5488                  DEFB               70H,88H,88H,88H,88H,88H, 70H,0
                      5489 * P=50             |
    1723 FOB888F080   5490                  DEFB               OFOH,88H,88H,OFOH,80H,80H, 80H,00
                      5491 * a=51        ,
    1728 7OB88888A8   5492                  DEFB               70H,88H,88H,88H,OABH,90H,68H, 0
                ,    5493  * R=52
    1733 FOBBSBFOAO  5494                   DEFB               OFOH,88H,88H,OFOH,OAQH,90H, 88H,0
                     5495  * S=53
    1738 7088807008  5496                   DEFB-              70H,88H,80H,70H,O8H,88H,70H, 0
                     5497  * 1254
   1743  820202020   5498                   DEFB               OF8H,20H,20H,20H,20H,20H,20H,0
                     5499  * U=55
   1748 8888888888   5500                   DEFB              88H, 88H,88H,88H,88H,88H,70H,0
                     5501  * v=56
   1753 8888888888   5502                   DEFB              88H, 88H,88H,88H,88H,50H,20H,0
                     5503  *w=57
   175B 888888ABA8   5504                   DEFB              88H, 88H,88H,OABH,OASH,ODBH,88H, 0
                     5505 *   x=58
   1763 8888502050   5506                   DEFB              88H ,88H,50H,20H,50H,88H,88H,0
                     5507 * y=59
   1768 8888502020   5508                  DEFB               88H ,88H,50H,20H,20H,20H,20H,0
                     5509 * 2=5A
   1773 808102040    5510                  DEFB                     08H,10H,20H,40H,80H,OFBH,0
            |        5511 *  [=58
   177B FBCOCOCOCO   5512                  DEFB               OFBH, OCOH,OCOH,OCOH,OCOH,OCOH,OFBH, 0
                     5513 * \=5C                                                                                                                              ‘
   1783 0080402010   5514                  DEFB               0,80H, 40H,20H,10H,08H0, 0
                     5515 * }=5D
   1788 F818181818   5516                  DEFB               OF8H, 18H,18H,18H,18H,18H,OFBH,0
                     5517 * “=S5E
    1793 0000205088   5518                    DEFB                 0,0,20H,50H,88H,0,0,0
                      5519 * _=5F
    1798 0000000000   5520                    DEFB                 0,0,0,0,0,0,0,0F8H
                      5521 * '=60                            |
    17A3 4020100000   5522                    DEFR                 40H,20H,10H,0,0,0,0,0
                      5523 * a=61
    17AB 00007088F8   5524                    DEFB                 0,0,70H,88H,OFSH,88H,88H,0
                      5525 * b=62                  .
    17B3 0000F04870   5526                    DEFB                 0,0,OFOH,48H,70H,48H,OFOH,0
                      5527 * c=63               |
    17BB 0000788080   5528                    DEFB                 0,0,78H,80H,80H,80H,78H,0
                      5529 * d=64
    17C3 0000F04848   5530                    DEFB                 0,0,0FOH,048H,048H,048H,OFOH, 0
                      5531 * e=65
    17CB OOOOFO80EO   5532                    DEFB                 0,0,OFOH,O80H,OOH, 80H,OFOH, 0
                      5533 * £=66
    17D3 O000FO80EO   5534                    DEFB                 0,0,OFON,O80H,OEOH,O80H,80H, 0
                      5535 * g=67
    1708 0000788088   5536                    DEFB                 0,0,78H,80H,OBSH,88H,70H,0
                      5537 * h=
    17E3 00008888F8   5538                    DEFB                 0,0,88H,88H,OF8H,88H,88H,0
                      5539 * i=69
    17EB 0000F82020   5540                    DEFB                 0,0,OFBH,20H,20H,20H,OFB8H0
                      5541 * j=
    17F3 0000702020   5542                    DEFB                 0,0,70H,20H,20H,OAOH,OEOH,0
                      5543 * k=6B
    17FB OOOO90A0CO   5544                    DEFB                 0,0,90H,OAOH,OCOH,OAOH,90H,0
                      5545 * L=6C
    1803 0000808080   5546                    DEFB                 0,0,80H,80H,80H,80H,OFBH,0
                      5547 * m=6D
    180B O00088D8A8   5548                    DEFB                 0,0,88H,OO8H,OABH,88H,88H,0
                      5549 * n=6E
    1813 000088CBA8   5550                    DEFB                 0,0,88H,OCBH,OABH,98H,88H,0
                      5551 * o=6F
    1818 0000F88888   5552                    DEFB                 0,0,OF8H,088H,88H,88H,OFBH, 0
                      5553 * p=70
    1823 OOOOFO8B8FO  5554                    DEFB                 0,0,OFOH,88H,OFOH,BOH,BOH,0
                      5555 * q=71
    182B   OOOOF88BAB   5556                    DEFB              0,0,0F8H, 88H, OABH,90H, OEOH,0
                        5557  *  r=72
    1833   OOOOFB88FB   5558                    DEFB              0,0,0F8H, 88H, OF8H, OAOH,90H,0
                        5559  *  s=73
    1838   0000788070   5560                    DEFB     .        0,0,78H, 80H, 70H,08H, OFOH,0
                        5561  *  t=74
    1843   O000F82020   5562                    DEFB              0,0,0F8H, 20H, 20H,20H, 20H,0
                        5563  * u=75
    184B  0000888888    5564                    DEFB              0,0,88H, 88H,88H, 88H,70H, 00
                        5565  * v=76           |
    1853  0000888890    5566                    DEFB              0,0,88H, 88H,90H ,OAOH, 40H,0
                        5567  * w=77
    1858  O00008888A8   5568       :            DEFB              0,0,88H, 88H,OABH ,OD8H,,BBH 00
                        5569  * x=78
    1863  0000886020    5570                    DEFB              0,0,88H, 60H,20H, 60H,88H, 0
                       5571   * y=79
    186B  0000885020   5572                     DEFB           _  0,0,88H,50H, 20H, 20H,20H, 0
                       5573   * z=7A
    1873  0000F81020   5574                     DEFB             0,0,0F8H,  10H,20H, 40H, 0F8H,0
                       5575   * (=78
   1878   384020C020   5576                    DEFB              38H, 40H, 20H,OCOH, 20H,40H, 38H,0
                       5577   * >=7C
   1883   4020100810   5578                    DEFB              40H, 20H, 10H,08H, 10H,20H, 40H,0
                       5579   * )=7D
   1888   £010201820   5580                    DEFB              OEOH, 10H, 20H,18H, 20H,10H, OEOH,0
                       5581   * ~=7E
   1893   40A8100000   5582                    DEFB              40H, OA8H, 10H,0,0,0,0,0
                       5583   *  E=7F
   1898  AB50A850A8    5584                    DEFB              OA8H ,50H ,OASH,50H, OASH ,50H,OABH,  0
                       5585
              <18A3>   5586   OBJTABLE         EQU  $
   18A3  01020E0F08    5587                    DEFB   1,2,14,15,8,9,18, 19
   18a8  03040E0F05    5588                    DEFB   3,4,14,15,5,20,0,0
   1883  050010110A    5589                    DEFB   5,0,16,17,10,11,21,22                                                                                        .
   1888  0607101105    5590                    DEFB   6,7,16,17,5,20,0,0
   18C3  01020E0F03    5591                    DEFB   1,2,14,15,3,4,14,15
   18CB  03040E0FNC    5592                    DEFB   3,4,14,15,12,13,23, 24
    1803   FF               5593                  HEX   FF                             sENWDOF TABLE INDICATOR
                            5596  *                                                                     ®
                            5597  *                        _   SUBROUTINES                              *
                            5598  *                      ;                                              *
                            5599  SteeeaedeededeeRAeeeeeReeeAKeeeKeAAAKAKeKeAeAeARAAAAARAAAAAAAKAA
                            5602
                            5603  * FILLVRAM    WRITES  TO VRAM  ADDRESS  POINTED  TO BY  HL THE VALUE IN A
                            5604  *             DE TIMES.
                            5605
                            5606  *          VRAM STARTING  ADDRESS   IN HL
                            5607  *          NO OF BYTES   INDE
                            5608  *          VALUE TO  BE WRITTEN   IN A
                            5609
    18D4  4F                5610  FILL VRAM   LO   C,A
    185   7D                5611              LD   =A,L
    1806  DO38F             5612              OUT   (MODE 1 PORT) ,A
    1808  7C                5613              LO   3=A,W
    1809  F640              5614              OR   40H
    1808  D38F              5615              OUT   [MODE _1PORT],A
    18D   79                5616  FILL        Lb   36A,C
    18DE  03BE              5617              OUT   {MODE 0PORT),A
    18E0   18               5618              DEC  DE
    18E1  7A                5619              iD   A,D
    18E2  B83               5620              OR   €
    18E3  20F8              5621              JR = WZ,FILL
    18€5  CD1IFDOC          5622              CALL READ REGISTER
    18€8  C9                5623              RET
                            5624
                            5625
                            5626  * MODE 1.  SETS UP  GRAPHICS  MODE  1 WITH VRAM  ADDRESSES  AS IN THE TABLE
                            5627  *         BELOW AND  EXITS WITH   THE VIDEO BLANKED   AND A BLACK BACKGROUND.
                            5628
                            5629  *                           VDP   MEMORY MAP
                            5630  *               3800H-3FFFH    SPRITE  GENERATOR  TABLE
                            5631  *               2000H-37FFH    PATTERN  COLOR TABLE
                            5632  *               1BOOH-1B7FH    SPRITE  ATTRIBUTE  TABLE
                            5633  *               1800H-1AFFH    PATTERN  NAME TABLE
                            5634  *               OOOOH-17FFH    PATTERN  GENERATOR  TABLE
                            5635
    18E9  0600              5636  MODE1_          LD  8,0
    18EB  O0E00             5637                  LD  C,0
    18ED  CDIFD9            5638                  CALL  WRITEREGISTER
                            5639
    18FO0 0601              5640                  LO  8,1
    18F2  O0E€80            5641                  LD  C,100000008
    18F4  CD1FD9            5642                  CALL  WRITEREGISTER                                                                                               8
                            5643
                            5644  * SET UP TABLE ADDRESSES  IN  VRAM
                            5645
                            5646  * PATTERN NAME TABLE
    18F7  3&02              5647                  LD  A,2
    1BF9  211800            5648                  LD  HL,1800H
  18FC CD1FBS        5649                       CALL   INITTABLE
                     5650
                     5651   * PATTERN   COLOR   TABLE
  18FF 304           5652                       LD A,4
 1901  212000        5653                       LD  HL,2000H
 1904  CD1FB8        5654                       CALL  INIT TABLE
                     5655                                    ;
                     5656   * PATTERN   GENERATOR    TABLE
 1907  3&03          5657                      LD  A,3
 1909  210000        5658                      LD  HL,O
 190C  CD1FB8        5659                      CALL   INIT TABLE
                     5660                       |
                     5661  *  SPRITE   ATTRIBUTE   TABLE
 190F 3£00          5662                       LD A,0
 1911  211800        5663                      LD  HL, 1B00H
 1914  CD1FB8        5664                      CALL   INIT TABLE
                     5665
                     5666  *  SPRITE   GENERATOR   TABLE
 1917  3601          5667                      LD  A,1
 1919  213800        5668                      LD  HL, 3800H
 191C  CD1FB8        5669                      CALL   INIT TABLE
                     5670
                     5671  *   SET  UP  BLACK  BACKGROUND
 191F  0607          5672                      LD  B,7
 1921  0€00          5673                      Lo  C,0
 1923  CD1FD9        5674                      CALL   WRITE REGISTER
 1926  C9            5675                      RET
                     5676
                    5677   *   LOAD ASCII]    WRITES   OUT  ASCII    CHARACTER    GENERATORS   TO  THE PATTERN
                    5678   *                GENERATOR    TABLE.      INIT TABLE    MUST BE  USED   TO SET UP
                    5679   *                 THE  TABLE  ADDRESS.
                    5680
 1927 211588        5681   LOAD ASCII          LD  WL,ASC_TABLE                          ;LOCATION   OF GENERATORS
 192A  11001D       5682               _       LD DE,  10H                              ;OFFSET   TO  PLACE ASC TABLE
 ‘42D FD210060      5683                       LD  1Y,96                                ; IN THE  CORRECT  LOCATION
 1931 3E03          5684                       LD  A,3
 1933 CD1FBE        5685                       CALL  PUT _VRAM
                    5686
                    5687   * WRITE   OUT  A BLANK   PATTERN   FOR   ASCII_0
1936  2115A3        5688                       LD HL,  SPACE
1939  110000        5689                       LD  DE,0
193C  FD210001      5690                       LD  1Y,1
1940  3E03          5691                       LD  A,3
1942  CD1FBE        5692                       CALL PUT  _VRAM
1945  C9            5693                       RET
                    5694
                    5695   SRAARAAARAAAKKEKKRKKRKREEK    LOCAL  SUBROUTINES      REKAAARKAKRHARKKKKKKKKKEE
                    5696
1946  010000        5697   PARSE               LD  BC,0                     ;FROM   HL INCREMENT   BC  UNTIL
1949  7E            5698   P_LOOP              LD  A, [HL]                  ; (HL) =  "7"
194A  FE2F          5699                       cp  “ys
194C  C8            5700                       RET  2
1940  23            5701                       INC  HL
194E  03            5702                       INC  8C
194F  1868          5703                       JR  P_LOOP
                    5704
    1952   FDE1            5706                      POP  IY                  1Y=   #ITEMS  TO BE TRANSFERED IN PUT VRAM
    1954   3E20            5707                      LD A,32                  DE=   LOCATION  OF START OF STRING
    1956   99              5708                      SBC A,C                  ;  A=32-C
    1957   1F              5709                      RRA                      ;  DIV 2
    1958   0600            5710                      LD 8,0
    195A   4F              5711                      LOCA,
    1958   09              5712                      ADD HL, BC
    195C   44              5713                      LD B,W
    1950   4D              5714                      LD CL
    195E   62              5715                      LD H,D
    195F   68              5716                      LD L,E
    1960   50              5717                      LD 0,8
    1961   59              5718                      LO £,C
    1962   3€02            5719                      LD A,2
    1964   CD1FBE          5720                      CALLPUT  VRAN
    1967   C9              5721                      RET
                           5722
    1968   211700          5723  DELAY 10            LD HL,1700H
    1968   1100FF          5724  TIMER 1             LD DE,255
    196E   18              5725  TIMER 2             DEC DE
    196F   7A              5726                      LD A,D
    1970   B3              5727                      OR E
    1971   2068            5728                      JR WZ,TIMER 2
    1973   28              5729                     DEC  HL
    1974   7C              5730                      LD A,H
    1975   B5              5731                      OR L
    1976   20F3            5732                      JR NZ,TIMER 1
    1978   C9              5733                     RET
                          5734    PROG
                         5736
                         5737    RRSARRAARAAAAAARRAAAAARRARE      EXTERNAL   SYMBOLS   RRRRARAARAAARAAAARRAKKERRERKKER
                         5740
                         5741    * EXTERNAL   ROUTINES    FROM  OS
                         5742                                   oo
                         5743                      EXT    INIT TABLE
                         5744                      EXT   PUT  VRAM
                         5745                      EXT   WRITE  REGISTER
                         5746                      EXT   WRITE  _VRAM
                         5747                      EXT   VRAM  ADDR TABLE
                         5748                      EXT    SPRITENAMETBL
                         5749                      EXT    SPRITEGENTBL
                         5750                      EXT   PATTRNNAMETBL
                         5751                      EXT   PATTRNGENTBL
                         5752                      EXT   COLORTABLE
                         5753                      EXT   LOAD  ASCII
                         5754                      EXT    FILL VRAM
                         5755                      EXT   MODE 1
                         5756
                         5757    SBEEAKAAARAAARARAREKARERRAAK      DEF IN] TIONS  RRMRRAAKARARAARAKEARAAAARKKEAKRKRER
                         5760
                         5761                       GLB  GAME  OPT_
                         5762
                         5763    SRREAARKAARREARARARRAAAEER DISPLAY  GAME  OPT  ION SCREEN   BHEAEARAKAKAERARKEKKEKERE
                         5764
                         5765   *   GAME OPT      DISPLAYS   THE  GAME  OPTION  SCREEN   WITH  WHITE   LETTERS   ON  A
                         5766   *                 BLUE  BACKGROUND.     VDP  IS LEFT   IN MODE   1 WITH   THE VRAM
                         5767   *                 MEMORY  MAP  AS  FOLLOWS.
                         5768   *
                         5769   ;                          |      VDP  MEMORY  MAP
                         5770   ;                   3800H-3FFFH     SPRITE   GENERATOR   TABLE
                         571    ;                   2000H-37FFH     PATTERN   COLOR  TABLE
                         S772   ;                   1BOOH-1B7FH     SPRITE   ATTRIBUTE   TABLE
                         5773   ;                   1800H-1AFFH     PATTERN   NAME  TABLE
                         5774   ;                   OOOOH-17FFH     PATTERN   GENERATOR   TABLE
                        5775
                        5776                        PROG
    1979210000          5777    GAME OPT_           LD  HL,O                               ;ZERO   VRAM
    197¢ 114000         5778                        LD  DE, 16384
    197F3€00            5779                        LD  A,0
    1981CD1F82          te   1                      CALL  FILL_VRAM
                        5782    *   SET  UP  VDP  WITH  MODE 1
    1984CD1F85          5783                        CALL  MODE 1
                        5784
                        5785    *   SET  UP  BACKGROUND   COLOR
   1987 060F            5786                        LD  B,OFH                                                                                                                    .
   1989 0E04            5787                        LO  C,4
   1988 CD1FD9          5788                        CALL  WRITE REGISTER
                        5791
   198E CD1F7F          5792                        CALL  LOAD ASCII
                      5793
                      5794 RekanntankheaeaeaeekYOITE OUT  PATTERN NAME TABLE ReERKeRKERKRKRAKREH
                      5795
                      5796 *  WRITE OUT PATTERN NAMETABLE
    1991  211A7C      5797                 LD WL,LINE1
    1994   110025     5798                 LD DE,37_
    1997  FD210016    5799                 LD IY,22:
    1998  3E02        5800                 LD A,2
    1990  CD1FBE      5801                 CALL PUT_VRAM
                      5802
    19A0  211A92      5803                 LD HL,LINE2
    19A3  110065      5804                 LO DE,101
    19A6  0210017     5805                 LO 1Y,23
    19AA  3602        5806                 LD A,2
    19AC  CDIFBE      5807                 CALL PUT_VRAM
                      5808
    19AF  1100C5      5809                 LD DE,197
    1982  CD1ACA      5810                 CALL WRITE_L3
                      5811
    1985  110105      5812                 LO DE,261
    1988  CDIACA      5813                 CALL WRITE_L3
                      5814
    1988  110145      5815                 LO DE,325
    19BE  CD1ACA      5816                 CALL WRITE_L3
                      5817
    19C1  110185      5818                 LD DE,389
    19C4  CDIACA      5819                 CALL WRITEL3
                      5820
    19C7  1101E5      5821                 LD DE,485
    19CA  CD1IACA     5822                 CALL WRITEL3
                      5823
    19CD  110225      5824                 LD DE,549
    1900  CD1ACA      5825                 CALL WRITE 13
                      5826
    1903  110265      5827                 LD DE,613
    1906  CDIACA      5828                 CALL WRITEL3
                      5829
    1909  1102A5      5830                 LO DE,677
    190C  CDIACA      5831                 CALL WRITEL3
                      5832                                                                                                                                                ,
    19DF  110105      5833                 LD DE,261                               .
    1962  CD1AD7      5834                 CALL WRITE_L4
                      5835
    19€5  110145      5836                 LO DE,325
    19€8  CD1ADC      5837                 CALL WRITE_L5
                      5838
    19€B  110185      5839                 LD DE,389
    19EE  CDIAE1      5840                 CALL WRITEL6
                      5841
    19F1  211AC2      5842                 LD HL,LINE7
    19F4  1101E5      5843                 LD DE,485
    19F7  CDIAE4      5844                 CALL WRITECHAR
                      5845
    IDFA  211AC3      5846                 LD HL,LINE 8
    19FD  110225      5847                 LD DE,549 —
    1A00  CD1AE4      5848                 CALL WRITECHAR
                      5849
     1A03  211AC4        5850                   LD HL,LINE 9
    1A06   110265        5851                   LD DE,613
    1A09   CD1AE4        5852                   CALL WRITE CHAR
                         5853
    AOC    211AC5        5854                   LD HL,LINE  10
    1AOF   1102A5        5855                   LD DE,677 |
    1A12  CDIAE4         5856                   CALL WRITE CHAR
                         5857
    1a15.  11010F        5858                   LD DE,271
    1A18  CD1AD7         5859                   CALL WRITE_L4
                         5860
    1A1B   11014F        5861                   LD DE,335
    1AIE  CD1ADC         5862                   CALL WRITE L5
                         5863
    1A21   11018F        5864                   LD DE,399
    1A24  CD1AE1         5865                   CALL WRITE_L6
                         5866
    1A27   1101F1        5867                   LD DE,497
    1A2A  CDIAEE         5868                   CALL WRITE  L111
                         5869
    1A2D  110231         5870                   LD DE,561
    1A30  CDIAEE         5871                   CALL WRITE_L11
                         5872
    1a33  110271         5873                   LD DE,625
    1A36  CDIAEE         5874                   CALL WRITE_L11
                         5875
    1039  110281         5876                   LD DE,689
    1A3C  CDIAEE         5877                   CALL WRITE_L11
                         5878
    1A3F  11022F         5879                   LO DE,559
    1A42  CD1AD7         5880                   CALL WRITE_L4
                         5881
    1A45  11026F         5882                   LD DE,623
    1A48  CDIADC       5883                     CALL WRITE_L5
                         5884
    1A4B  1102AF         5885                   LD DE,687
    1A6E  CD1AE1         5886                   CALL WRITE_L6
                         5887
    1A51  110168         5888                   LD DE,507                                                                                         ,
    1A54  CDIAFB         5889                   CALL WRITE L12                                                                                                                          ;
                         5890
    1A57  110238         5891                   LD DE,571
    1A5A  CDIAFB         5892                   CALL WRITE 112
                         5893
    1A50  110278         589%                   LD DE,635
    1A60  CD1AFB         5895                   CALL WRITE  12
                         5896
    1A63  110288         5897           |  |    LD DE,699
    1A66  CD1AFB         5898                   CALL WRITE  12
    1A69  2A73FA        55902                   LD HL,(COLORTABLE]
    1A6C  110020        5903                    LD DE,32
    AGF   3EF4           5904                   LD A,OF4H
    1A71_ CD1F82         5905                   CALL FILL _VRAM
                         £006
    1A74   0601           5910                  LD B,1
    1A76   OECO           5911                  LD C,110000008
    1AA9   3120302053     5924  LINE 3 DEFB “1 = SKILL 1/ONE  PLAYER”
    1ABF   32             5925  LINE 4 DEFB "2"
    1aCO   33             5926  LINE_5 DEFB "3"
    1AC1   34             5927  LINE 6 DEFB "4"
    1ac2   35             5928  LINE 7 DEFB "5S"
    1aC3   36             5929  LINE 8 DEFB "6"
    1ac4   37             5930  LINE 9 DEFB "7"
    1ac5   38             5931  LINE10  DEFB "8"
    TACA  211AA9          5941  WRITE13         LD HL,LINE3
    1ACD   FD210016       5942                  LO 1Y,22
    1AD1  3E02            5943                  LD A,2
   TAD?   211ABF          5947  WRITE14         LD HL,LINE4
   1ADC   211ACO          5950  WRITE15         LD HL,LINE5
                       5952
    TAE1 211AC1        5953 WRITE L6        LD WL,LINE6
    1AE4 FD210001      5954 WRITECHAR       LD 1Y,1
    TAE8 3E02          5955                 LD A,2
    TAEA COTFBE        5956                 CALL PUT_VRAM
    TAED C9            5957                 RET
                       5958
    1AEE 211AC6        5959 WRITE_L11       LO WL,LINE 11
    1AF1 FO210003      5960                 LD 1Y,3
    1AF5 3€02          5961                 LD A,2
    1AF7 COIFBE        5962                 CALL PUTVRAM
    1AFA C9            5963                 RET
                       5964
    1AFB 211AC9        5965 WRITE 112       LO HL,LINE12
    TAFE F0210001      5966                ‘to 1Y,1
    1802 3€02          5967                 LD A,2
    1804 CDIFBE        5968                 CALL PUT_VRAM
    1807 C9            5969                 RET
                       5970
                       5971  PROG
                               5973   ;TRUE            EQu               1
                               5974             EXT   VRAMWRITE,REG   WRITE, VRAM READ
                               5975             EXT   VDP_MODEWORD
                               5976             EXT   MUX SPRITES
                               5977             EXT   PARAM_
                               5978             EXT   LOCALSPR   TBL,SPRITE ORDER
                               5979              GLB  INIT TABLE  ,GETVRAM   ,PUTVRAM_,INIT SPR   ORDER   ,WSPR  NM TBL
                               5980              GLB  INITTABLEG,GET_VRAMQ,PUT_VRAMQ,    INISPR   ORDERQ,WR SPR NM  TBLO
                               5981
                               5982                   PROG
                               5983   * PROCEDURE INITTABLEQ   (TABLE CODE:BYTE; TABLE_ADDRESS: INTEGER)
                               5984                    |
                               5985   * THIS IS THE PASCAL ENTRY  POINT TO  INITTABLE_
                               5986
           1808  00020001      5987   INITTABLE  P    DEFW             2,1,2
                               5988   * THIS 1S THE PARAMETER DESCRIPTOR   FOR INIT TABLEQ
                               5989
           1B0E                5990   INITTABLEQ
           180E  011808        5991                   LO               BC, INITTABLE P
           1811   1173BA       5992                   LD               DE, PARAMAREA
           1814  CD0098        5993                   CALL             PARAM_
           1817  3A73BA        5994                   LD               A, (PARAMAREA]
           1B1A  2A738B        5995                   LD               HL, [PARAM _AREA+1]
                            -  5996
           1B1D                5997   INITTABLE_                         INIT  TABLE  INITIALIZES   THE TABLE ADDRESSES
                               5998                                    ;FOR  VRAM TABLES. IT ALSO   WRITES THE APPROPRIATE
                               5999                                    ;BASE  ADDRESS INTO THE  RESPECTIVE  VDP REGISTER.
                               6000
                               6001                                    =IN:  VRAM ADDRESS IN HL
                               6002                                    ;     TABLE CODE IN 'A'  : O=SPRITE  NAME TABLE
                               6003                                    ;              GENERATOR  TABLE,  2=PATTERN NAME
                               6004                                    -     TABLE,3= PATTERN GENERATOR   TABLE, 4=
                               6005                                    ;     COLOR TABLE
                               6006
           1B1D  4F            6007              LD   C,A
           1B1E  0600          6008              LD   8,0              USE   TABLE CODE AS INDEX
           1820  0D2173F2      6009              LD   1X,VRAMADDR  TABLE
           1B24  DDO9          6010              ADD  IX,BC
           1B26  DDO9          6011              ADD  1X,BC
           1828  DD7500        6012              LD   [1X+0),L         ;SAVE  VRAM ADDRESS IW TABLE
           1B2B  DD7401        6013              LD   (1X#1),H
                               6014                                    ;CHECK  VDP GRAPHICS MODE
           1B2E  3A73C3        6015              LD   A,[(VDP_MODEWORD)
           1B31  CB4F          6016              BIT  1,A
           1B33  2827          6017              JR   2,INIT TABLE8O
                               6018              -#&  GRAPHICS MODE  2
           1835  79            6019              LD   A,C              GET   TABLE CODE
           1836  FEO3          6020              cp   OS               “CHECK  IF GENERATOR TABLE
           1838  2806          6021              JR   2,CASE_OFGEN
           1B3A  FEO4          6022              cp   4                ;CHECK  IF COLOR TABLE
           1B3C  2810          6023              «JR  2,CASE_OF COLOR
           1B3E  181C          6024              JR   INIT TABLE8O
           1840                6025   CASEOF GEN
           1840  0604          6026              LD   B,4              :VDP  REGISTER TO WRITE
           1B42  7D            6027              LD   AL               “CHECK  FOR WHICH 8K BOUNDARY   IN 16K VRAM
           1B43  B4            6028              oR   HH
    1844   2004        6029              JR    NZ,CASE OF GEN10
    1846   0€03        6030              Lo    C,3              ;VALUE  TO WRITE  FOR VRAM  ADDRESS OF 00H
    1848   1828        6031              JR    INIT_TABLE9O
    1B4A               6032  CASE OF GEN10
    184A  0€07         6033              LO    C,7              ;VALUE  TO WRITE  FOR VRAM  ADDRESS OF 2000H
    1B4C   1824        6034              JR
    1B4E               6035  CASE OF COLOR
    1B4E  0603         6036              LD    B,3              ;REGISTER  TO  WRITE
    1850  7D          6037               LD    =OA,L
    1851  84          6038               OR    ou
    1852  2004         6039              JR    NZ,CASE_OFCLR10
    1854  0€7F         6040              LDC,  7FH              ;VALUE  TO WRITE  FOR VRAM  ADDRESS OF 00H
    1856  181A         6041              JR     INIT_TABLE90
    1858               6042  CASE OF CLR10
    1858  OEFF         6043              LDC,    OFFH           ;VALUE  TO WRITE  FOR VRAM  ADDRESS OF 2000H
    1B5A  1816         6044              JR    INIT_TABLE9O
                      6045
    1B5C              6046   INIT TABLE8O
                      6047               ;**   COMPUTE BASE ADDRESS  (BASE_ADDRESS=TABLE_ADDRESS/FACTOR
                      6048               ;**   GET BIT SHIFT COUNT
    1B5C  FD211876    6049               LD    _1Y,BASE_FACTORS
    1860  FDO9        6050              ADD    IY,BC
    1862  FDO?        6051              ADD    1Y,BC
    1864  FD7E00      6052               LD   A, [1Y+0)         ;SHIFT COUNT   NOW IN ‘A!
    1867  FD4601      6053              LD    8, [1¥+1]         ;REGISTER  NUMBER  TO WRITE  IN 'B!
    1B6A              6054   DIVIDE      ;**  COMPUTE  BASE ADDRESS
    186A  CB3C        6055              SRL    H                ;SHIFT HI  BYTE
    1B6C  CB10        6056              RRL                    ;SHIFT  LO  BYTE
    1B6E  30          6057              DEC   A             _  }DECREMENT   SHIFT  COUNT
    1B6F  20F9        6058              JR   =NZ,DIVIDE -
                      6059               ;**  WRITE  TO VDP REGISTER
    1B71  4D          6060              LO    C,L              ;VALUE  TO  WRITE  IN ‘C!
   1872               6061   INIT TABLE9O
   1B72   CDICCA      6062              CALL  REG WRITE
   1875   C9          6063              RET
                      6064
   1876               6065   BASE FACTORS   |§;BASE_FACTOR,REGISTER  NUMBER
                      6066
   1876 070508060A    6067              DEFB  7,5,11,6,10,2,11,4,6,3
                      6068
                      6069   * PROCEDURE GET  VRAMQ  (TABLECODE:BYTE;START_INDEX:BYTE;    SLICE:BYTE;
                      6070   *                        VAR DATA:BUFFER; ITEM COUNT:  INTEGER);
                      6071
                      6072   * THIS IS THE  PASCAL  ENTRY POINT TO  INITTABLE
                      6073
   1B80  00050001     6074   GETVRAM P        DEF              5,1,1,1,-2,2
                      6075   * THIS IS THE  PARAMETER  DESCRIPTOR  FOR INIT _TABLEQ
                      6076
   1B8C               6077   GETVRAMQ
   1B8C  011880       6078                    LD               BC,GET  VRAM  P
   188F  1173BA       6079                    LD               DE,PARAM AREA
   1892  cd0098       6080                    CALL             PARAM.
   1895  3A73BA       6081                    LD               A,[PARAM AREA}
   1898  0587388      6082                    LD               DE, [PARAM AREA+ 1}
    1B9C FD2A73BF    6083                   LD                  1Y, [PARAM AREA+5]
    1BA0 2A7380      6084                   LD                  HL, [PARAM AREA+3)
                     6085
                     6086
    1BA3             6087  GETVRAM_                              ;GETS  A CERTAIN  NUMBER   OF BYTES   FROM  VRAM
                     6088                               ;       ;AND  PUTS THEM   INA  BUFFER
                     6089                                       ;IN:  TABLE  CODE  IN A
                     6090                                       ;     O=SPRITE  NAME  TABLE
                     6091                                       ;     T=SPRITE  GENERATOR   TABLE,  2=PATTERN   NAME
                     6092                                       ;     TABLE ,3= PATTERN  GENERATOR    TABLE,  4=
                     6093                                       ;     COLOR  TABLE
                     6094                                       ; START_INDEX   IN DE,
                     6095                                       ; DATA  BUFFER  IN HL,  AND  COUNT  IW  IY.
                     6096
    1BA3 CD1BAA      6097             CALL  SET COUNT
    1BA6 CD1D3E      6098             CALL  VRAM  READ
    1BA9 C9          6099             RET
                     6100
                     6101
    1BAA             6102  SETCOUNT                             ;CALLED  BY PUT_VRAM_   AND  GET VRAM_
                     6103                                       ;SETS  BYTE COUNT  AND  INDEX  FOR
                     6104                                       ;WRITES  AND READS  TO  AND  FROM  VRAM
                     6105                                       ; TABLE           BYTES/ITEM
                    6106                                        ; SPRITE NAME           4
                    6107                                        ; SPRITE GEN            8
                    6108                                       ;  PATTERN NAME          1
                    6109                                       ;  PATTERN GEN           8
                    6110                                       ;  COLOR  (MODE  1)      1
                    6111                                       ;  COLOR  (MODE  2)      8
                    6112
    IBAA FD2273FE   6113              LD    (SAVED  COUNT) ,IY                    ;SAVE  COUNT
   1BAE 002173F2    6114              LD    IX,VRAM  ADOR_TABLE                   POINTER   TO  SAVED  VRAM   ADDRESSES
   1BB2 4F          6115              tD    C,A                ;SAVE   TABLE CODE
   1BB3 0600        6116              LD    8,0                *BC  USED  AS INDEX
   1885 FE04        6117              cP    4                                     ;CHECK  FOR  CASE  OF  COLOR  TABLE
   1887 2007        6118              JR           COUNTIO
                   6119               3;**  COLOR  TABLE,   CHECK  IF MODE  1
   1BB9 3A73C3      6120             LD     A,{VDP  MODE WORD)                    ;CHECK  FOR  VDP  GRAPHICS   MODE
   1BBC CB4F        6121             BIT    1,A
   1BBE 282C        6122             JR           COUNT20                                                                                                                           ,
                    6123              ;**   WOT MODE   1, ADJUST   ITEM  COUNT AND  INDEX
   1BCO             6124  SET_COUNT10
   18CO FO211BFF    6125             LO  =IY,SHIFT   CT        ;GET  ITEM  COUNT  CONVERSION   FACTORS
   1BC4 FO09        6126             ADD    1Y,8C
   18C6 FD7E00      6127             LD  =A,  (1Y¥+0}          ;SHIFT  COUNT  FOR  MULTIPLICATION
   1BC9 FEOO        6128             cp    60
   18CB 281F        6129             JR    2,SET  COUNT20
   1BCD             6130  ADJUST INDEX                         ;MULTIPLY   ITEM_INDEX  TO  GET BYTE  INDEX
   1BCD CB23        6131             SLA   E
   1BCF CB12        6132             RL    ODO
   1801 30          6133             DEC   A
   1BD2 20F9        6134             JR               INDEX
   1804             6135  ENDADJ INDEX
   1804 CS          6136             PUSH  BC                  ;SAVE  TABLE CODE/  INDEX
   1BD5 ED4B73FE    6137             LD    BC, {SAVED COUNT]
   1809 FO7E00      6138             LD    A, {1Y¥+0)          ;SHIFT  COUNT  FOR MULTIPLICATION
   1BOC FEOO        6139             cP  (OO
    1BDE  2808          6140             JR   2,END_ADJ_COUNT
    1BEO                6141  ADJUST COUNT                    sMULTIPLY  ITEMCOUNT TO GET  BYTE COUNT
    1BE0  CB21          6142             SLA  C
    1BE2  CB10          6143             RL   OB
    1BE4  3D            6144             DEC  A
    1BE5  20F9          6145             JR   NZ,ADJUST COUNT
    1BE7  ED4373FE      6.146            LO   [SAVEDCONT)  ,BC                ;SAVE ADJUSTED  COUNT
    1BEB                6147  ENDADJ COUNT
                        6148
    1BEB  C1            6149             Pop  BC              RESTORE  TABLECODE/INDEX
    1BEC                6150  SETCOUNT20
    1BEC  E5            6151             PUSH HL
    1BED  DDO9          6152             ADD  IX,BC           ;GET TABLE ADDRESS IN VRAM
    1BEF  DDO9          6153             ADD  1X,BC
    1BF1  DD6E00        6154             LDL, [1X+0)          ;LOW ORDER OF VRAM ADDRESS
    1BF4  DD6601        6155             LOD oH, LIX#1]       sHIGH ORDER OF VRAM ADDRESS
    1BF7  19            6156             ADD  HL,DE           ;ADD BYTE  INDEXTO GET VRAM  START ADDRESS
    1BFB  EB            6157             EX  DE, HL           :VRAM DESTINATION NOW IN DE
    18F9  E1            6158             POP  HL              “RESTORE DATA POINTER
    1BFA  ED4B73FE      6159             LD   BC, [SAVECOUNT]  ;RESTORE ADJUSTED COUNT
    1BFE                6160  SET_COUNTX
    1BFE  C9            6161             RET
                        6162
                        6163
    18FF                6164  SHIFTCT
    18FF  0203000303    6165                  DEFB            2,3,0,3,3
                        6166
                        6167
                        6168  * PROCEDURE PUTVRAMQ  (TABLE CODE :BYTE;START_INDEX:BYTESLICE  :BYTE;
                        6169  *                      VAR DATA:BUFFER;ITEM COUNT:INTEGER);
                        6170
                        6171  * THIS 1S THE PASCAL ENTRY POINT TO INIT_TABLE_
                        6172
    1€04  00050001      6173  PUT_VRAMP       DEFW            5,1,1,1,-2,2
                        6174  * THIS IS THE PARAMETER DESCRIPTOR FOR INIT TABLEQ
                        6175
    1C10                6176  PUT_VRAMQ
    1€10  011004        6177                  LD              BC,PUTVRAM  P
    113   1173BA        6178                  LD              DE,PARAM_AREA
    1C16  CD0098        6179                  CALL            PARAM
    1019  3A73BA        6180                  LD              A,[PARAMAREA]
    1C1C  €D587388      6181                  LD              DE,(PARAMAREA+1)
    1020  FO2A73BF      6182                  LD              1Y,(PARAM_AREA+5)
    1024  2A73B0        6183                  LD              HL,[PARAMAREA+3]
                        6184
    1027                6185  PUTVRAM_                         WRITES  A CERTAIN NUMBER OF  BYTES TO VRAM
                        6186                                  ;FROM A BUFFER.
                        6187                                  IN:  TABLE CODE IN A
                        6188                                  ;             NAME TABLE
                        6189           :                      -             GENERATOR TABLE,  2=PATTERN NAME
                        6190                                  -    TABLE3=  PATTERN GENERATOR  TABLE, 4=
                        6191                                  -    COLOR TABLE                        |
                        6192                                  - START INDEX IN DE,
                        6193                                  : DATA BUFFER IN HL, AND COUNT  IN IY.
                        6194
     1€27  F5           6195               PUSH    AF
                        6196  *    IF  (TABLE CODE   = SPRITE  WAME  TABLE)    AND  (MUX SPRITES    =  TRUE)   THEN
    1C28   FEOO         6197               cP  0
    1C2A  2022          6198               JR  NZ, ELSEZZ
    1C2C  3A73C7        6199               LD  A, [MUX SPRITES)
    1C2F   FEO          6200               CP  1
    1031  2018          6201               JR  WZ,ELSEZZ   |.
                        6202
                        6203  *      WRITE  ENTRY   TO LOCAL   TABLE
    1€33  Fi            6204               POP   AF                     ; CLEAR   STACK
    1034  €5            6205               PUSH    WL  ;  (SP)  = DATA  BUFFER
                        6206
    1€35  2A8002        6207               LD   HL,{LOCAL  SPR  TBL)   ; CALCULATE    ADDRESS   IN  TABLE
    1C38  78            6208               LD   A,E
    1€39  CB27          6209               SLA   A>
    1€38  CB27          6210               SLA   A
    1C30  5F            6211               LD   E,A
    1C3E  19            6212               ADO  HL,DE
    1C3F  EB            6213               EX   DE,HL
                        6214
    1040  FDES          6215               PUSH    IY                   ; CALCULATE    BYTE  COUNT
    1€42  C1            6216               POP   BC
    1€43  79            6217               LD   A,C
    1044  CB27          6218               SLA   A
    1046  CB27          6219               SLA   A
    1048  4F            6220               LD   C,A
                        6221
   1€49   E1           6222                POP   HL                     ; STACK   CLEAR
   1C4A   EDBO         6223                LDIR                         ; PERFORM   WRITE   FROM  BUFFER
                       6224
   1C4C   1807         6225                JR END  I1F2ZZ
                       6226   *   ELSE
   1C4E                6227   ELSE2Z
   1C4E   F1           6228                POP   AF
   1C4F  CDIBAA        6229                CALL  SET COUNT
   1€52  CD1D01        6230               CALL   VRAM WRITE
                       6231  *    END   IF
   1€55                6232  END IF22
   1€55  C9            6233               RET
                       6234
                       6235
                       6236  *  PROCEDURE   INIT SPR  ORDERQ    (SPRITE  COUNT:BYTE);
                       6237
                       6238  *  THIS  IS THE  PASCAL  ENTRY  POINT   TO THE   INIT SPR  ORDER    ROUTINE.
                       6239
   1€56  00010001      6240  INIT SPR  P        DEFW                1,1
                       6241
              <1C5A>   6242  INIT SPR  ORDERQ   EQU                 &
   1C5A  011C56        6243                     LD                  BC,INIT SPR  P
   1C5D  1173BA        6244                     LO                 DE ,PARAM AREA
   1C60  CD0098        6245                     CALL                PARAM
   1C63  3A73BA        6246                     LD                 A, (PARAM AREA)
                       6247
   1066                6248  INIT SPR  ORDER  |                      INITIALIZES     THE SPRITE   DISPLAY    ORDER.
                       6249                                         LIST  IN  RAM  TO  DEFAULT   ORDER   (0...31)
                       6250                                         7IN: NUMBER   OF  SPRITES   TO ORDER    IN ‘A!
                       625)
    1€66 47           6252               LD    8B,A                ;SAVE  SPRITE   COUNT
   1C67  AF           6253               KOR   A
   1068  2A8004       6254               LD    HL, [SPRITE  ORDER)
   1C68               6255   INIT SPR10
   1C68  77          6256                LD    [WL),A
   1C6C  23          6257                INC   WL
   1C6D  3C           6258               INC   A
   1C6E  88           6259               CP    6B
   1C6F  20FA         6260               JR    NZ, INIT_SPR1O
   1€71  C9          6261                RET
                      6262
                      6263   * PROCEDURE  WR  SPR_NM  TBLQ    (SPRITE  COUNT:BYTE);
                      6264
                      6265   * THIS  IS THE PASCAL   ENTRY  POINT   TO  THE WR_SPR_NM   TBL_   ROUTINE.
                      6266
   1C72 00010001      6267 WR  SPR  P          DEFW                1,1
                      6268
             <1C76>   6269  WR_SPR_NM  TBLQ    EQU                $
   1€76 011C72       6270                      LD                 BC, WR SPR  P
   179   11738A       6271                     LD                 DE ,PARAM  AREA
   1c7C cp0098        6272                     CALL               PARAM
   1C7F 3A73BA       6273                      LD                 A, ([PARAM_AREA}
                     6274
   1082              6275   WR_SPR  NM TBL_                         ;WRITES   SPRITE NAME  TABLE    TO VRAM
                     6276                                         ;USING   THE  SPRITE   ORDER  LIST.
                     6277                                         ;
                     6278                                         ;      NUMBER  OF  SPRITES   TO WRITE   IN   ‘A!
                     6279
                     6280   ;MODE 0  PORT       EQU                OBEH
                     6281   ;MODE 1  PORT       EQU                OBFH
                     6282                                               .
  1C82  DD2A8004     6283                LD =X,    (SPRITE ORDER]     ;LIST  OF  DISPLAY   ORDERS
                     6284   ;            LD    [SPRITE  CT],A     ;SAVE   COUNT
  1C86  F5           6285               PUSH  AF                  ;SAVE   COUNT
  1C87  FO2173F2     6286               LD  =IY,VRAM_   ADDR TABLE
  1C8B  FOSE00       6287               LO    CE,[1¥+0)
  1C8E  FD5601       6288               LD   soOD(1¥+1)           ;VRAM   SPRITE NAME  TABLE   ADDRESS   NOW   IN DE.
                     6289
                     6290               3**   SET  UP  VDP  TO RECEIVE   DATA
                     6291
  1c91  78          6292                LD    A,E
  1C92 D38F          6293               OUT   [MODE  1 PORT),A
  1094  7A           6294               LD    A,O
  1C95  F640        6295                OR    40H
  1C97 O38F          6296               OUT   {MODE 1  PORT],A
                     6297
  1C99  FI           6298               POP   AF                  ;RESTORE   COUNT
  1C9A               6299  OUTPUT  LOOP TABLE  MA
  1C9A 2A8002        6300               LO  = HL, (LOCAL_SPR_TBL]     ;RESTORE  RAM   SPRITE NAME  TABLE   POINTER
  1C9D DD4E00        6301               LDC,  {1X+0)              sDISPLAY   ORDER
  1CAO DD23          6302               INC   IX                  ;ADVANCE   DISPLAY   ORDER  POINTER
  1CA2 0600          6303               LD    8,0
  1ca4 09            6304               ADD   HL,BC
  1CA5 09            6305               ADD   HL,BC
  1CA6 09            6306               ADD   HL,BC
  1CA7 09            6307               ADD   HtL,BC
                     6408
                            6309                 ;**   QUTPUT   TO  VRAM  THROUGH   VDP
                            6310
     1CA8   0604            6311                 iD    B,4                 sELEm.  «tTCOUNT    FOR  OWE  SPRITE
     1CAA   OEBE            6312                 LD    C,MODE  0  PORT     OUTPUT    PORT   IN  'C'
     1CAC                   6313  OUTPUT   LOOP10
     1CAC   EDA3            6314                OuT]
     1CAE   00              6315                woP              ;         ;DELAY
     ICAF   00              6316                nop
     1CBO   20FA            6317                 JR               LOOP10
                            6318   ;             LD    A, [SPRITE_CT)
                            6319   ;            DEC    A
                            6320   ;             LO  (SPRITE    CT},A
     1CB2   30              6321                DEC    A
     1CB3   20€5            6322                 JR               LOOP   TABLE  MA
     1cB5   C9              6323                RET
                            6324
                            6325                       GLB                 VRAM_ ADDR  TABLE
                            6326                       GLB                 SPR ITEMNAME TBL
                            6327                       GLB                 SPRITEGENTBL
                            6328                       GLB                 PAT TRNNAME  TBL
                            6329                       GLB                 PATTRNGENTBL
                            6330                       GLB                 COLORTABLE
                            6331                      DATA
   73F2                     6332  VRAM  ADDR  TABLE
   T3F2                     6333  SPRITENAMETBL        DEFS                2
    T3F4                    6334  SPRITEGENTBL        DEFS                 2
    73F6                    6335  PATTRNNAMETBL       DEFS                 2
    73F8                    6336: PATTRNGENTBL        DEFS                 2
    T3FA                    6337  COLORTABLE          DEFS                 2
                            6338  *  THIS  TABLE   HOLDS  THE  BASE  ADDRESSES    OF  ALL  THE   VRAM  TABLES.
                           6339
                            6340
    73FC                   6341   SAVE TEMP           DEFS   2
    73FE                   6342  SAVED   COUNT        DEFS   2
                           6343  ©
                           6344   >                   COMN
                           6345
                           6346   ;PARAM   AREA         DEFS                6
                           6347   *  THIS IS   THE  PARAMETER   PASSING    AREA  FOR  THE  PASCAL   ENTRY   POINTS  TO
                           6348   *  ROUTINES   IN  THIS  MODULE.   IT  IS  HELD  IN  COMMON   WITH   OTHER  SUCH  ENTRY
                           6349   *  POINTS   FOR  OTHER  MODULES.
                           6350    PROG
                        6352
                        6353 * The video drivers provide a standard protocol for low-level comunication
                        6354 * with the 9918/28 VDP. There are four basic driver routines which between
                        6355 * them allow the programmer to write a value to a VDP register, read the
                        6356 * VDP status register, write a RAM or ROM buffer to a specified address
                        6357 * in VRAM, and read a RAM buffer from a specified address in VRAM.
                        6358 *
                        6359 * The four routines outlined above are:
                        6360 *
                        6361 *   Procedure RegWrite
                        6362 *
                        6363 *     Reg Write takes a VDP register number (0..7) in the B register
                        6364 *     and a byte value to be written to it in the C register. It writes
                        6365 *     the value to the given VDP register and returns.
                        6366 *
                        6367 *     If the specified register is one of the VDP mode control registers,
                        6368 *     ie. 0 or 1, then RegWrite  also writes the given value to the
                        6369 *     corresponding half of the VDP_ModeWord  in RAM. All mode dependant
                        6370 *     decisions made by the operating system are made by referencing the
                        6371 *     contents of this word. Thus it is important for the cartridge
                        6372 *     programmer to maintain it should he/she choose not to use
                        6373 *     RegWrite  in accessing the VDP registers.
                        6374 *
                        6375 *     In addition to the BC pair, Reg Write also makes use of AF.
                        6376 *
                        6377 *   Function RegRead
                        6378 *
                        6379 *     RegRead  reads the VDP status register and returns its contents
                        6380 *     in the A register.
                        6381 *
                        6382 *     It uses no other registers.
                        6383 *
                        6384 *     NOTE ****** While this routine has no side effects with respect to
                        6385 *                 the CPU, it should be used with caution since reads
                        6386 *                 to the status register have the effect of resetting the
                        6387 *                 VOP interrupt flag and may cause field interrupts to be
                        6388 *                 missed.
                        6389 *
                        6390 *   Procedure VramWrite
                        6391 *                                                                                                                                              ’
                        6392 *     Vram Write takes a pointer to the beginning of a data buffer in the
                        6393 *     HL pair, the VRAM destination address in the DE pair, and a byte
                        6394 *     count in the BC pair.
                        6395 *
                        6396 *     It writes the specified number of bytes from the buffer to VRAM
                        6397 *     starting at the destination address.
                        6398 *
                        6399 *     The AF,8C,DE, and HL register pairs are all affected.
                        6400 *
                        6401 *     NOTE ****** This procedure is not re-entrant.
                        6402 *
                        6403 *   Procedure Vram_Read
                        6404 *
                        6405 *     Vram Read takes a pointer to the beginning of a data buffer in the
                        6406 *     HL pair, the VRAM source address in the DE pair, and a byte count
                        6407 *     count in the BC pair.
                        6408 *
                          6409  *      It reads  the specified    number   of  bytes    into  the  buffer   from   VRAM
                          6410  *     Starting   at  the source   address.
                          6411  *
                          6412  *     The  AF,B8C,DE,  and  HL  register   pairs   are   all  affected.
                          6413  *
                          6414  *     NOTE  ******  This  procedure     is not   re-entrant.
                          6415  *
                          6416  *
                          6417  *
                          6418  * For each  of the  routines    listed   above,   there    is an  additional    entry
                          6419  * point  which allows   the  routine   to  be  called    using   the  standard    pascal
                          6420  * 64000  parameter  passing   protocol    and  passing    the  parameters     through
                          6421  * a common  data  area  into  the  registers.     It  should   be  noted   that   use  of
                          6422  * these  routines  in  this  fashion   may  cause    problems    in an   interrupt
                          6423'*  driven  environment.   They  should    therefor    be  used  with   care.   If  the
                          6424  * name  of a given  routine   is  Mame,   the  name   of  the  additional    entry    point
                          6425  * is MameQ  for  the actual   routine   and   NameP   when   called   through   the
                          6426  * jump  table in  OS ROM.   “Q"  entry  points    destroy    all  registers.
                          6427  SRASTAAAAALAAKAAALARARARARARARAKAARARKARARAAAATREEAKEEAARARARARAKARKKKAAKAAK
                         6428
                          6429  RRAETEEAARAKAARAKARERKAAREREE  DICTIONARY     RBEAAARAAAAKAARAARERKKAAARKARKARAREK
                          6430
                 <OOBE>   6431  DATAPORT          EQu                 OBEH
                 <O0BF>   6432  CTRLPORT          EQu                 OBFH
                          6433                    GLB                 DATA PORT,   CTRL  PORT
                          6434  * DATA PORT  AND  CTRL PORT   ARE  THE  PORTS    THROUGH   WHICH   THE  CPU
                          6435  * COMMUNICATES   WITH  THE 9928.
                          6436
                          6437
                          6438  ;                 COMN
                          6439  ;PARAMAREA         DEFS                6
                          6440  * THIS  THE PARAMETER   PASSING   AREA  THAT   IS  HELD   IN  COMMON   WITH  ALL   OTHER
                          6441  * PASCAL  ENTRY  POINTS  TO  OS  ROUTINES.
                         6442
                         6443   SBERKATAEAAARAAKAAKARRAEARARARARARARKRAKRRARRAEKKAKARAKRAKAEARHRARKARKHAKAKAREKARREAE
                         6444
                         6445   RERARAAKAARAEKRERERARPROCEDURES    AND  FUNCTIONS     SRAERARAAKRKRAARKAKRHRARKAKKKKEKE
                          6446                    PROG
                         6447
                         6448   sEXT              PARAM
                         6449   * PARAM   IS THE  PASCAL  PARAMETER    PASSING    ROUTINE.
                         6450
                         6451   * PROCEDURE   REG WRITE   (REGISTER:   BYTE; VALUE:   BYTE)
                         6452
                         6453   * REGISTER  IS PASSED   IN THE  B  REGISTER.
                         6454   * VALUE  IS PASSED  IN  THE  C REGISTER.
                         6455   * DESTROYS:  A
                         6456   *eeeeeeneee  NOTE
                         6457   *
                         6458   *                 ****  THIS  ROUTINE   MAY   SIDE  EFFECT    THE  ****
                         6459   *                 **    VDP  MODE  WORD                            sane
                         6460
                         6461                    sEXT                 VDP_MODE  WORD
                         6462
                         6463                     GLB  REGWRITE   P
    1CB6   00020001      6464   REG WRITE  P      —SODEFW             2,1,1
                                        6465 * THIS IS THE PARAMETER DESCRIPTOR FOR  REG WRITEQ
                                        6466
                                        6467 * BEGIN REG WRITE
                                        6468                 GLB             REG WRITEQ
                              <1CBC>    6469 REG WRITEQ      EQuU            $
                   1cBc  011CB6        6470                  LO              BC,REG WRITE  P
                   1CBF   1173BA       6471                  LD        _ '   DE,PARAM_AREA
                   1CC2  CD0098        6472                  CALL            PARAM_
                   1CC5  2A73BA         6473                 LD              HL,[PARAM  AREA)
                   1cc8  4C             6474                 LD              C,u
                   1cc9  45             6475                 LO              B,L
                                        6476
                                       6477                  GLB             REGWRITE
                              <1CCA>    6478 REG WRITE       Equ             $
                                        6479
                                        6480 *   VALUE =; CTRLPORT            .
                   ICCA  79             6481                 LO              A,C
                   1CCB  D038F         6482                  OuT             (CTRL_PORT],A
                                        6483
                                        6484 *   REGISTER + BOW =; CTRL_PORT
                   1ccD  78             6485                 LD              A,B
                   1CCE  C680           6486                 ADD             A,80H
                   1000  038F          6487                 OuT              (CTRL PORT)  ,A
                                        6488
                                        6489 *   IF REGISTER = 0 THENVDP_MODE WORD[0)    := VALUE
                   1cD2  78             6490                 LD              A,8
                   10D3. FEOO           6491                 cP              0
                   1CD5  2004           6492                 JR              WZ,NOT REG 0
                   1c07  79             6493                 LD              A,C
                   1008  3273C3         a49G                 LD              [VDP_MODE WORD]  ,A
                              <1C@DB>   6495 NOTREG 0        EQu             $
                                        6496
                                        6497 *   IF REGISTER = 1 THEN VDP_MODEWORD[1]    := VALUE
                 _—1c0B8 78             6498                 LD              A,B
                   1CDC  FEO!           6499                 cP              1
                   ICDE  2004           6500                 JR              NZ,NOT REG 1
                   1cEO  79             6501                 LD              A,C
                   1CE1  3273C4         6502                 LD              [VDP_MODE WORD+1),A
                              <1CE4>    6503 NOTREG 1        EQu             $
                                        6504
                                        6505 * END REGWRITE
                   1CE4  C9             6506                 RET
                                        6507
                                        6509
                                        6510 * VAR DATA (POINTER TO DATA BUFFER) IS  PASSED  IW  HL
                                        6511 * DEST IS PASSED IN DE
                                        6512 * COUNT IS PASSED IN BC
                                        6513 * DESTROYS: ALL
                                        6514
                   1CE5  OOO3FFFE       6515 VRAMWRITE P      DEFW            B,-2,2,2
                                        6516 * THIS 1S THE PARAMETER DESCRIPTOR FOR  VRAM WRITEQ
                                        6517
                                        6518 * BEGIN VRAMWRITE
                                        6519                 GLB             VRAMWRITEQ
                              <1CED>    6520 VRAMWRITEQ      EQu             $
    1CED  011CE5      6521                   LD                BC, VRAM WRITE P
    1CFO  11738A      6522                   LD                DE ,PARAM AREA
    1CF3  CD0098      6523                   CALL              PARAM_
    1CF6  2A73BA      6524                   LD                HL, [PARAM AREA]
    1CF9  £D58738C    6525                   LD                DE, [PARAM AREA+2}
    1CFD  ED4B73BE ©  6526                   LD                BC, [PARAM _AREA+t4)
                      6527                           .-
                      6528                   GLB              VRAM_ WRITE
              <1D01>  6529  VRAMWRITE        EQu               $
                      6530
                      6531  * DEST  := DEST + 4000H
    1D01 E5           6532                   PUSH              HL
    1D02 05           6533                   PUSH              DE
    1D03 €1           6534                   POP               HL
    1004 114000       6535                   LD                DE,4000H
    1007 19           6536                   ADD               HL,DE
                      6537
                      6538  * LOW BYTE  OF DEST  =; CTRLPORT
    1008 7D           6539                   LD                A,L
    1009 D38F         6540                   OuT               (CTRL_PORT],A
                      6541
                      6542  * HIGH BYTE  OF DEST  =; CTRLPORT
   1008  7C           6543                   LD               A,W
   100C  D38F         6544                   OUT               (CTRL_PORT] ,A
                      6545
                     6546   * DATA =;  DATAPORT
   100€  C5          6547                    PUSH             BC
   100F  01          6548                    PoP              DE
   1010  £1          6549                    PoP              WL
   1011  O&BE        6550         |          LO               C,DATA_PORT
   1013  43          6551                    LO               B,E
              <1D14> 6552  OUTPUT LOOP       EQu              $
   1014  EDA3        6553                    OUT!
   1016  00          6554                    woP
   1017  00          6555                    NOP
   1018  C21D14      6556                    JP               NZ,QUTPUT  LOOP
   1018  15          6557                   DEC               D
   1D1C  FA1D21      6558                    JP               M,END OUTPUT
   ID1F 20F3         6559                    JR               NZ,QUTPUT  LOOP
                     6560                                                                                                                                                          ,
                     6561  * END  VRAMWRITE
             <1D21>  6562  END OUTPUT       EQu               $
   1021 C9           6563                   RET
                     6564
                     6565  * PROCEDURE  VRAM  READ   (VAR DATA:BUFFER;SRCE:   INTEGER; COUNT:  INTEGER)
                     6566
                     6567  * VAR DATA  (POINTER  TO DATA BUFFER)   IS PASSED  IW  HL
                     6568  * SRCE  IS PASSED  IW DE
                     6569  * COUNT  IS PASSED  IN BC
                     6570  * DESTROYS:  ALL
                     6571
   1D22 OOO3FFFE   © 6572  VRAM READ P      DEFW              3,-2,2,2
                     6573  * THIS IS  THE PARAMETER  DESCRIPTOR  FOR  VRAM READQ
                     6574
                     6575  * BEGIN VRAM READ
                     6576                   GLB               VRAMREADQ
              <102A>  6577   VRAMREADQ      EQU             $
    1D2A  011D22      6578                  LD              BC,VRAMREAD P
    1D2D  1173BA      6579                  LD              DE ,PARAM_AREA
    1D30  cD0096      6580                  CALL            PARAM_
    1033  2A73BA      6581                  LD              HL,(PARAM AREA]
    1036 EDSB73BC  88=6582                  LD              DE,[(PARAM_AREA+2)
    1D3A ED4B73BE     6583                  LD              BC,[PARAM_AREA+4]
                      6584
                      6585                  GLB             VRAMREAD
              <1D3E>  6586  VRAM_READ       EQu             o
                      6587
                      6588  * LOW BYTE OF  SRCE=; CTRL_PORT
    1D03E7B           6589                  LD              A,E
    103F O38F         6590                  OUT            (CTRL_PORT],A
                      6591
                      6592  * HIGH BYTE OF SRCE =; CTRL_PORT
    1D41 7A           6593                  LD              A,D
    1042 D3BF         6594                  OUT            (CTRLPORT] ,A
                      6595
                      6596  * DATA =; DATA PORT
    1044 C5           6597                  PUSH            BC
   1045  D1           6598                  POP             DE
   1046  OEBE         6599                  LD              C,DATA_PORT
   1048  43           6600                  LO              B,E
              <1049>  6601  INPUT LOOP     EQU             $
   1049  EDA2         6602                  INI
   1048  00           6603                  NoP
   104C  00           6604                  woP
   1D4D  €21D49       6605                  Jp           .  WZ,INPUTLOOP
   1050  15           6606                  DEC       :     D
   1D51  FA1D56      6607                   JP              M,ENDINPUT
   1054  20F3         6608                  JR              NZ,INPUTLOOP
                      6609
                      6610  * END VRAM_READ
             <1D56>   6611  ENDINPUT       EQU             3
   1056  C9           6612                  RET
                      6613
                      6614  * FUNCTION   REGREAD:BYTE
                      6615
                      6616  * FUNCTION OUTPUT RETURNED IN A
                      6617  * DESTROYS A ONLY
                      6618
                      6619  * BEGIN REGREAD
                      6620                  GLB             REG_READ
             <1D57>   6621  REGREAD         EQU             $
                      6622
                      6623  *  REG READ  ;= CTRLPORT
   1057 DBBF          6624                  IN              A,(CTRL_PORT)
                      6625
                      6626  * END REGREAD
   1059 C9           6627                   RET
                      6628
                     6629    PROG
                          6631
                          6632    * THIS   IS A  PACKAGE    OF  ROUTINES   THAT   ALLOW   APPLICATIONS   PROGRAMMERS   TO
                          6633    * OPERATE   ON  SHAPE   GENERATORS.     EACH  OF  THEM   TAKES,  AS  INPUTS,   AN AREA
                          6634    *  IN OWE  OF  THE  GENERATOR     TABLES   IN WHICH   THE  GENERATORS    TO BE  OPERATED
                          6635    * UPON   RESIDE,   A  COUNT  OF  THE   GENERATORS    TO  BE USED,  AND  AN  AREA  OF THE
                          6636    * SAME   TABLE   INTO  WHICH   THE  RESULTS   ARE   TO  BE PUT.TWE   ONLY  RAM  AREA THEY
                          6637    *  IS IN  THE WORK   BUFFER    A POINTER    TO  WHICH   IS DECLARED   AS  AN EXTERNAL
                          6638    * AND  DEFINED    IN  THE  CARTRIDGE.
                          6639
                         6640    SAAAAKKRARRAR    WOTE:                                             SRRAAAAKARKAKARAAKKRE
                         6641    RSRKARRARKRERE          THESE   ROUTIWES  WRITE    TO  AND  READ   RARRAKAAARAKRAERAKARRAK
                         6642    SHeeakararnae           WITHOUT   POSSIBILITY     OF  DEFERAL       SRRAKAAARAAERAAEKREEKKE
                         6643    RRARKRAARAAREE         AND   SHOULD   NOT  BE  USED   IN  ANY      RReKeRReeeakkaxankak
                         6644    Raekaeaakeaene          SITUATION   WHERE    THEY MAY    BE        SRAkakakaanaaakaank
                         6645    WHEERKAKARKRER          INTERRUPTED.                               RRRARAKARAAKAARKKAKKE
                         6646    RARAARARARAARAAARARARAAAARERAERAAAAERAARAEARAAERAAERERERRAREAARARKEARKAE
                          6647
                          6648    ;                   EXT                 WORK   BUFFER
                          6649   *  POINTER   TO  THE  WORK   BUFFER   DEFINED    BY THE   CARTRIDGE   PROGRAMMER
                          6650
                          6651   ;                    EXT                  VOP_MODE  WORD
                          6652   *  THE  WORD  IN  OS  RAM   THAT  DESCRIBES    THE  CURRENT   GRAPHICS   MODE.
                          6653
                          6654   ;                    EXT                  GET_VRAM_
                          6655   ;                    EXT                 PUT  VRAM_
                          6656   *  EXTERNAL   OS  ROUTINES    IN  TABLE  MANAGER    MODULE
                         6657
                         6658    ;                    EXT                  MIRROR  L_R
                         6659    ;                    EXT                  MIRROR  U D
                         6660    ;                    EXT                  ROTATE
                         6661    ;                    EXT                  MAGNIFY
                         6662    ;                    EXT                  QUADRUPLE
                         6663    *  EXTERNAL   ROUTINES    THAT   PERFORM   BLOCK   OPERATIONS
                         6664
                         6665    ; TRUE                EQU                  1
                         6666    ;FALSE                EQU                  0
                         6667    *  VALUES   FOR  BOOLEAN    FLAGS
                         6668
              <0003>     6669    PATTERN  GEN         EQU                  3
              <0004>     6670    COLOR  TABLE         EQuU                4
                         6671    *  VALUES   FOR  TABLE   CODE
                         6672
                         6673    *  PROCEDURE   REFLECT   VERTICAL     (TABLE  CODE(A),   SOURCE{DE)  ,DESTINATION{HL),    COUNT(BC}))
                         6674
                         6675    *  REFLECT   REFLECTS    EACH  OF  A  BLOCK  OF  GENERATORS    FROM  VRAM  AROUND
                         6676    *  THE  VERTICAL   AXIS.    IF THE  GENERATORS     ARE  FROM  THE  PATTERN  PLANE
                         6677    *  AND  THE  GRAPHICS    MODE  IS  2,  THEN  THE   ROUTINE   ALSO  COPIES  THE
                         6678    *  CORRESPONDING    COLOR    GENERATORS.,    OTHERWISE     IS ASSUMES   THAT  THE COLOR
                         6679    *  DATA  HAS  ALREADY    BEEN  SET  UP.
                         6680
                         6681    *  BEGIN  REFLECT  VERTICAL
                         6682                        GLB                  RFLCT  VERT
   1D5A                  6683   RFLCT   VERT                              ;  ACTUAL   ROUTINE   NAME  EXISTS   IN OS
                         6684                                             ;  JUMP  TABLE   OWLY
                         6685
                         6686    *   SET  OPERATION    CODE
   1D5A  DD211D96        6687                        LD                   1X,RFLCT   VERT_
                       6688
                       6689   *   CONTINUE  BELOW
    105E  1810        6690                       JR                CONTINUE   GRAPHICS
                       6691
                       6692
                       6693   * PROCEDURE   REFLECT  WORIZONTAL    (TABLE  CODE{A},  SOURCE(DE}  ,DESTINATIONCHL)   ,COUNT{BC))
                      6694
                       6695   * REFLECT  WORIZONTAL    REFLECTS   EACH  OF  A BLOCK  OF  GENERATORS   FROM  VRAM
                       6696   * AROUND  THE  WORIZONTAL    AXIS.  IF  THE GENERATORS    ARE FROM  THE  PATTERN
                       6697   * PLANE  ANDTHE   GRAPHICS   MODE  IS 2  THEN  IT REFLECTS   THE  CORRESPONDING
                       6698   * COLOR  GENERATORS   AS  WELL.
                       6599                  )      |
                       6700   * BEGIN  REFLECT  HORIZONTAL
                       6701                      GLB                RFLCT HOR
    1D60               6702   RFLCT HOR                             ; ACTUAL   ROUTINE   NAME EXISTS   IN  OS
                       6703                                         ;  JUMP  TABLE  ONLY
                       6704
                      6705   *   SET  OPERATION   CODE
    1D60 DD211DB7     6706                       LD                 IX,RFLCT  HOR_
                      6707
                      6708   *   CONTINUE   BELOW
    1064 180A         6709                       JR                 CONTINUE  GRAPHICS
                      6710
                      6711
                      6712
                      6713
                      6714   *  PROCEDURE   ROTATE 90   (TABLE  _CODE{A}, SOURCE (DE},DESTINATIONCHL),    COUNT{BC))
                      6715
                      6716   *  ROTATE 90   ROTATES  EACH  OF  A  BLOCK  OF GENERATORS    FROM VRAM  90  DEGREES
                      6717   *  CLOCKWISE.   IF  THE GENERATORS    ARE  FROM  THE PATTERN   PLANE  AND  THE
                      6718   *  GRAPHICS  MODE   IS 2  THEN  THE  ROUTINE  COPIES   THE CORRESPONDING    COLOR
                      6719   *  ENTRIES  AS  WELL.
                      6720
                      6721   *  BEGIN  ROTATE  90
                      6722                      GLB                 ROT 90
   1066               6723   ROT 90                                 ; ACTUAL  ROUTINE   NAME  EXISTS   IN OS
                      6724                                          ; JUMP  TABLE  ONLY
                      6725
                      6726   *   SET OPERATION    CODE
   1066  DD211DE5 =   «46727                    LD                  1X,ROT _90_
                      6728
                      6729   *   CONTINUE  BELOW
   1D6A  1804         6730                      JR                  CONTINUE GRAPHICS
                      6731
                      6732
                      6733
                      6734
                      6735   *  PROCEDURE  ENLARGE   (TABLE  CODE{A),  SOURCE (DE},DESTINATIONCHL},    COUNT(BC})
                      6736
                      6737   *  ENLARGE  TAKES  EACH  OF  A BLOCK   OF GENERATORS   AND  ENLARGES   IT  INTO
                      6738   *  A BLOCK  OF  FOUR  GENERATORS   WHEREIN  EACH  PIXEL   OF THE  ORIGINAL
                      6739   *  GENERATOR   1S EXPANDED   TO  FOUR  PIXELS  IN  THE NEW  ONES.  IF  THE
                      6740   *  GENERATORS   ARE FROMTHE   PATTERN   PLANE  AND  THE GRAPHICS   MODE  IS  2
                      6741   *  THE THE  ROUTINE  ALSO  QUADRUPLES    EACH  OF  THE CORRESPONDING    COLOR
                      6742   * GENERATORS    AS WELL.
                      6743
                      6744   *  BEGIN ENLARGE
                           6745                      GLB                  ENLRG
     1D6C                  6746   ENLRG                                   s ACTUAL   ROUTINE   NAME  EXISTS  IN OS
                           6747                                           ; JUMP  TABLE  ONLY
                           6748
                           6749
                          6750    *   SET OPERATION    CODE
    1D6C   DD211E07   =   6751                       LD         —         IX,ENLRG_
                          6752
                          6753
                          6754    *   CONTINUE  EXECUTION    HERE
    1070                  6755    CONTINUE  GRAPHICS
                          6756
                          6757    *   SAVE  ALL ENTRY   PARAMETERS
    1D70   D9             6758                       EXX
    1D71   08             6759                       EX                  AF AF!
    1D72   ODES           6760                       PUSH                 Ix                  ; (SP]  = OPERATION   CODE
                          6761
                          6762    *  REPEAT
    1D74                  6763   MAIN  LOOP
                          6764
                          6765    *    GET  VRAM_   (TABLE  CODE,  SOURCE  ,WORK BUFFER   (0..7),1)
    1074   08             6766                       EX                  AF AF!
    1075   F5             6767                       PUSH                AF
    1076   08             6768                       EX                  AF AF‘
    1077   F1             6769                       POP                 AF
    1078   D9             6770                       EXX
    1079   D5             6771                       PUSH                DE
    1ID7A  O09            6772                       EXX
    1078   D1             6773                       POP                 DE
    107C   F0210001       6774                       LO                  ly,1
    1D80   2A8006         6775                       LD                  HL, (WORK  BUFFER)
    1083   CD1BA3         6776                      CALL                GET  _VRAM_
                          6777
                          6778   *      EXECUTE  ENCODED   OPERATION    BELOW
    1D86   DDE1           6779                      PoP                  Ix
    1088   DDES           6780                      PUSH                 Ix
    1D8A   DDE9           6781                       Jp                   (1X)
                <1D8C>    6782   RETURN  HERE        EQu                 $
                          6783
                          6784   *      SOURCE  :  SUCC  (SOURCE)
    1D8C   13             6785                       INC                 DE
                          6786
                          6787   *      COUNT  := PRED   (COUNT)
    1D8D) 08              6788                       DEC                 BC
                          6789
                          6790   *   UNTIL  COUNT   = 0
    1D8E   78             6791                       LD                  A,B
    108F  81              6792                      OR                   Cc
    1D90  D9              6793                       EXX
    1091  2061            6794                       JR                  NZ,MAIN  LOOP
                          6795
                          6796   *  END  (ALL)
    1D93                  6797   ALL  X
    1093  DDE1            6798       -               Pop                 Ix                  ; CLEAR  STACK
    1095  C9              6799                       RET
                          6800
    1D96                  6801   RELCT  VERT_
                    6802 * OPERATIONS SPECIFIC  TO REFLECTVERTICAL   ROUTINE
                    6803
                    6804 *   MIRROR_L_R(WORK BUFFER(O..7) ,WORK BUFFERI8..15))
   1096 2A8006      6805                 LO               HL, (WORKBUFFER)
   1099 010008      6806                 LO               Bc,8
   1D9C £5          6807                 PUSH             AL
   109  01          6808                 PoP              DE
   1D9E 09          6809                 ADD              HL,BC
   1D9F EB          6810                 EX               DE,HL
   1DAO CD1F00      6811                 CALL             MIRRORLR
                    6812
                    6813 *   PUTVRAM  (TABLE CODE DESTINATION, WORK BUFFER(8..15),1)
   1DA3.CD1E72      6814                 CALL             PUTTABLE
                    6815
                    6816 *   IF COLORTEST  THEN
   1DA6 CD1E5D     6817                  CALL             COLOR_TEST
   1DA9 FEO1       6818                  cP               TRUE
   1DAB 2006       6819                  JR               WZ,END_IF1  GRAPHICS
                   6820
                   6821  * —   GET_VRAM(COLOR_TABLE,SOURCE ,WORKBUFFER(0..7),1)
   1DAD CD1E89     6822                  CALL             GETCOLOR
              |    6823
                   6824  * —   PUT_VRAM(COLOR TABLE ,DESTINATION,WORK BUFFER[0..7),1)
   1080 CDIE9A     6825                 CALL             PUT_COLOR
                   6826
                   6827  *  END IF
   1083            6828 END IF 1 GRAPHICS
                   6829
                   6830 *   DESTINATION  := SUCC  (DESTINATION)
  1083 D9          6831                  EXX
  1DB4 23          6832                  INC             HL
           /       6833
                   6834 * END
  1085 18D5        6835                  JR              RETURN HERE
                   6836
                   6837
                   6838
  1087             6839 RFLCT HOR
                   6840 * OPERATIONS  SPECIFIC TO REFLECT HORIZONTAL  ROUTINE
                   6841
                   6842 *  MIRROR   UD(WORK BUFFER[O..7] ,WORK BUFFER (8..15])
  1DB7 2A8006      6843                  LD              HL, (WORKBUFFER)
  1DBA 010008      6844                  LD              BC,8
  1DBD £5          6845                  PUSH            HL
  1DBE D1          6846                  PoP             DE
  1DBF 09          6847                 ADD              HL,BC
  10C0 EB          6848                 EX               DE,HL
  1DC1 CDIF4E      6849                 CALL             MIRROR UD
                   6850
                   6851 *  PUT _VRAM  (TABLECODE DESTINATION, WORK BUFFER (8..15],1)
  1DC4 CD1E72      6852                 CALL             PUTTABLE
                   6853
                   6854 *   IF COLOR TEST  THEN
  10C7 CD1E50      6855                 CALL             COLORTEST
  1DCA FEO1        6856                 cP               TRUE
  1DCC 2013        6857                 JR               NZ,END_IF 2 GRAPHICS
                      6859 *     GET _VRAM(COLOTABLE, SOURCE ,WORKBUFFER (0..7],1)
    1DCE  CD1E89      6860                 CALL            GETCOLOR
                      6861
                      6862 *     MIRROR_UD( WORK BUFFER[O..7] ,WORKBUFFER (8..15))
    1DD1  2A8006      6863                 LD              HL, (WORKBUFFER)
    1004  010008      6864                 LD              BC,8
    1007 E5           6865                 PUSH  |-        HL
    1008 D1           6866                 POP             DE
    1009 09           6867                 ADD             HL,BC
    1DDA EB           6868                 EX              DE,HL
    1008 CO1F4E       6869                 CALL            MIRRORUD
                      6870
                     6871  *     PUTVRAM(COLOR TABLE ,DESTINATION,WORK BUFFER (8..15],1)
    1DDE CDIE9A      6872                  CALL            PUTCOLOR
                     6873
                     6874  *   ENDIF
    1DE1             6875  ENDIF 2 GRAPHICS
                     6876
                     6877  *   DESTINATION := SUCC (DESTINATION)
    1DE1 D9          6878                  EXX
    1DE2 23          6879                  INC             WL
                     6880
                     6881  * END
   1DE3  18A7        6882                  JR              RETURN HERE
                     6883
                     6884
                     6885
   1DE5              6886  ROT 90
                     6887  * OPERATIONS SPECIFIC TO THE ROTATE_90 ROUTINE
                     6888
                     6889
                     6890  * — ROTATE(WORKBUFFER [0..7],WORKBUFFER (8..15])
   1DE5  2A8006      6891                  LO              Hi,(WORKBUFFER)
   1DE8  010008      6892                  LO              BC,8
   1DEB  E5          6893                  PUSH            HL
   1DEC  01          6894                  POP             DE
   1DED  09          6895                  ADD             HL,BC
   1DEE  EB          6896                  EX              DE,HL
   IDEF  CDIFI2      6897                  CALL            ROTATE
                     6898
                     6899  * —PUT _VRAM (TABLECODE ,DESTINATION,WORKBUFFER (8..15),1)
   1DF2  CD1IE72     6900                  CALL            PUTTABLE
                     6901
                     6902  *   IF COLORTEST  THEN
   10F5  CD1E50      6903                  CALL            COLORTEST
   10F8  FEO1        6904                  cP              TRUE
   IDFA  2006        6905                  JR              NZ,ENDIF 3  GRAPHICS
                     6906
                     6907  *     GETVRAM(COLOR TABLE, SOURCE,WORKBUFFER (0..7),1)
   1DFC  CD1E89      6908                  CALL            GETCOLOR
                     6909
                     6910  *     PUTVRAM(COLOR TABLE ,DESTINATION,WORKBUFFER (0..7),1)
   1DFF  CDIE9A      6911                  CALL            PUTCOLOR
                     6912
                     6913  *   ENDIF
   1E£02             6914  ENDIF 3 GRAPHICS
                     6915
                         6916   *   DESTINATION   := SUCC (DESTINATION)
       1£02 D9           6917                    EXX
       1E03 23           6918                     INC              HL
                         6919
                         6920   * END
       1E04 C31D8C       6921                     JP              RETURN  HERE
                         6922                               a
                         6923
                         6924
       1607              6925  ENLRG
                         6926  *  OPERATIONS  SPECIFIC  TO THE ENLARGE  ROUTINE
                         6927
                         6928  *    MAGNIFY(WORK  BUFFER [0..7),WORK BUFFERS.   .39))
       1E07 2A8006       6929                    LD               HL, [WORK BUFFER)
       1E0A 010008       6930                    LD               Bc,8
       1E0D £5           6931                    PUSH             HL
       1E0E 01           6932                    PoP              DE
       1E0F 09           6933                    ADD              HL,BC
       1E10 EB           6934                    EX               DE,HL
       1E11 CO1EAB       6935                    CALL             MAGNIFY
                         6936
                        6937   *    PUT _VRAM (TABLE CODE DESTINATION,  WORKBUFFERS.    .39],4)
       1£14 08           6938                    EX               AF AF!
      1615  F5          6939                     PUSH             AF
      1E16  08          6940                     EX               AF AF!
      1E17  F1          6941                     POP              AF
      1E18  09          6942                     EXX
      1€19  £5          6943                     PUSH             HL
      1E1A  D9          6944                     EXX
      1E18  D1          6945                     POP              DE
      1E1C  248006      6946                     LD               HL, (WORKBUFFER)
      1E1F  010008      6947                     LO               BC,8
      1E22  09          6948                     ADD              HL,BC
      1E23  FD210004    6949                     LO               1Y,4
      1£27  €D1C27      6950                     CALL             PUT VRAM_
                        6951
                        6952   *    IF COLOR TEST  THEN
      1E2A CD1E50       6953                     CALL             COLOR_TEST
      1E2D  FEO1        6954                     cP               TRUE
      1E2F 2024         6955                     JR               NZ,END IF 4  GRAPHICS                                                                                               ,
                        6956
                        6957   *  —   GET_VRAM(COLOR  TABLE, SOURCE,WORK BUFFER (0. .7),1)
      1631 CD1E89       6958                     CALL             GETCOLOR
                        6959
                        6960   *      QUADRUPLE(WORK BUFFER(0..7]  ,WORK BUFFER (8. .39))
      1E34 248006       6961                     LD               HL,(WORK BUFFER]
      1E37 010008       6962                     LD               BC,8
      1E3A E5           6963                     PUSH             HL
      1638 01           6964                     POP              DE
      1E3C 09           6965                     ADD              HL,BC
      1E3D EB           6966                     EX               DE,HL
      1E3E CDIEEA       6967                     CALL             QUADRUPLE
                        6968
                        6969  *  —-   PUT_VRAM(COLOR TABLE,DESTINATION,WORK    BUFFER (8..39) ,4)
      1£41 3E04         6970                     LD               A,COLORTABLE
      1£43 09           6971                     EXX
      1644 E5           497?                     PUSH             HL
    1645  D9            6973                  EXX
    1E46  01            6974                  PoP              DE
    1E47  2A8006        6975                  LO               HL, (WORBUFFER)
    1E4A  010008        6976                  LO               BC,8
    1E40  09            6977                  ADD              HL,BC
    1E4E   FD210004     6978                  LD               1Y,4
    1E52  CD1C27        6979                  CALL             PUT VRAM_
                        6980
                        6981  *   ENDIF
    1E55                6982  ENDIF 4 GRAPHICS
                        6983
                        6984  *   DESTINATION  := DESTINATION + 4
    1E55  D9            6985                  EXX
    1E56  23            6986                  INC              HL
    1€57  23            6987                  Inc              HL
    1E58  23            6988                   INC             ML
    1E59  23            6989                   INC             WL
                        6990
                        6991  * END
    1E5A  C31D8C        6992                  JP               RETURNHERE
                        6993
                        6994
                        6995
                        6996
    1E5D                6997  COLORTEST                        3;TESTS WHETHER PATTERN GENERATORS ARE
                        6998                                   ; BEING MANIPULATED AND WHETHER THE
                        6999                                   ; GRAPHICS MODE IS 2. IF SO THE ABOVE
                        7000                                   : ROUTINES NEED TO DEAL WITH THE COLOR
                        7001                                   ; GENERATORS THAT CORRESPOND TO THE
                        7002                                   s PATTERN GENERATORS THEY ARE OPERATING
                        7003                                   3 ON.
                        7004
                        7005                                   ; WOT INPUTS, RETURNS WITH TRUE (1)  IN
                       7006                                    ; A IF CONDITION IS TRUE, FALSE (0)  IF
                        7007                                   ; WOT.
                        7008
                        7009
                        7010  * BEGIN COLORTEST
                        7011
                        7012  * CHECK TABLE CODE  IN A’                                                                                                                      ’
    1E5D  08            7013                  EX               AFAF!
    1ESE  F5            7014                  PUSH             AF
    1E5F  08            7015                  EX               AFAF!
    1E60  F1            7016                  POP              AF
    1661  FEO3          7017                  cP               PATTERNGEN
    1€63  200A          7018                  JR               WZ,EXITFALSE
                        7019
                        7020  * CHECK MODE
    1E65  2173C3        7021                  LD               HL,VDPMODE WORD
    1668  CB4E          7022                  BIT              1,(HL)
    1E6A  2803          7023                  JR               Z,EXI1FALSE
                        7024
                        7025  * EXIT WHEREIF TRUE
    1E6C  3601          7026                  LD               A,TRUE
    1E6E  C9            7027                  RET
                        7028
                        7029  * EXIT HERE IF FALSE
   1E6F 3€00          7030   EXITFALSE         LD                 A, FALSE
   1€71 C9            7031                     RET
                      7032
                      7033
                      7034
  1E72                7035   PUTTABLE
                      7036                                    ‘PUTS        THE CONTENTS    OF WORK BUFFER[8..15)
                      7037                                  _     ;  IW VRAM  AT  THE  GIVEN  DESTINATION.
                      7038
  1€72  08            7039                     EX                 AF,AF?
  1E73  F5            7040                     PUSH               AF
  1E74  08            7041                     EX                 AF,AF!
  1675  F1            7042                     POP                AF
  1€76  D9            7043                     EXX
  1€77  E5            7044                     PUSH               HL
  1E78  09            7045                     EXX
  1E79  01            7046                     POP                bE
  1E7A  2A8006        7047                     LD                 HL, (WORK BUFFER)
  1€7D  010008        7048                     LD                 BC,8
  1£80  09            7049                    ADD                 HL,BC
  1681  FD210001      7050                     LO                 1y,1
  1€85 CD1C27        7051                      CALL               PUT _VRAM_
  1E88 C9            7052                      RET
                     7053
                     7054
  1E89               7055   GET COLOR
                     7056                                         ; GETS  THE  COLOR   INFORMATION   FROM
                     7057                                         ; THE  APPROPRIATE    PLACE  IN  VRAM
                     7058
 1E89  3E04          7059                     LD                 A, COLOR TABLE
 1E88  09            7060                     EXX
 1E8C  05            7061                     PUSH               OE
 1E80  D9            7062                     EXX
 1E8E  01            7063                     POP                DE
 1EBF  248006        7064                     LD                 HL, [WORK BUFFER)
 1E92  FD210001      7065                     LD                  ly,1
 1E96  CD1BA3        7066                     CALL               GET _VRAM_
 1E99  C9            7067                     RET
                     7068
                     7069
 1E9A                7070   PUTCOLOR
                     7071                                        ;  PUTS  COLOR  INFORMATION    IN  THE
                     7072                                        ;  APPROPRIATE   PLACE   IN  VRAM
                     7073
 1E9A  3E04          7074                     LD                 A, COLOR TABLE
 1E9C  09            7075                     EXX
 1€90  £5            7076                     PUSH               HL
 1E9E  D9            7077                     EXX
 1E9F  D1            7078                     POP                DE
 1EA0  2A8006        7079                     LD                 HL, [WORK BUFFER)
 1EA3  FD210001      7080                     LD                 1y,1
 1EA7  CD1C27        7081                     CALL               PUT _VRAM_
 1EAA  C9            7082                     RET
                     7083    PROG
                        7085
                        7086  * THE ROUTINES IN THIS MODULE TAKE A SINGLE 8-BYTE BLOCK AS INPUT AND
                        7087  * PRODUCE 4 8-BYTE BLOCKS AS OUTPUT. THEY PERFORM A 2-TO-1 EXPANSION
                        7088  * AND A SIMPLE QUADRUPLING OPEATION RESPECTIVELY.
                        7089
                        7090                           ;
                        7091
                        7092                  GLB             MAGNIFY
                        7093                  GLB             QUADRUPLE
                        7094  * NAMES OF ENTRY POINTS
                        7095
                        7096
                        7097
                        7098
    1EAB                7099  MAGNIFY                         ; PERFORM A 2-TO-1 EXPANSION ON AN
                        7100                                  ; 8-BYTE BLOCK OF DATA.
                        7101
                        7102                                  ; SOURCE POINTER IN HL, DESTINATION
                        7103                                  ; POINTER IN DE.
                        7104
                        7105                                  ; DESTROYS IX,1Y,AF,B8C,DE,WL
                        7106                                              |
               <OOOA>   7107  BYTECOUNT       EQU             BC
               <OO0E>   7108  SOURCE          EQU             Ix
               <O00F>   7109  DESTINATION     EQU             ly
                        7110  * STANDARD NAMES FOR REGISTERS IN THIS ROUTINE
                        7111
                        7112  * BEGIN
    1EAB  E5            7113                  PUSH            HL              ; SET UP POINTERS
    TEAC  DDE1          7114                  POP             SOURCE
    TEAE  05            7115                  PUSH            DE
    1EAF  FDE1          7116                  POP             DESTINATION
                        7117
                        7118  *  BYTE COUNT  := 8
    1EB1  010008        7119                  LD              BYTECOUNT,8
                        7120
                        7121  *   REPEAT
    1EB4                7122  MAG_LOOP
                        7123
                        7124  *     EXPAND A BYTE FROM SOURCE
    1E84  DD7E00        7125                  LD              A,[SOURCE+0)
    1E87  DD23          7126                  INC             SOURCE
    1EB9  57            7127                  LO              D,A
    1EBA  1£04          7128                  LD              E,4
    1EBC  CB17          7129  EXP_1           RL              A               ; DOUBLE BITS IN HIGH
    1EBE  CB14          7130                  RL              H               ; ORDER NIBBLE
    1ECO  CB12          7131                  RL              D
    1EC2  CB14          7132                  RL              H
    1EC4  10            7133                  DEC             E
    1ECS  205           7134                  JR              WZ,EXP1
    1EC7  1604          7135                  LO              E,4
    1EC9  CB17          7136  EXP2            RL              A               ; DOUBLE BITS IN LOW
    1ECB  CB15          7137                  RL              L               ; ORDER NIBBLE
    1ECD  CB12          7138                  RL              D
    1ECF  CB15          7139                  RL              L
    1ED1  1D            7140                  DEC             E
    1ED2  20F5          7141                  JR              NZ,EXP2
                       7142
                       7143   *      WRITE   IT  TO DESTINATION
    1ED4  FD7400       7144                       LD               [DEST INATION+0)  ,H
    1E07  £07510       7145                       LD               [DESTINATION+  16),L
    1EDA FO23          7146                       INC              DESTINATION
    1EDC FD7400        7147                       LD               [DESTINATION+0)  ,H
    1EDF FD7510        7148                       LD               [DESTIWATION+  16],L
    1EE2 FD23          7149                       INC              DESTINATION
                       7150
                       7151   *  —   DECREMENT    BYTE COUNT
    1EE4 08            7152                       DEC              BYTE COUNT
                       7153
                       7154   *   UNTIL   BYTE COUNT    = 0
    1EE5 79            7155                       LD               a,c
    1EE6 80            7156                       ca               B
    1EE7 208           7157                       JR               NZ,MAG LOOP
                       7158
                       7159   * END
    1EE9 C9            7160                       RET
                       7161
    1EEA               7162  QUADRUPLE                             ; PERFORM   A QUADRUPLING    ON  AN
                       7163                                        ; 8-BYTE   BLOCK OF  DATA.
                       7164
                       7165                                        ; SOURCE   POINTER  IN HL,   DESTINATION
                      7166                                         ; POINTER   IW DE.
                       7167
                      7168                                         ; DESTROYS   AF,BC,DE, HL, IY
                      7169
                      7170   *  BEGIN
                      7171
                      7172   *   BYTE   COUNT    := 16
   1EEA  010010       7173                       LD               BYTE COUNT,   16
                      7174
                      7175   *    SAVE   SOURCE
   1EED  E5           7176                       PUSH             HL
                      7177
                      7178   *    REPEAT
   1EEE               7179   QUAD LOOP
                      7180
                      7181   *       GET  A BYTE   FROM SOURCE
   1EEE  7E           7182                       LO               A, (HL)
   1EEF 23            7183                       INC              HL
                      7184
                      7185   *      WRITE   IT  TWICE  TO DESTINATION
   1EFO  12           7186                       LD                (DE),A
   1EF1  13           7187                       INC              DE
   1EF2  12           7188                       LD                (DE),A
   1EF3  13           7189                       INC              DE
                      7190
                      7191   *  —   DECREMENT    BYTE COUNT
   1EF4 0B            7192                       DEC              BYTE COUNT
                      7193
                      7194   *        IF BYTE  COUNT   = 8 THEN RESTORE  SOURCE
   1EF5 79            7195                       LD               a,c
   1EF6 FEO8          7196                       cP               8
   1EF8 2001          7197                       JR               NZ,SKIPZZ
   1EFA E1            7198                       POP              HL
                       7201 *   UNTIL BYTECOUNT   = 0
    1EFC  BO           7203                  OR               8
                     7210
                     7211   * THE  ROUTINES   IN  THIS  FILE TAKE  A SINGLE   8-BYTE  BLOCK   AS INPUT
                     7212   * AND  OPERATE   ON  IT PRODUCING  A  SINGLE  8-B8YTE  BLOCK  AS OUTPUT.
                     7213   * THEY  PERFORM   MIRRORING   AROUND  THE  VERTICAL  AXIS,   MIRRORING
                     7214   * AROUND   THE  HORIZONTAL   AXIS, AND  90  DEGREE  ROTATION.
                     7215
                     7216                      GLB         ‘MIRROR       LR
                     7217                      GLB                ROTATE
                     7218                      GLB                MIRROR  UD
                     7219
                     7220
  1F00               7221. MIRROR  LR                 |           ; REFLECTS   AN 8X8  PIXEL   DATA  BLOCK
                     7222                                         ; AROUND   THE VERTICAL   AXIS.
                     7223
                     7224                        |                ; SOURCE   IN HL,  DEST  IN DE
                     7225                                         ; DESTROYS   AF,BC,DE, HL
                     7226
  1F00  010008       7227                LD    BC,8               ;SET BLOCK   BYTE  COUNT
  1F03               7228  MIR  L_R10
  1F03 46            7229                LD   B,  [HL]            ;GET SOURCE   BYTE
  1F04 3E80          7230                LO    A,80H              ;SET WORK  REGISTER   MASK
  1F06               7231  MIR  L_R20
  1F06 CB10          7232                RL    OB                 ;PUT SOURCE   IN CARRY
  1F08  1F           7233                RRA                      ;PUT CARRY   INTO  WORK  REGISTER
  1F09 30FB          7234                JR    WC,MIR  L_R20   =;  CONTINUE  UNTIL   MASK  BIT  IS IN  CARRY
  1F08  12           7235                LD                       WRITE   MIRRORED   BYTE  TO DESTINATION
  1FOC 23            7236                INC   HL                 ADVANCE   POINTERS
  1FOD  13           7237                INC   DE
  1FOE OD            7238                DEC   C
  1FOF 20F2          7239                JR    WZ,MIR-L_R10       CHECK   COUNT
  1F11               7240  MIR L_RX
  1F11 C9            7241                RET
         |           7242
                     7243
                     7244
 1F12                7245  ROTATE                                 ; ROTATE  OBJECT  90  DEGREES
                     7246
                     7247                                        ;  SOURCE  IN  HL DESTINATION    IN DE.
                     7248                                        ;  DESTROYS  AF,BC,DE,HL
                     7249
 1F12  £5            7250                PUSH  HL
 1F13  DOE?          7251                POP   IX
 1F15  €8            7252                EX    DE,HL
 1F16  010008        7253                LD    8C,8
 1F19               7254   TRANSP_10
 1F19  DOCBO016  =  7255                 RL    [1X+0)            ;PUT  HI  BIT  OF FIRST  SOURCE   BYTE  IN CARRY
 1F1D  CBIE         7256                 RR    CHL)              ;PUT  CARRY   IN DESTINATION   BYTE
 1FIF  DDCBO116  =  7257                 RL    (1X#1)
 1F23  CBIE         7258                 RR    {HL}
 1F25  DDCBO216  =  7259                 RL    [1X+#2)
 1F29  CBIE         7260                 RR    (HL)
 1F2B  DOCBO316     ©7261               RL     CIX#3)
 1F2F  CBIE         7262                RR     (HL)
 1F31  DDCBO416  =  7263                 RL    [1X+4)
 1F35  CBIE         7264                RR     (HL)
 1F37  DDCBOS16  =  =—_7265             RL     [1X+5)
 1F38  CBIE         7244                RR     (HL)
    1F30   DDCB0616        7267             RL =  (IX+6)
    1F41   CBIE            7268             RR    (HL)
    1F43   D0DCBO716       7269             RL =  (IX+*7)
    1F47   CBIE            7270             RR =  (HL)
    1F49   23              7271             INC  HL
    1F4A   OO              7272             DEC  C
    1F4B   20CC            7273             JR               10
    1F4D                   7274  TRANSP_X
    1F40   C9              7275             RET
                           7276
                           7277
                           7278
    1F4E                   7279  MIRRORU D                            REFLECT  8X8  PIXEL  BLOCK  AROUND    THE
                           7280                                      + HORIZONTAL   AXIS
                           7281                                                                 |
                           7282                                      ; SOURCE   IN HL,  DESTINATION   IW  DE
                           7283                                      ; DESTROYS   AF,BC,DE,HL
                           7284
                           7285  * SOURCE  := SOURCE    + 7
    1F4E   010007          7286                  LO                  BC,7
    151    09              7287                  ADD                 HL,BC
                           7288
                           7289  * BYTE COUNT :=  8
    1F52   03              7290                  INC                 BC
                           7291
                           7292  * REPEAT
                <1F53>     7293  REFLECTLOOP     EQu                 $
                           7294
                           7295  *   (DESTINATION)  :=  (SOURCE)
    1F53   7E              7296                  LD                  A, (HL)
    1754   12              7297                  LD                   {DE,A
                           7298
                           7299  *    DESTINATION   :=  SUCC (DESTINATION)
    1755   13              7300                  INC                 DE
                           7301
                           7302  *    SOURCE  := PRED   (SOURCE)
    1—56   28              7303                  DEC                 HL
                           7304
                           7305  *    BYTE COUNT :=  PRED  BYTE  COUNT
    1F57   08              7306                  DEC                 BC
                           7307
                           7308  * UNTIL BYTE COUNT  = 0
    1F58   78              7309                  LD                  A,B
    1F59   B1              7310                  OR                  Cc
    1F5A   20F7            7311                  JR                  NZ2,REFLECTLOOP
                           7312  * END
    1F5C   C9              7313                  RET
                           7314
                           7315                  sModified   February   14,  1983.   Filler   locations   were
                           7316                  ;changed   to OFFH   to reflect   OS7PRIME.
                           7317
    1F5D   FFFFFFFF        7318   HEX FF,FF,FF,FF                  Filler
                           7319
                           7320
                           7321
                       7324   REKARAAKAAEAAAKEAKARKRKEAKKER     Hie  JUMP  TABLE RAERAKAKRRARRAKRAKKAAKKKEKKKKARE
                       7325 ;
                       7326   ;JUMP  TABLE    THIS   IS  THE  JUMP  TABLE  TO BE USED  IN ACCESSING CODE
                       7327   ;               RESIDING    IN  THE  0.S. ROM.   THIS TABLE  MUST HAVE ITS
                       7328   ;               ORIGIN   REDEFINED    TO ACCOUNT  FOR GROWTH.  PILE NEW ROUTINES
                       7329   ;               AT  THE  BEGINNING    OF THE  TABLE MAKING  SURE TO  INCREMENT
                       7330   *               THE  WO OF  ROUTIRES    VALUE.
                       7331
                       7332   * NOTE   ****
                       7333
                       7334   *                   #*&*  NO  DELETIONS   SHOULD  BE MADE  FROM ****
                       7335   *                   #ee*   THIS  TABLE                          ane
                       7336
             <2000>    7337   ROM  END            EQU                 2000H
                       7338   * THIS   IS THE  END  OF  OS  ROM
                       7339
             <0035>    7340  WO  OF ROUTINES      EQU  53
                       7341   * THIS  NUMBER   KEEPS   COUNT  OF  THE  NUMBER  OF ROUTINES  ACCESSED THROUGH
                       7342  *  THE  JUMP   TABLE.
                       7343
                       7344   JUMP TABLE          ORG   ROM_END-(WO_OF    ROUTINES*3)
                       7345
   1F61 C30300         7346  PLAY  SONGS          JP  PLAY SONGS
   1F64 C30488         7347  ACTIVATEP            JP  ACTIVATEQ
   1f67 C306C7         7348  PUTOBJP              JP  PUTOBJO
   1F6A C31D5A         7349  REFLECT  VERTICAL     JP  RFLCT VERT
   1F6D C31D60         7350  REFLECT  HORIZONTAL      JP RFLCT  WOR
   1F70 C31D66         7351  ROTATE  90           JP  ROT90
   1F73 C31D6C         7352  ENLARGE              JP  ENLRG
   1F76 C3114A         7353  CONTROLLER   SCAN    JP  CONT SCAN
   1F79 C31188         7354  DECODER             JP  DECODER_
   1F7C C31979         7355  GAME OPT             JP GAME  _OPT_
   1F7F C31927         7356  LOAD  ASCII          JP  LOAD_ASCII_
   1F82 C318D4         7357  FILL_VRAM            JP  FILL VRAM_
   1F85 C318E9         7358  MODE   1             JP MODE  1
   1F88 C3116A         7359  UPDATE  SPINNER     JP  UPDATE  SPINNER
   1F8B C31B0E         7360   INIT TABLEP        JP   INIT TABLEQ
  1F8E  C31B8C         7361  GET VRAMP           JP  GET  VRAMQ
  1F91  C31C10         7362  PUT VRAMP           JP  PUT  VRAMQ
  1F94  C3ICSA         7363  INIT SPR  ORDERP    JP   INIT  SPRORDER
  1F97  C31C76        7364   WR_SPR   NM  TBLP   JP  WR  SPR  NM  TBLQ
  1F9A  C3OF9A        7365   INIT   TIMERP       JP   INIT  TIMERQ
  1F90  C30FB8        7366   FREE  SIGNALP       JP  FREE  SIGNALQ
  1FAO  C31044        7367   REQUEST  SIGNALP    JP  REQUEST  SIGNALQ
  1FA3  C3108F        7368   TEST  SIGNALP       JP  TEST  SIGNALQ
  1FA6  C31CBC        7369   WRITE  REGISTERP    JP  REG WRITEQ
  1FA9  C31CED        7370   WRITE  VRAMP        JP  VRAM  WRITEQ
  TFAC  C31D2A        7371   READ_VRAMP          JP  VRAM  READQ
  1FAF  C30655        7372   IWIT  WRITERP       JP   INIT QUEUEQ
  1FB2  C30203        7373   SOUND  INITP        JP  INIT  SOUNDQ
  1FB5  C30251        7374   PLAY ITP            JP  JUKE BOX
  1FB8  C31B1D        7375   INIT TABLE         JP  INIT  TABLE.
  1FBB  C31BA3        7376   GET VRAM           JP  GET VRAM_
  1FBE  C31C27        7377   PUT  VRAM          JP  PUT  VRAM_
  1FC1  C31C66        7378   INIT  SPR   ORDER  JP  INIT  SPR ORDER_
  1FC4  C31C82        7379   WR  SPR  NM  TBL   JP  WR  SPR  NM  TBL|
  1FC7  C30FAA        7380   INIT TIMER         JP  INIT _TIMER_
